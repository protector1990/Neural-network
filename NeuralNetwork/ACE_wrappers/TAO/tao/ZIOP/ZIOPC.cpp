// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:366


#include "tao/ZIOP/ZIOP.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:461

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_ZIOP_CompressionData[] =
      {
        { "compressor", &Compression::_tc_CompressorId },
        { "original_length", &CORBA::_tc_ulong },
        { "data", &Compression::_tc_Buffer }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_ZIOP_CompressionData (
  ::CORBA::tk_struct,
  "IDL:ZIOP/CompressionData:1.0",
  "CompressionData",
  _tao_fields_ZIOP_CompressionData,
  3);


namespace ZIOP
{
  ::CORBA::TypeCode_ptr const _tc_CompressionData =
    &_tao_tc_ZIOP_CompressionData;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:56

void
ZIOP::CompressionData::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CompressionData *_tao_tmp_pointer =
    static_cast<CompressionData *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ZIOP_CompressionEnablingPolicyValue (
    ::CORBA::tk_alias,
    "IDL:ZIOP/CompressionEnablingPolicyValue:1.0",
    "CompressionEnablingPolicyValue",
    &CORBA::_tc_boolean);
  

namespace ZIOP
{
  ::CORBA::TypeCode_ptr const _tc_CompressionEnablingPolicyValue =
    &_tao_tc_ZIOP_CompressionEnablingPolicyValue;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ZIOP::CompressionEnablingPolicy.

ZIOP::CompressionEnablingPolicy_ptr
TAO::Objref_Traits<ZIOP::CompressionEnablingPolicy>::duplicate (
    ZIOP::CompressionEnablingPolicy_ptr p)
{
  return ZIOP::CompressionEnablingPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<ZIOP::CompressionEnablingPolicy>::release (
    ZIOP::CompressionEnablingPolicy_ptr p)
{
  ::CORBA::release (p);
}

ZIOP::CompressionEnablingPolicy_ptr
TAO::Objref_Traits<ZIOP::CompressionEnablingPolicy>::nil (void)
{
  return ZIOP::CompressionEnablingPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ZIOP::CompressionEnablingPolicy>::marshal (
    const ZIOP::CompressionEnablingPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




ZIOP::CompressionEnablingPolicy::CompressionEnablingPolicy (void)
{}

ZIOP::CompressionEnablingPolicy::~CompressionEnablingPolicy (void)
{
}

void
ZIOP::CompressionEnablingPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  CompressionEnablingPolicy *_tao_tmp_pointer =
    static_cast<CompressionEnablingPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ZIOP::CompressionEnablingPolicy_ptr
ZIOP::CompressionEnablingPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressionEnablingPolicy::_duplicate (
      dynamic_cast<CompressionEnablingPolicy_ptr> (_tao_objref));
}

ZIOP::CompressionEnablingPolicy_ptr
ZIOP::CompressionEnablingPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressionEnablingPolicy::_duplicate (
      dynamic_cast<CompressionEnablingPolicy_ptr> (_tao_objref));
}

ZIOP::CompressionEnablingPolicy_ptr
ZIOP::CompressionEnablingPolicy::_nil (void)
{
  return 0;
}

ZIOP::CompressionEnablingPolicy_ptr
ZIOP::CompressionEnablingPolicy::_duplicate (CompressionEnablingPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ZIOP::CompressionEnablingPolicy::_tao_release (CompressionEnablingPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ZIOP::CompressionEnablingPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ZIOP/CompressionEnablingPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* ZIOP::CompressionEnablingPolicy::_interface_repository_id (void) const
{
  return "IDL:ZIOP/CompressionEnablingPolicy:1.0";
}

::CORBA::Boolean
ZIOP::CompressionEnablingPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ZIOP_CompressionEnablingPolicy (
    ::CORBA::tk_local_interface,
    "IDL:ZIOP/CompressionEnablingPolicy:1.0",
    "CompressionEnablingPolicy");
  

namespace ZIOP
{
  ::CORBA::TypeCode_ptr const _tc_CompressionEnablingPolicy =
    &_tao_tc_ZIOP_CompressionEnablingPolicy;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ZIOP::CompressorIdLevelListPolicy.

ZIOP::CompressorIdLevelListPolicy_ptr
TAO::Objref_Traits<ZIOP::CompressorIdLevelListPolicy>::duplicate (
    ZIOP::CompressorIdLevelListPolicy_ptr p)
{
  return ZIOP::CompressorIdLevelListPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<ZIOP::CompressorIdLevelListPolicy>::release (
    ZIOP::CompressorIdLevelListPolicy_ptr p)
{
  ::CORBA::release (p);
}

ZIOP::CompressorIdLevelListPolicy_ptr
TAO::Objref_Traits<ZIOP::CompressorIdLevelListPolicy>::nil (void)
{
  return ZIOP::CompressorIdLevelListPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ZIOP::CompressorIdLevelListPolicy>::marshal (
    const ZIOP::CompressorIdLevelListPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




ZIOP::CompressorIdLevelListPolicy::CompressorIdLevelListPolicy (void)
{}

ZIOP::CompressorIdLevelListPolicy::~CompressorIdLevelListPolicy (void)
{
}

void
ZIOP::CompressorIdLevelListPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  CompressorIdLevelListPolicy *_tao_tmp_pointer =
    static_cast<CompressorIdLevelListPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ZIOP::CompressorIdLevelListPolicy_ptr
ZIOP::CompressorIdLevelListPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressorIdLevelListPolicy::_duplicate (
      dynamic_cast<CompressorIdLevelListPolicy_ptr> (_tao_objref));
}

ZIOP::CompressorIdLevelListPolicy_ptr
ZIOP::CompressorIdLevelListPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressorIdLevelListPolicy::_duplicate (
      dynamic_cast<CompressorIdLevelListPolicy_ptr> (_tao_objref));
}

ZIOP::CompressorIdLevelListPolicy_ptr
ZIOP::CompressorIdLevelListPolicy::_nil (void)
{
  return 0;
}

ZIOP::CompressorIdLevelListPolicy_ptr
ZIOP::CompressorIdLevelListPolicy::_duplicate (CompressorIdLevelListPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ZIOP::CompressorIdLevelListPolicy::_tao_release (CompressorIdLevelListPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ZIOP::CompressorIdLevelListPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ZIOP/CompressorIdLevelListPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* ZIOP::CompressorIdLevelListPolicy::_interface_repository_id (void) const
{
  return "IDL:ZIOP/CompressorIdLevelListPolicy:1.0";
}

::CORBA::Boolean
ZIOP::CompressorIdLevelListPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ZIOP_CompressorIdLevelListPolicy (
    ::CORBA::tk_local_interface,
    "IDL:ZIOP/CompressorIdLevelListPolicy:1.0",
    "CompressorIdLevelListPolicy");
  

namespace ZIOP
{
  ::CORBA::TypeCode_ptr const _tc_CompressorIdLevelListPolicy =
    &_tao_tc_ZIOP_CompressorIdLevelListPolicy;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ZIOP_CompressionLowValuePolicyValue (
    ::CORBA::tk_alias,
    "IDL:ZIOP/CompressionLowValuePolicyValue:1.0",
    "CompressionLowValuePolicyValue",
    &CORBA::_tc_ulong);
  

namespace ZIOP
{
  ::CORBA::TypeCode_ptr const _tc_CompressionLowValuePolicyValue =
    &_tao_tc_ZIOP_CompressionLowValuePolicyValue;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ZIOP::CompressionLowValuePolicy.

ZIOP::CompressionLowValuePolicy_ptr
TAO::Objref_Traits<ZIOP::CompressionLowValuePolicy>::duplicate (
    ZIOP::CompressionLowValuePolicy_ptr p)
{
  return ZIOP::CompressionLowValuePolicy::_duplicate (p);
}

void
TAO::Objref_Traits<ZIOP::CompressionLowValuePolicy>::release (
    ZIOP::CompressionLowValuePolicy_ptr p)
{
  ::CORBA::release (p);
}

ZIOP::CompressionLowValuePolicy_ptr
TAO::Objref_Traits<ZIOP::CompressionLowValuePolicy>::nil (void)
{
  return ZIOP::CompressionLowValuePolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ZIOP::CompressionLowValuePolicy>::marshal (
    const ZIOP::CompressionLowValuePolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




ZIOP::CompressionLowValuePolicy::CompressionLowValuePolicy (void)
{}

ZIOP::CompressionLowValuePolicy::~CompressionLowValuePolicy (void)
{
}

void
ZIOP::CompressionLowValuePolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  CompressionLowValuePolicy *_tao_tmp_pointer =
    static_cast<CompressionLowValuePolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ZIOP::CompressionLowValuePolicy_ptr
ZIOP::CompressionLowValuePolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressionLowValuePolicy::_duplicate (
      dynamic_cast<CompressionLowValuePolicy_ptr> (_tao_objref));
}

ZIOP::CompressionLowValuePolicy_ptr
ZIOP::CompressionLowValuePolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressionLowValuePolicy::_duplicate (
      dynamic_cast<CompressionLowValuePolicy_ptr> (_tao_objref));
}

ZIOP::CompressionLowValuePolicy_ptr
ZIOP::CompressionLowValuePolicy::_nil (void)
{
  return 0;
}

ZIOP::CompressionLowValuePolicy_ptr
ZIOP::CompressionLowValuePolicy::_duplicate (CompressionLowValuePolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ZIOP::CompressionLowValuePolicy::_tao_release (CompressionLowValuePolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ZIOP::CompressionLowValuePolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ZIOP/CompressionLowValuePolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* ZIOP::CompressionLowValuePolicy::_interface_repository_id (void) const
{
  return "IDL:ZIOP/CompressionLowValuePolicy:1.0";
}

::CORBA::Boolean
ZIOP::CompressionLowValuePolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ZIOP_CompressionLowValuePolicy (
    ::CORBA::tk_local_interface,
    "IDL:ZIOP/CompressionLowValuePolicy:1.0",
    "CompressionLowValuePolicy");
  

namespace ZIOP
{
  ::CORBA::TypeCode_ptr const _tc_CompressionLowValuePolicy =
    &_tao_tc_ZIOP_CompressionLowValuePolicy;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ZIOP::CompressionMinRatioPolicy.

ZIOP::CompressionMinRatioPolicy_ptr
TAO::Objref_Traits<ZIOP::CompressionMinRatioPolicy>::duplicate (
    ZIOP::CompressionMinRatioPolicy_ptr p)
{
  return ZIOP::CompressionMinRatioPolicy::_duplicate (p);
}

void
TAO::Objref_Traits<ZIOP::CompressionMinRatioPolicy>::release (
    ZIOP::CompressionMinRatioPolicy_ptr p)
{
  ::CORBA::release (p);
}

ZIOP::CompressionMinRatioPolicy_ptr
TAO::Objref_Traits<ZIOP::CompressionMinRatioPolicy>::nil (void)
{
  return ZIOP::CompressionMinRatioPolicy::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ZIOP::CompressionMinRatioPolicy>::marshal (
    const ZIOP::CompressionMinRatioPolicy_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




ZIOP::CompressionMinRatioPolicy::CompressionMinRatioPolicy (void)
{}

ZIOP::CompressionMinRatioPolicy::~CompressionMinRatioPolicy (void)
{
}

void
ZIOP::CompressionMinRatioPolicy::_tao_any_destructor (void *_tao_void_pointer)
{
  CompressionMinRatioPolicy *_tao_tmp_pointer =
    static_cast<CompressionMinRatioPolicy *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ZIOP::CompressionMinRatioPolicy_ptr
ZIOP::CompressionMinRatioPolicy::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressionMinRatioPolicy::_duplicate (
      dynamic_cast<CompressionMinRatioPolicy_ptr> (_tao_objref));
}

ZIOP::CompressionMinRatioPolicy_ptr
ZIOP::CompressionMinRatioPolicy::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressionMinRatioPolicy::_duplicate (
      dynamic_cast<CompressionMinRatioPolicy_ptr> (_tao_objref));
}

ZIOP::CompressionMinRatioPolicy_ptr
ZIOP::CompressionMinRatioPolicy::_nil (void)
{
  return 0;
}

ZIOP::CompressionMinRatioPolicy_ptr
ZIOP::CompressionMinRatioPolicy::_duplicate (CompressionMinRatioPolicy_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ZIOP::CompressionMinRatioPolicy::_tao_release (CompressionMinRatioPolicy_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ZIOP::CompressionMinRatioPolicy::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Policy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ZIOP/CompressionMinRatioPolicy:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* ZIOP::CompressionMinRatioPolicy::_interface_repository_id (void) const
{
  return "IDL:ZIOP/CompressionMinRatioPolicy:1.0";
}

::CORBA::Boolean
ZIOP::CompressionMinRatioPolicy::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ZIOP_CompressionMinRatioPolicy (
    ::CORBA::tk_local_interface,
    "IDL:ZIOP/CompressionMinRatioPolicy:1.0",
    "CompressionMinRatioPolicy");
  

namespace ZIOP
{
  ::CORBA::TypeCode_ptr const _tc_CompressionMinRatioPolicy =
    &_tao_tc_ZIOP_CompressionMinRatioPolicy;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::ZIOP::CompressionData &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::ZIOP::CompressionData>::insert_copy (
        _tao_any,
        ::ZIOP::CompressionData::_tao_any_destructor,
        ::ZIOP::_tc_CompressionData,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    ZIOP::CompressionData *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ZIOP::CompressionData>::insert (
      _tao_any,
      ::ZIOP::CompressionData::_tao_any_destructor,
      ::ZIOP::_tc_CompressionData,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::ZIOP::CompressionData *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::ZIOP::CompressionData>::extract (
        _tao_any,
        ::ZIOP::CompressionData::_tao_any_destructor,
        ::ZIOP::_tc_CompressionData,
        _tao_elem);
}
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ZIOP::CompressionData &_tao_elem)
{
  TAO::Any_Dual_Impl_T<ZIOP::CompressionData>::insert_copy (
    _tao_any,
    ZIOP::CompressionData::_tao_any_destructor,
    ZIOP::_tc_CompressionData,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ZIOP::CompressionData *_tao_elem)
{
  TAO::Any_Dual_Impl_T<ZIOP::CompressionData>::insert (
    _tao_any,
    ZIOP::CompressionData::_tao_any_destructor,
    ZIOP::_tc_CompressionData,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ZIOP::CompressionData *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<ZIOP::CompressionData>::extract (
      _tao_any,
      ZIOP::CompressionData::_tao_any_destructor,
      ZIOP::_tc_CompressionData,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressionEnablingPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressionEnablingPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressionEnablingPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CompressionEnablingPolicy_ptr _tao_elem)
  {
    CompressionEnablingPolicy_ptr _tao_objptr =
      CompressionEnablingPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CompressionEnablingPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CompressionEnablingPolicy>::insert (
        _tao_any,
        CompressionEnablingPolicy::_tao_any_destructor,
        _tc_CompressionEnablingPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CompressionEnablingPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CompressionEnablingPolicy>::extract (
          _tao_any,
          CompressionEnablingPolicy::_tao_any_destructor,
          _tc_CompressionEnablingPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ZIOP::CompressionEnablingPolicy_ptr _tao_elem)
{
  ZIOP::CompressionEnablingPolicy_ptr _tao_objptr =
    ZIOP::CompressionEnablingPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ZIOP::CompressionEnablingPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ZIOP::CompressionEnablingPolicy>::insert (
      _tao_any,
      ZIOP::CompressionEnablingPolicy::_tao_any_destructor,
      ZIOP::_tc_CompressionEnablingPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ZIOP::CompressionEnablingPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ZIOP::CompressionEnablingPolicy>::extract (
        _tao_any,
        ZIOP::CompressionEnablingPolicy::_tao_any_destructor,
        ZIOP::_tc_CompressionEnablingPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressorIdLevelListPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressorIdLevelListPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressorIdLevelListPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CompressorIdLevelListPolicy_ptr _tao_elem)
  {
    CompressorIdLevelListPolicy_ptr _tao_objptr =
      CompressorIdLevelListPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CompressorIdLevelListPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CompressorIdLevelListPolicy>::insert (
        _tao_any,
        CompressorIdLevelListPolicy::_tao_any_destructor,
        _tc_CompressorIdLevelListPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CompressorIdLevelListPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CompressorIdLevelListPolicy>::extract (
          _tao_any,
          CompressorIdLevelListPolicy::_tao_any_destructor,
          _tc_CompressorIdLevelListPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ZIOP::CompressorIdLevelListPolicy_ptr _tao_elem)
{
  ZIOP::CompressorIdLevelListPolicy_ptr _tao_objptr =
    ZIOP::CompressorIdLevelListPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ZIOP::CompressorIdLevelListPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ZIOP::CompressorIdLevelListPolicy>::insert (
      _tao_any,
      ZIOP::CompressorIdLevelListPolicy::_tao_any_destructor,
      ZIOP::_tc_CompressorIdLevelListPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ZIOP::CompressorIdLevelListPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ZIOP::CompressorIdLevelListPolicy>::extract (
        _tao_any,
        ZIOP::CompressorIdLevelListPolicy::_tao_any_destructor,
        ZIOP::_tc_CompressorIdLevelListPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressionLowValuePolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressionLowValuePolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressionLowValuePolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CompressionLowValuePolicy_ptr _tao_elem)
  {
    CompressionLowValuePolicy_ptr _tao_objptr =
      CompressionLowValuePolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CompressionLowValuePolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CompressionLowValuePolicy>::insert (
        _tao_any,
        CompressionLowValuePolicy::_tao_any_destructor,
        _tc_CompressionLowValuePolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CompressionLowValuePolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CompressionLowValuePolicy>::extract (
          _tao_any,
          CompressionLowValuePolicy::_tao_any_destructor,
          _tc_CompressionLowValuePolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ZIOP::CompressionLowValuePolicy_ptr _tao_elem)
{
  ZIOP::CompressionLowValuePolicy_ptr _tao_objptr =
    ZIOP::CompressionLowValuePolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ZIOP::CompressionLowValuePolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ZIOP::CompressionLowValuePolicy>::insert (
      _tao_any,
      ZIOP::CompressionLowValuePolicy::_tao_any_destructor,
      ZIOP::_tc_CompressionLowValuePolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ZIOP::CompressionLowValuePolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ZIOP::CompressionLowValuePolicy>::extract (
        _tao_any,
        ZIOP::CompressionLowValuePolicy::_tao_any_destructor,
        ZIOP::_tc_CompressionLowValuePolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressionMinRatioPolicy>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressionMinRatioPolicy>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<ZIOP::CompressionMinRatioPolicy>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CompressionMinRatioPolicy_ptr _tao_elem)
  {
    CompressionMinRatioPolicy_ptr _tao_objptr =
      CompressionMinRatioPolicy::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CompressionMinRatioPolicy_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CompressionMinRatioPolicy>::insert (
        _tao_any,
        CompressionMinRatioPolicy::_tao_any_destructor,
        _tc_CompressionMinRatioPolicy,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CompressionMinRatioPolicy_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CompressionMinRatioPolicy>::extract (
          _tao_any,
          CompressionMinRatioPolicy::_tao_any_destructor,
          _tc_CompressionMinRatioPolicy,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ZIOP::CompressionMinRatioPolicy_ptr _tao_elem)
{
  ZIOP::CompressionMinRatioPolicy_ptr _tao_objptr =
    ZIOP::CompressionMinRatioPolicy::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ZIOP::CompressionMinRatioPolicy_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ZIOP::CompressionMinRatioPolicy>::insert (
      _tao_any,
      ZIOP::CompressionMinRatioPolicy::_tao_any_destructor,
      ZIOP::_tc_CompressionMinRatioPolicy,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ZIOP::CompressionMinRatioPolicy_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ZIOP::CompressionMinRatioPolicy>::extract (
        _tao_any,
        ZIOP::CompressionMinRatioPolicy::_tao_any_destructor,
        ZIOP::_tc_CompressionMinRatioPolicy,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:49


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ZIOP::CompressionData &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.compressor) &&
    (strm << _tao_aggregate.original_length) &&
    (strm << _tao_aggregate.data);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ZIOP::CompressionData &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.compressor) &&
    (strm >> _tao_aggregate.original_length) &&
    (strm >> _tao_aggregate.data);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


