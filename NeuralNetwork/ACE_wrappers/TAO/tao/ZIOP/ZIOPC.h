// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:149

#ifndef _TAO_PIDL_ZIOPC_VWKRQP_H_
#define _TAO_PIDL_ZIOPC_VWKRQP_H_

#include /**/ "ace/pre.h"

#ifndef TAO_ZIOP_SAFE_INCLUDE
#error You should not include ZIOPC.h, use tao/ZIOP/ZIOP.h
#endif /* TAO_ZIOP_SAFE_INCLUDE */

#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "tao/ZIOP/ziop_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Basic_Types.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/AnyTypeCode/PolicyA.h"
#include "tao/AnyTypeCode/IOPA.h"
#include "tao/Compression/Compression_includeA.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "tao/PolicyC.h"
#include "tao/IOPC.h"
#include "tao/Compression/Compression_includeC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 5 || TAO_MICRO_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

namespace ZIOP
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:258

  struct CompressionData;

  typedef
    ::TAO_Var_Var_T<
        CompressionData
      >
    CompressionData_var;

  typedef
    ::TAO_Out_T<
        CompressionData
      >
    CompressionData_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_ch.cpp:48

  struct TAO_ZIOP_Export CompressionData
  {

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef CompressionData_var _var_type;
    typedef CompressionData_out _out_type;

    static void _tao_any_destructor (void *);
    
    Compression::CompressorId compressor;
    ::CORBA::ULong original_length;
    Compression::Buffer data;
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_ZIOP_Export ::CORBA::TypeCode_ptr const _tc_CompressionData;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_constant\constant_ch.cpp:35

  const CORBA::ULong COMPRESSION_ENABLING_POLICY_ID = 64U;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typedef\typedef_ch.cpp:370

  typedef ::CORBA::Boolean CompressionEnablingPolicyValue;
  typedef ::CORBA::Boolean_out CompressionEnablingPolicyValue_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_ZIOP_Export ::CORBA::TypeCode_ptr const _tc_CompressionEnablingPolicyValue;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_ZIOP_COMPRESSIONENABLINGPOLICY__VAR_OUT_CH_)
#define _ZIOP_COMPRESSIONENABLINGPOLICY__VAR_OUT_CH_

  class CompressionEnablingPolicy;
  typedef CompressionEnablingPolicy *CompressionEnablingPolicy_ptr;
  typedef TAO_Objref_Var_T<CompressionEnablingPolicy> CompressionEnablingPolicy_var;
  typedef TAO_Objref_Out_T<CompressionEnablingPolicy> CompressionEnablingPolicy_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_ZIOP_Export CompressionEnablingPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef CompressionEnablingPolicy_ptr _ptr_type;
    typedef CompressionEnablingPolicy_var _var_type;
    typedef CompressionEnablingPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static CompressionEnablingPolicy_ptr _duplicate (CompressionEnablingPolicy_ptr obj);

    static void _tao_release (CompressionEnablingPolicy_ptr obj);

    static CompressionEnablingPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static CompressionEnablingPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CompressionEnablingPolicy_ptr _nil (void);

    virtual ::ZIOP::CompressionEnablingPolicyValue compression_enabled (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CompressionEnablingPolicy (void);

    

    virtual ~CompressionEnablingPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CompressionEnablingPolicy (const CompressionEnablingPolicy &);

    void operator= (const CompressionEnablingPolicy &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_ZIOP_Export ::CORBA::TypeCode_ptr const _tc_CompressionEnablingPolicy;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_constant\constant_ch.cpp:35

  const CORBA::ULong COMPRESSOR_ID_LEVEL_LIST_POLICY_ID = 65U;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_ZIOP_COMPRESSORIDLEVELLISTPOLICY__VAR_OUT_CH_)
#define _ZIOP_COMPRESSORIDLEVELLISTPOLICY__VAR_OUT_CH_

  class CompressorIdLevelListPolicy;
  typedef CompressorIdLevelListPolicy *CompressorIdLevelListPolicy_ptr;
  typedef TAO_Objref_Var_T<CompressorIdLevelListPolicy> CompressorIdLevelListPolicy_var;
  typedef TAO_Objref_Out_T<CompressorIdLevelListPolicy> CompressorIdLevelListPolicy_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_ZIOP_Export CompressorIdLevelListPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef CompressorIdLevelListPolicy_ptr _ptr_type;
    typedef CompressorIdLevelListPolicy_var _var_type;
    typedef CompressorIdLevelListPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static CompressorIdLevelListPolicy_ptr _duplicate (CompressorIdLevelListPolicy_ptr obj);

    static void _tao_release (CompressorIdLevelListPolicy_ptr obj);

    static CompressorIdLevelListPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static CompressorIdLevelListPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CompressorIdLevelListPolicy_ptr _nil (void);

    virtual ::Compression::CompressorIdLevelList * compressor_ids (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CompressorIdLevelListPolicy (void);

    

    virtual ~CompressorIdLevelListPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CompressorIdLevelListPolicy (const CompressorIdLevelListPolicy &);

    void operator= (const CompressorIdLevelListPolicy &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_ZIOP_Export ::CORBA::TypeCode_ptr const _tc_CompressorIdLevelListPolicy;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_constant\constant_ch.cpp:35

  const CORBA::ULong COMPRESSION_LOW_VALUE_POLICY_ID = 66U;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typedef\typedef_ch.cpp:370

  typedef ::CORBA::ULong CompressionLowValuePolicyValue;
  typedef ::CORBA::ULong_out CompressionLowValuePolicyValue_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_ZIOP_Export ::CORBA::TypeCode_ptr const _tc_CompressionLowValuePolicyValue;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_ZIOP_COMPRESSIONLOWVALUEPOLICY__VAR_OUT_CH_)
#define _ZIOP_COMPRESSIONLOWVALUEPOLICY__VAR_OUT_CH_

  class CompressionLowValuePolicy;
  typedef CompressionLowValuePolicy *CompressionLowValuePolicy_ptr;
  typedef TAO_Objref_Var_T<CompressionLowValuePolicy> CompressionLowValuePolicy_var;
  typedef TAO_Objref_Out_T<CompressionLowValuePolicy> CompressionLowValuePolicy_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_ZIOP_Export CompressionLowValuePolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef CompressionLowValuePolicy_ptr _ptr_type;
    typedef CompressionLowValuePolicy_var _var_type;
    typedef CompressionLowValuePolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static CompressionLowValuePolicy_ptr _duplicate (CompressionLowValuePolicy_ptr obj);

    static void _tao_release (CompressionLowValuePolicy_ptr obj);

    static CompressionLowValuePolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static CompressionLowValuePolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CompressionLowValuePolicy_ptr _nil (void);

    virtual ::ZIOP::CompressionLowValuePolicyValue low_value (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CompressionLowValuePolicy (void);

    

    virtual ~CompressionLowValuePolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CompressionLowValuePolicy (const CompressionLowValuePolicy &);

    void operator= (const CompressionLowValuePolicy &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_ZIOP_Export ::CORBA::TypeCode_ptr const _tc_CompressionLowValuePolicy;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_constant\constant_ch.cpp:35

  const CORBA::ULong COMPRESSION_MIN_RATIO_POLICY_ID = 67U;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_ZIOP_COMPRESSIONMINRATIOPOLICY__VAR_OUT_CH_)
#define _ZIOP_COMPRESSIONMINRATIOPOLICY__VAR_OUT_CH_

  class CompressionMinRatioPolicy;
  typedef CompressionMinRatioPolicy *CompressionMinRatioPolicy_ptr;
  typedef TAO_Objref_Var_T<CompressionMinRatioPolicy> CompressionMinRatioPolicy_var;
  typedef TAO_Objref_Out_T<CompressionMinRatioPolicy> CompressionMinRatioPolicy_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_ZIOP_Export CompressionMinRatioPolicy
    : public virtual ::CORBA::Policy
  
  {
  public:

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef CompressionMinRatioPolicy_ptr _ptr_type;
    typedef CompressionMinRatioPolicy_var _var_type;
    typedef CompressionMinRatioPolicy_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static CompressionMinRatioPolicy_ptr _duplicate (CompressionMinRatioPolicy_ptr obj);

    static void _tao_release (CompressionMinRatioPolicy_ptr obj);

    static CompressionMinRatioPolicy_ptr _narrow (::CORBA::Object_ptr obj);
    static CompressionMinRatioPolicy_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CompressionMinRatioPolicy_ptr _nil (void);

    virtual ::Compression::CompressionRatio ratio (
      void) = 0;

    virtual ::CORBA::Policy_ptr copy (
      void) = 0;

    virtual void destroy (
      void) = 0;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    CompressionMinRatioPolicy (void);

    

    virtual ~CompressionMinRatioPolicy (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CompressionMinRatioPolicy (const CompressionMinRatioPolicy &);

    void operator= (const CompressionMinRatioPolicy &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_ZIOP_Export ::CORBA::TypeCode_ptr const _tc_CompressionMinRatioPolicy;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64

} // module ZIOP

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:66


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::ZIOP::CompressionData>
    : public
        Var_Size_Arg_Traits_T<
            ::ZIOP::CompressionData,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:60


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_ZIOP_COMPRESSIONENABLINGPOLICY__TRAITS_)
#define _ZIOP_COMPRESSIONENABLINGPOLICY__TRAITS_

  template<>
  struct TAO_ZIOP_Export Objref_Traits< ::ZIOP::CompressionEnablingPolicy>
  {
    static ::ZIOP::CompressionEnablingPolicy_ptr duplicate (
        ::ZIOP::CompressionEnablingPolicy_ptr p);
    static void release (
        ::ZIOP::CompressionEnablingPolicy_ptr p);
    static ::ZIOP::CompressionEnablingPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ZIOP::CompressionEnablingPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ZIOP_COMPRESSORIDLEVELLISTPOLICY__TRAITS_)
#define _ZIOP_COMPRESSORIDLEVELLISTPOLICY__TRAITS_

  template<>
  struct TAO_ZIOP_Export Objref_Traits< ::ZIOP::CompressorIdLevelListPolicy>
  {
    static ::ZIOP::CompressorIdLevelListPolicy_ptr duplicate (
        ::ZIOP::CompressorIdLevelListPolicy_ptr p);
    static void release (
        ::ZIOP::CompressorIdLevelListPolicy_ptr p);
    static ::ZIOP::CompressorIdLevelListPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ZIOP::CompressorIdLevelListPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ZIOP_COMPRESSIONLOWVALUEPOLICY__TRAITS_)
#define _ZIOP_COMPRESSIONLOWVALUEPOLICY__TRAITS_

  template<>
  struct TAO_ZIOP_Export Objref_Traits< ::ZIOP::CompressionLowValuePolicy>
  {
    static ::ZIOP::CompressionLowValuePolicy_ptr duplicate (
        ::ZIOP::CompressionLowValuePolicy_ptr p);
    static void release (
        ::ZIOP::CompressionLowValuePolicy_ptr p);
    static ::ZIOP::CompressionLowValuePolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ZIOP::CompressionLowValuePolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_ZIOP_COMPRESSIONMINRATIOPOLICY__TRAITS_)
#define _ZIOP_COMPRESSIONMINRATIOPOLICY__TRAITS_

  template<>
  struct TAO_ZIOP_Export Objref_Traits< ::ZIOP::CompressionMinRatioPolicy>
  {
    static ::ZIOP::CompressionMinRatioPolicy_ptr duplicate (
        ::ZIOP::CompressionMinRatioPolicy_ptr p);
    static void release (
        ::ZIOP::CompressionMinRatioPolicy_ptr p);
    static ::ZIOP::CompressionMinRatioPolicy_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ZIOP::CompressionMinRatioPolicy_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  TAO_ZIOP_Export void operator<<= (::CORBA::Any &, const ::ZIOP::CompressionData &); // copying version
  TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ::ZIOP::CompressionData*); // noncopying version
  TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::ZIOP::CompressionData *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ZIOP_Export void operator<<= (::CORBA::Any &, const ZIOP::CompressionData &); // copying version
TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ZIOP::CompressionData*); // noncopying version
TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ZIOP::CompressionData *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  TAO_ZIOP_Export void operator<<= ( ::CORBA::Any &, CompressionEnablingPolicy_ptr); // copying
  TAO_ZIOP_Export void operator<<= ( ::CORBA::Any &, CompressionEnablingPolicy_ptr *); // non-copying
  TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CompressionEnablingPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ZIOP::CompressionEnablingPolicy_ptr); // copying
TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ZIOP::CompressionEnablingPolicy_ptr *); // non-copying
TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ZIOP::CompressionEnablingPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  TAO_ZIOP_Export void operator<<= ( ::CORBA::Any &, CompressorIdLevelListPolicy_ptr); // copying
  TAO_ZIOP_Export void operator<<= ( ::CORBA::Any &, CompressorIdLevelListPolicy_ptr *); // non-copying
  TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CompressorIdLevelListPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ZIOP::CompressorIdLevelListPolicy_ptr); // copying
TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ZIOP::CompressorIdLevelListPolicy_ptr *); // non-copying
TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ZIOP::CompressorIdLevelListPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  TAO_ZIOP_Export void operator<<= ( ::CORBA::Any &, CompressionLowValuePolicy_ptr); // copying
  TAO_ZIOP_Export void operator<<= ( ::CORBA::Any &, CompressionLowValuePolicy_ptr *); // non-copying
  TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CompressionLowValuePolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ZIOP::CompressionLowValuePolicy_ptr); // copying
TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ZIOP::CompressionLowValuePolicy_ptr *); // non-copying
TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ZIOP::CompressionLowValuePolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ZIOP
{
  TAO_ZIOP_Export void operator<<= ( ::CORBA::Any &, CompressionMinRatioPolicy_ptr); // copying
  TAO_ZIOP_Export void operator<<= ( ::CORBA::Any &, CompressionMinRatioPolicy_ptr *); // non-copying
  TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CompressionMinRatioPolicy_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ZIOP::CompressionMinRatioPolicy_ptr); // copying
TAO_ZIOP_Export void operator<<= (::CORBA::Any &, ZIOP::CompressionMinRatioPolicy_ptr *); // non-copying
TAO_ZIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ZIOP::CompressionMinRatioPolicy_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:43



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_ZIOP_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ZIOP::CompressionData &);
TAO_ZIOP_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ZIOP::CompressionData &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1686


TAO_END_VERSIONED_NAMESPACE_DECL

#include /**/ "ace/post.h"

#endif /* ifndef */

