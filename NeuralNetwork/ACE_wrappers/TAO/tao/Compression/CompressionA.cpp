// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

#include "CompressionA.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Compression::CompressionException::_tao_type (void) const
{
  return ::Compression::_tc_CompressionException;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Compression_CompressionException[] =
      {
        { "reason", &CORBA::_tc_long },
        { "description", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Compression_CompressionException (
  ::CORBA::tk_except,
  "IDL:omg.org/Compression/CompressionException:1.0",
  "CompressionException",
  _tao_fields_Compression_CompressionException,
  2);


namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_CompressionException =
    &_tao_tc_Compression_CompressionException;
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Compression::FactoryAlreadyRegistered::_tao_type (void) const
{
  return ::Compression::_tc_FactoryAlreadyRegistered;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_Compression_FactoryAlreadyRegistered = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Compression_FactoryAlreadyRegistered (
  ::CORBA::tk_except,
  "IDL:omg.org/Compression/FactoryAlreadyRegistered:1.0",
  "FactoryAlreadyRegistered",
  _tao_fields_Compression_FactoryAlreadyRegistered,
  0);


namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_FactoryAlreadyRegistered =
    &_tao_tc_Compression_FactoryAlreadyRegistered;
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Compression::UnknownCompressorId::_tao_type (void) const
{
  return ::Compression::_tc_UnknownCompressorId;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_Compression_UnknownCompressorId = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Compression_UnknownCompressorId (
  ::CORBA::tk_except,
  "IDL:omg.org/Compression/UnknownCompressorId:1.0",
  "UnknownCompressorId",
  _tao_fields_Compression_UnknownCompressorId,
  0);


namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_UnknownCompressorId =
    &_tao_tc_Compression_UnknownCompressorId;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Compression_CompressorId (
    ::CORBA::tk_alias,
    "IDL:omg.org/Compression/CompressorId:1.0",
    "CompressorId",
    &CORBA::_tc_ushort);
  

namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_CompressorId =
    &_tao_tc_Compression_CompressorId;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Compression_CompressionLevel (
    ::CORBA::tk_alias,
    "IDL:omg.org/Compression/CompressionLevel:1.0",
    "CompressionLevel",
    &CORBA::_tc_ushort);
  

namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_CompressionLevel =
    &_tao_tc_Compression_CompressionLevel;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Compression_CompressionRatio (
    ::CORBA::tk_alias,
    "IDL:omg.org/Compression/CompressionRatio:1.0",
    "CompressionRatio",
    &CORBA::_tc_float);
  

namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_CompressionRatio =
    &_tao_tc_Compression_CompressionRatio;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Compression_CompressorIdLevel[] =
      {
        { "compressor_id", &Compression::_tc_CompressorId },
        { "compression_level", &Compression::_tc_CompressionLevel }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Compression_CompressorIdLevel (
  ::CORBA::tk_struct,
  "IDL:omg.org/Compression/CompressorIdLevel:1.0",
  "CompressorIdLevel",
  _tao_fields_Compression_CompressorIdLevel,
  2);


namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_CompressorIdLevel =
    &_tao_tc_Compression_CompressorIdLevel;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Compression_CompressorIdLevelList_GUARD
#define _TAO_TYPECODE_Compression_CompressorIdLevelList_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Compression_CompressorIdLevelList_0 (
          ::CORBA::tk_sequence,
          &Compression::_tc_CompressorIdLevel,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Compression_CompressorIdLevelList_0 =
        &Compression_CompressorIdLevelList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_Compression_CompressorIdLevelList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Compression_CompressorIdLevelList (
    ::CORBA::tk_alias,
    "IDL:omg.org/Compression/CompressorIdLevelList:1.0",
    "CompressorIdLevelList",
    &TAO::TypeCode::tc_Compression_CompressorIdLevelList_0);
  

namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_CompressorIdLevelList =
    &_tao_tc_Compression_CompressorIdLevelList;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Compression_Buffer (
    ::CORBA::tk_alias,
    "IDL:omg.org/Compression/Buffer:1.0",
    "Buffer",
    &CORBA::_tc_OctetSeq);
  

namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_Buffer =
    &_tao_tc_Compression_Buffer;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Compression_Compressor (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/Compression/Compressor:1.0",
    "Compressor");
  

namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_Compressor =
    &_tao_tc_Compression_Compressor;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Compression_CompressorFactory (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/Compression/CompressorFactory:1.0",
    "CompressorFactory");
  

namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_CompressorFactory =
    &_tao_tc_Compression_CompressorFactory;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_Compression_CompressorFactorySeq_GUARD
#define _TAO_TYPECODE_Compression_CompressorFactorySeq_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Compression_CompressorFactorySeq_0 (
          ::CORBA::tk_sequence,
          &Compression::_tc_CompressorFactory,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Compression_CompressorFactorySeq_0 =
        &Compression_CompressorFactorySeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_Compression_CompressorFactorySeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Compression_CompressorFactorySeq (
    ::CORBA::tk_alias,
    "IDL:omg.org/Compression/CompressorFactorySeq:1.0",
    "CompressorFactorySeq",
    &TAO::TypeCode::tc_Compression_CompressorFactorySeq_0);
  

namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_CompressorFactorySeq =
    &_tao_tc_Compression_CompressorFactorySeq;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Compression_CompressionManager (
    ::CORBA::tk_local_interface,
    "IDL:omg.org/Compression/CompressionManager:1.0",
    "CompressionManager");
  

namespace Compression
{
  ::CORBA::TypeCode_ptr const _tc_CompressionManager =
    &_tao_tc_Compression_CompressionManager;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Compression::CompressionException>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  

  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Compression::CompressionException &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Compression::CompressionException>::insert_copy (
        _tao_any,
        ::Compression::CompressionException::_tao_any_destructor,
        ::Compression::_tc_CompressionException,
        _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Compression::CompressionException *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Compression::CompressionException>::insert (
        _tao_any,
        ::Compression::CompressionException::_tao_any_destructor,
        ::Compression::_tc_CompressionException,
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Compression::CompressionException *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Compression::CompressionException>::extract (
          _tao_any,
          ::Compression::CompressionException::_tao_any_destructor,
          ::Compression::_tc_CompressionException,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Compression::CompressionException &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::CompressionException>::insert_copy (
      _tao_any,
      Compression::CompressionException::_tao_any_destructor,
      Compression::_tc_CompressionException,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Compression::CompressionException *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::CompressionException>::insert (
      _tao_any,
      Compression::CompressionException::_tao_any_destructor,
      Compression::_tc_CompressionException,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Compression::CompressionException *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Compression::CompressionException>::extract (
        _tao_any,
        Compression::CompressionException::_tao_any_destructor,
        Compression::_tc_CompressionException,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Compression::FactoryAlreadyRegistered>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  

  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Compression::FactoryAlreadyRegistered &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Compression::FactoryAlreadyRegistered>::insert_copy (
        _tao_any,
        ::Compression::FactoryAlreadyRegistered::_tao_any_destructor,
        ::Compression::_tc_FactoryAlreadyRegistered,
        _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Compression::FactoryAlreadyRegistered *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Compression::FactoryAlreadyRegistered>::insert (
        _tao_any,
        ::Compression::FactoryAlreadyRegistered::_tao_any_destructor,
        ::Compression::_tc_FactoryAlreadyRegistered,
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Compression::FactoryAlreadyRegistered *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Compression::FactoryAlreadyRegistered>::extract (
          _tao_any,
          ::Compression::FactoryAlreadyRegistered::_tao_any_destructor,
          ::Compression::_tc_FactoryAlreadyRegistered,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Compression::FactoryAlreadyRegistered &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::FactoryAlreadyRegistered>::insert_copy (
      _tao_any,
      Compression::FactoryAlreadyRegistered::_tao_any_destructor,
      Compression::_tc_FactoryAlreadyRegistered,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Compression::FactoryAlreadyRegistered *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::FactoryAlreadyRegistered>::insert (
      _tao_any,
      Compression::FactoryAlreadyRegistered::_tao_any_destructor,
      Compression::_tc_FactoryAlreadyRegistered,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Compression::FactoryAlreadyRegistered *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Compression::FactoryAlreadyRegistered>::extract (
        _tao_any,
        Compression::FactoryAlreadyRegistered::_tao_any_destructor,
        Compression::_tc_FactoryAlreadyRegistered,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Compression::UnknownCompressorId>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  

  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Compression::UnknownCompressorId &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Compression::UnknownCompressorId>::insert_copy (
        _tao_any,
        ::Compression::UnknownCompressorId::_tao_any_destructor,
        ::Compression::_tc_UnknownCompressorId,
        _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Compression::UnknownCompressorId *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Compression::UnknownCompressorId>::insert (
        _tao_any,
        ::Compression::UnknownCompressorId::_tao_any_destructor,
        ::Compression::_tc_UnknownCompressorId,
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Compression::UnknownCompressorId *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Compression::UnknownCompressorId>::extract (
          _tao_any,
          ::Compression::UnknownCompressorId::_tao_any_destructor,
          ::Compression::_tc_UnknownCompressorId,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Compression::UnknownCompressorId &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::UnknownCompressorId>::insert_copy (
      _tao_any,
      Compression::UnknownCompressorId::_tao_any_destructor,
      Compression::_tc_UnknownCompressorId,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Compression::UnknownCompressorId *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::UnknownCompressorId>::insert (
      _tao_any,
      Compression::UnknownCompressorId::_tao_any_destructor,
      Compression::_tc_UnknownCompressorId,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Compression::UnknownCompressorId *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Compression::UnknownCompressorId>::extract (
        _tao_any,
        Compression::UnknownCompressorId::_tao_any_destructor,
        Compression::_tc_UnknownCompressorId,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Compression::CompressorIdLevel &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Compression::CompressorIdLevel>::insert_copy (
        _tao_any,
        ::Compression::CompressorIdLevel::_tao_any_destructor,
        ::Compression::_tc_CompressorIdLevel,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    Compression::CompressorIdLevel *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::Compression::CompressorIdLevel>::insert (
      _tao_any,
      ::Compression::CompressorIdLevel::_tao_any_destructor,
      ::Compression::_tc_CompressorIdLevel,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::Compression::CompressorIdLevel *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::Compression::CompressorIdLevel>::extract (
        _tao_any,
        ::Compression::CompressorIdLevel::_tao_any_destructor,
        ::Compression::_tc_CompressorIdLevel,
        _tao_elem);
}
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const Compression::CompressorIdLevel &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::CompressorIdLevel>::insert_copy (
    _tao_any,
    Compression::CompressorIdLevel::_tao_any_destructor,
    Compression::_tc_CompressorIdLevel,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  Compression::CompressorIdLevel *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::CompressorIdLevel>::insert (
    _tao_any,
    Compression::CompressorIdLevel::_tao_any_destructor,
    Compression::_tc_CompressorIdLevel,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const Compression::CompressorIdLevel *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Compression::CompressorIdLevel>::extract (
      _tao_any,
      Compression::CompressorIdLevel::_tao_any_destructor,
      Compression::_tc_CompressorIdLevel,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Compression::CompressorIdLevelList &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Compression::CompressorIdLevelList>::insert_copy (
        _tao_any,
        ::Compression::CompressorIdLevelList::_tao_any_destructor,
        ::Compression::_tc_CompressorIdLevelList,
        _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Compression::CompressorIdLevelList *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Compression::CompressorIdLevelList>::insert (
        _tao_any,
        ::Compression::CompressorIdLevelList::_tao_any_destructor,
        ::Compression::_tc_CompressorIdLevelList,
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Compression::CompressorIdLevelList *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Compression::CompressorIdLevelList>::extract (
          _tao_any,
          ::Compression::CompressorIdLevelList::_tao_any_destructor,
          ::Compression::_tc_CompressorIdLevelList,
          _tao_elem);
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


/// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Compression::CompressorIdLevelList &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::CompressorIdLevelList>::insert_copy (
      _tao_any,
      Compression::CompressorIdLevelList::_tao_any_destructor,
      Compression::_tc_CompressorIdLevelList,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Compression::CompressorIdLevelList *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Compression::CompressorIdLevelList>::insert (
      _tao_any,
      Compression::CompressorIdLevelList::_tao_any_destructor,
      Compression::_tc_CompressorIdLevelList,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Compression::CompressorIdLevelList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Compression::CompressorIdLevelList>::extract (
        _tao_any,
        Compression::CompressorIdLevelList::_tao_any_destructor,
        Compression::_tc_CompressorIdLevelList,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

TAO_END_VERSIONED_NAMESPACE_DECL


