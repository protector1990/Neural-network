// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:366


#include "tao/Compression/Compression.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_ctor.cpp:51

Compression::CompressionException::CompressionException (
    ::CORBA::Long _tao_reason,
    const char * _tao_description)
  : ::CORBA::UserException (
        "IDL:omg.org/Compression/CompressionException:1.0",
        "CompressionException")
{
  this->reason = _tao_reason;
  this->description = ::CORBA::string_dup (_tao_description);
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_cs.cpp:98

Compression::CompressionException::CompressionException (void)
  : ::CORBA::UserException (
        "IDL:omg.org/Compression/CompressionException:1.0",
        "CompressionException")
{
}

Compression::CompressionException::~CompressionException (void)
{
}

Compression::CompressionException::CompressionException (const ::Compression::CompressionException &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->reason = _tao_excp.reason;
  this->description = ::CORBA::string_dup (_tao_excp.description.in ());
}

Compression::CompressionException&
Compression::CompressionException::operator= (const ::Compression::CompressionException &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = _tao_excp.reason;
  this->description = ::CORBA::string_dup (_tao_excp.description.in ());
  return *this;
}

void Compression::CompressionException::_tao_any_destructor (void *_tao_void_pointer)
{
  CompressionException *_tao_tmp_pointer =
    static_cast<CompressionException *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Compression::CompressionException *
Compression::CompressionException::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<CompressionException *> (_tao_excp);
}

const Compression::CompressionException *
Compression::CompressionException::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const CompressionException *> (_tao_excp);
}

::CORBA::Exception *Compression::CompressionException::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Compression::CompressionException, 0);
  return retval;
}

::CORBA::Exception *
Compression::CompressionException::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Compression::CompressionException (*this),
      0);
  return result;
}

void Compression::CompressionException::_raise (void) const
{
  throw *this;
}

void Compression::CompressionException::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Compression::CompressionException::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_cs.cpp:98

Compression::FactoryAlreadyRegistered::FactoryAlreadyRegistered (void)
  : ::CORBA::UserException (
        "IDL:omg.org/Compression/FactoryAlreadyRegistered:1.0",
        "FactoryAlreadyRegistered")
{
}

Compression::FactoryAlreadyRegistered::~FactoryAlreadyRegistered (void)
{
}

Compression::FactoryAlreadyRegistered::FactoryAlreadyRegistered (const ::Compression::FactoryAlreadyRegistered &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
}

Compression::FactoryAlreadyRegistered&
Compression::FactoryAlreadyRegistered::operator= (const ::Compression::FactoryAlreadyRegistered &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void Compression::FactoryAlreadyRegistered::_tao_any_destructor (void *_tao_void_pointer)
{
  FactoryAlreadyRegistered *_tao_tmp_pointer =
    static_cast<FactoryAlreadyRegistered *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Compression::FactoryAlreadyRegistered *
Compression::FactoryAlreadyRegistered::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<FactoryAlreadyRegistered *> (_tao_excp);
}

const Compression::FactoryAlreadyRegistered *
Compression::FactoryAlreadyRegistered::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const FactoryAlreadyRegistered *> (_tao_excp);
}

::CORBA::Exception *Compression::FactoryAlreadyRegistered::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Compression::FactoryAlreadyRegistered, 0);
  return retval;
}

::CORBA::Exception *
Compression::FactoryAlreadyRegistered::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Compression::FactoryAlreadyRegistered (*this),
      0);
  return result;
}

void Compression::FactoryAlreadyRegistered::_raise (void) const
{
  throw *this;
}

void Compression::FactoryAlreadyRegistered::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Compression::FactoryAlreadyRegistered::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_cs.cpp:98

Compression::UnknownCompressorId::UnknownCompressorId (void)
  : ::CORBA::UserException (
        "IDL:omg.org/Compression/UnknownCompressorId:1.0",
        "UnknownCompressorId")
{
}

Compression::UnknownCompressorId::~UnknownCompressorId (void)
{
}

Compression::UnknownCompressorId::UnknownCompressorId (const ::Compression::UnknownCompressorId &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
}

Compression::UnknownCompressorId&
Compression::UnknownCompressorId::operator= (const ::Compression::UnknownCompressorId &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void Compression::UnknownCompressorId::_tao_any_destructor (void *_tao_void_pointer)
{
  UnknownCompressorId *_tao_tmp_pointer =
    static_cast<UnknownCompressorId *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Compression::UnknownCompressorId *
Compression::UnknownCompressorId::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnknownCompressorId *> (_tao_excp);
}

const Compression::UnknownCompressorId *
Compression::UnknownCompressorId::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnknownCompressorId *> (_tao_excp);
}

::CORBA::Exception *Compression::UnknownCompressorId::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Compression::UnknownCompressorId, 0);
  return retval;
}

::CORBA::Exception *
Compression::UnknownCompressorId::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Compression::UnknownCompressorId (*this),
      0);
  return result;
}

void Compression::UnknownCompressorId::_raise (void) const
{
  throw *this;
}

void Compression::UnknownCompressorId::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Compression::UnknownCompressorId::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:56

void
Compression::CompressorIdLevel::_tao_any_destructor (
    void *_tao_void_pointer)
{
  CompressorIdLevel *_tao_tmp_pointer =
    static_cast<CompressorIdLevel *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:105

#if !defined (_COMPRESSION_COMPRESSORIDLEVELLIST_CS_)
#define _COMPRESSION_COMPRESSORIDLEVELLIST_CS_

Compression::CompressorIdLevelList::CompressorIdLevelList (void)
{}

Compression::CompressorIdLevelList::CompressorIdLevelList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< CompressorIdLevel> (max)
{}

Compression::CompressorIdLevelList::CompressorIdLevelList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Compression::CompressorIdLevel * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< CompressorIdLevel>
    (max, length, buffer, release)
{}

Compression::CompressorIdLevelList::CompressorIdLevelList (
    const CompressorIdLevelList &seq)
  : ::TAO::unbounded_value_sequence< CompressorIdLevel> (seq)
{}

Compression::CompressorIdLevelList::~CompressorIdLevelList (void)
{}

void Compression::CompressorIdLevelList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  CompressorIdLevelList * _tao_tmp_pointer =
    static_cast<CompressorIdLevelList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Compression::Compressor.

Compression::Compressor_ptr
TAO::Objref_Traits<Compression::Compressor>::duplicate (
    Compression::Compressor_ptr p)
{
  return Compression::Compressor::_duplicate (p);
}

void
TAO::Objref_Traits<Compression::Compressor>::release (
    Compression::Compressor_ptr p)
{
  ::CORBA::release (p);
}

Compression::Compressor_ptr
TAO::Objref_Traits<Compression::Compressor>::nil (void)
{
  return Compression::Compressor::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Compression::Compressor>::marshal (
    const Compression::Compressor_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




Compression::Compressor::Compressor (void)
{}

Compression::Compressor::~Compressor (void)
{
}

Compression::Compressor_ptr
Compression::Compressor::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Compressor::_duplicate (
      dynamic_cast<Compressor_ptr> (_tao_objref));
}

Compression::Compressor_ptr
Compression::Compressor::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Compressor::_duplicate (
      dynamic_cast<Compressor_ptr> (_tao_objref));
}

Compression::Compressor_ptr
Compression::Compressor::_nil (void)
{
  return 0;
}

Compression::Compressor_ptr
Compression::Compressor::_duplicate (Compressor_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Compression::Compressor::_tao_release (Compressor_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Compression::Compressor::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Compression/Compressor:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Compression::Compressor::_interface_repository_id (void) const
{
  return "IDL:omg.org/Compression/Compressor:1.0";
}

::CORBA::Boolean
Compression::Compressor::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Compression::CompressorFactory.

Compression::CompressorFactory_ptr
TAO::Objref_Traits<Compression::CompressorFactory>::duplicate (
    Compression::CompressorFactory_ptr p)
{
  return Compression::CompressorFactory::_duplicate (p);
}

void
TAO::Objref_Traits<Compression::CompressorFactory>::release (
    Compression::CompressorFactory_ptr p)
{
  ::CORBA::release (p);
}

Compression::CompressorFactory_ptr
TAO::Objref_Traits<Compression::CompressorFactory>::nil (void)
{
  return Compression::CompressorFactory::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Compression::CompressorFactory>::marshal (
    const Compression::CompressorFactory_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




Compression::CompressorFactory::CompressorFactory (void)
{}

Compression::CompressorFactory::~CompressorFactory (void)
{
}

Compression::CompressorFactory_ptr
Compression::CompressorFactory::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressorFactory::_duplicate (
      dynamic_cast<CompressorFactory_ptr> (_tao_objref));
}

Compression::CompressorFactory_ptr
Compression::CompressorFactory::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressorFactory::_duplicate (
      dynamic_cast<CompressorFactory_ptr> (_tao_objref));
}

Compression::CompressorFactory_ptr
Compression::CompressorFactory::_nil (void)
{
  return 0;
}

Compression::CompressorFactory_ptr
Compression::CompressorFactory::_duplicate (CompressorFactory_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Compression::CompressorFactory::_tao_release (CompressorFactory_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Compression::CompressorFactory::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Compression/CompressorFactory:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Compression::CompressorFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/Compression/CompressorFactory:1.0";
}

::CORBA::Boolean
Compression::CompressorFactory::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:105

#if !defined (_COMPRESSION_COMPRESSORFACTORYSEQ_CS_)
#define _COMPRESSION_COMPRESSORFACTORYSEQ_CS_

Compression::CompressorFactorySeq::CompressorFactorySeq (void)
{}

Compression::CompressorFactorySeq::CompressorFactorySeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        CompressorFactory,
        CompressorFactory_var
      > (max)
{}

Compression::CompressorFactorySeq::CompressorFactorySeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Compression::CompressorFactory_ptr * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_object_reference_sequence<
        CompressorFactory,
        CompressorFactory_var
      >
    (max, length, buffer, release)
{}

Compression::CompressorFactorySeq::CompressorFactorySeq (
    const CompressorFactorySeq &seq)
  : ::TAO::unbounded_object_reference_sequence<
        CompressorFactory,
        CompressorFactory_var
      > (seq)
{}

Compression::CompressorFactorySeq::~CompressorFactorySeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for Compression::CompressionManager.

Compression::CompressionManager_ptr
TAO::Objref_Traits<Compression::CompressionManager>::duplicate (
    Compression::CompressionManager_ptr p)
{
  return Compression::CompressionManager::_duplicate (p);
}

void
TAO::Objref_Traits<Compression::CompressionManager>::release (
    Compression::CompressionManager_ptr p)
{
  ::CORBA::release (p);
}

Compression::CompressionManager_ptr
TAO::Objref_Traits<Compression::CompressionManager>::nil (void)
{
  return Compression::CompressionManager::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Compression::CompressionManager>::marshal (
    const Compression::CompressionManager_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




Compression::CompressionManager::CompressionManager (void)
{}

Compression::CompressionManager::~CompressionManager (void)
{
}

Compression::CompressionManager_ptr
Compression::CompressionManager::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressionManager::_duplicate (
      dynamic_cast<CompressionManager_ptr> (_tao_objref));
}

Compression::CompressionManager_ptr
Compression::CompressionManager::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return CompressionManager::_duplicate (
      dynamic_cast<CompressionManager_ptr> (_tao_objref));
}

Compression::CompressionManager_ptr
Compression::CompressionManager::_nil (void)
{
  return 0;
}

Compression::CompressionManager_ptr
Compression::CompressionManager::_duplicate (CompressionManager_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Compression::CompressionManager::_tao_release (CompressionManager_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Compression::CompressionManager::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Compression/CompressionManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* Compression::CompressionManager::_interface_repository_id (void) const
{
  return "IDL:omg.org/Compression/CompressionManager:1.0";
}

::CORBA::Boolean
Compression::CompressionManager::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\cdr_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Compression::CompressionException &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason) &&
        (strm << _tao_aggregate.description.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Compression::CompressionException &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason) &&
    (strm >> _tao_aggregate.description.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\cdr_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Compression::FactoryAlreadyRegistered &_tao_aggregate)
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Compression::FactoryAlreadyRegistered&)
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\cdr_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Compression::UnknownCompressorId &_tao_aggregate)
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    Compression::UnknownCompressorId&)
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:49


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Compression::CompressorIdLevel &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.compressor_id) &&
    (strm << _tao_aggregate.compression_level);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Compression::CompressorIdLevel &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.compressor_id) &&
    (strm >> _tao_aggregate.compression_level);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_Compression_CompressorIdLevelList_CPP_
#define _TAO_CDR_OP_Compression_CompressorIdLevelList_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Compression::CompressorIdLevelList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Compression::CompressorIdLevelList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_Compression_CompressorIdLevelList_CPP_ */


TAO_END_VERSIONED_NAMESPACE_DECL


