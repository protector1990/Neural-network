// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:777

#ifndef _TAO_IDL_COMPRESSIONA_MJKF1L_H_
#define _TAO_IDL_COMPRESSIONA_MJKF1L_H_

#include /**/ "ace/pre.h"

#include /**/ "tao/Compression/compression_export.h"
#include "tao/AnyTypeCode/Any.h"

#include "tao/Compression/Compression.h"
#include "tao/AnyTypeCode/OctetSeqA.h"


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:45

namespace Compression
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_CompressionException;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_FactoryAlreadyRegistered;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_UnknownCompressorId;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_CompressorId;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_CompressionLevel;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_CompressionRatio;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_CompressorIdLevel;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_CompressorIdLevelList;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_Buffer;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_Compressor;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_CompressorFactory;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_CompressorFactorySeq;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_Compression_Export ::CORBA::TypeCode_ptr const _tc_CompressionManager;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:72

} // module Compression


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  

  TAO_Compression_Export void operator<<= (::CORBA::Any &, const ::Compression::CompressionException &); // copying version
  TAO_Compression_Export void operator<<= (::CORBA::Any &, ::Compression::CompressionException*); // noncopying version
  TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Compression::CompressionException *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Compression_Export void operator<<= (::CORBA::Any &, const Compression::CompressionException &); // copying version
TAO_Compression_Export void operator<<= (::CORBA::Any &, Compression::CompressionException*); // noncopying version
TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Compression::CompressionException *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  

  TAO_Compression_Export void operator<<= (::CORBA::Any &, const ::Compression::FactoryAlreadyRegistered &); // copying version
  TAO_Compression_Export void operator<<= (::CORBA::Any &, ::Compression::FactoryAlreadyRegistered*); // noncopying version
  TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Compression::FactoryAlreadyRegistered *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Compression_Export void operator<<= (::CORBA::Any &, const Compression::FactoryAlreadyRegistered &); // copying version
TAO_Compression_Export void operator<<= (::CORBA::Any &, Compression::FactoryAlreadyRegistered*); // noncopying version
TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Compression::FactoryAlreadyRegistered *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  

  TAO_Compression_Export void operator<<= (::CORBA::Any &, const ::Compression::UnknownCompressorId &); // copying version
  TAO_Compression_Export void operator<<= (::CORBA::Any &, ::Compression::UnknownCompressorId*); // noncopying version
  TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Compression::UnknownCompressorId *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_Compression_Export void operator<<= (::CORBA::Any &, const Compression::UnknownCompressorId &); // copying version
TAO_Compression_Export void operator<<= (::CORBA::Any &, Compression::UnknownCompressorId*); // noncopying version
TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Compression::UnknownCompressorId *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  TAO_Compression_Export void operator<<= (::CORBA::Any &, const ::Compression::CompressorIdLevel &); // copying version
  TAO_Compression_Export void operator<<= (::CORBA::Any &, ::Compression::CompressorIdLevel*); // noncopying version
  TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Compression::CompressorIdLevel *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Compression_Export void operator<<= (::CORBA::Any &, const Compression::CompressorIdLevel &); // copying version
TAO_Compression_Export void operator<<= (::CORBA::Any &, Compression::CompressorIdLevel*); // noncopying version
TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Compression::CompressorIdLevel *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Compression
{
  TAO_Compression_Export void operator<<= ( ::CORBA::Any &, const ::Compression::CompressorIdLevelList &); // copying version
  TAO_Compression_Export void operator<<= ( ::CORBA::Any &, ::Compression::CompressorIdLevelList*); // noncopying version
  TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Compression::CompressorIdLevelList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_Compression_Export void operator<<= ( ::CORBA::Any &, const Compression::CompressorIdLevelList &); // copying version
TAO_Compression_Export void operator<<= ( ::CORBA::Any &, Compression::CompressorIdLevelList*); // noncopying version
TAO_Compression_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Compression::CompressorIdLevelList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

TAO_END_VERSIONED_NAMESPACE_DECL



#include /**/ "ace/post.h"

#endif /* ifndef */
