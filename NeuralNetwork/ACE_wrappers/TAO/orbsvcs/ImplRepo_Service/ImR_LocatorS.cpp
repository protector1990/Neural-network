// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:635

#ifndef _TAO_IDL_IMR_LOCATORS_CXAHGA_CPP_
#define _TAO_IDL_IMR_LOCATORS_CXAHGA_CPP_


#include "ImR_LocatorS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/Thread_Lane_Resources.h"
#include "tao/Buffer_Allocator_T.h"
#include "tao/Messaging/AMH_Skeletons.h"
#include "ace/Auto_Functor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_ImplementationRepository_AMH_Locator_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ImplementationRepository_AMH_Locator_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ImplementationRepository_AMH_Locator_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51,  0, 51, 30, 51,  5,
      0,  0, 20,  0, 15, 51, 51,  0,  0, 51,
      0, 51, 51, 51,  0,  0, 15, 10, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ImplementationRepository_AMH_Locator_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 22,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 23,
      MIN_HASH_VALUE = 8,
      MAX_HASH_VALUE = 50,
      HASH_VALUE_RANGE = 43,
      DUPLICATES = 0,
      WORDLIST_SIZE = 30
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"shutdown", &POA_ImplementationRepository::AMH_Administration::shutdown_skel, 0},
      {"spawn_pid", &POA_ImplementationRepository::AMH_Locator::spawn_pid_skel, 0},
      {"_interface", &TAO_AMH_Skeletons::_interface_amh_skel, 0},
      {"kill_server", &POA_ImplementationRepository::AMH_AdministrationExt::kill_server_skel, 0},
      {"link_servers", &POA_ImplementationRepository::AMH_AdministrationExt::link_servers_skel, 0},
      {"remove_server", &POA_ImplementationRepository::AMH_Administration::remove_server_skel, 0},
      {"_repository_id", &TAO_AMH_Skeletons::_repository_id_amh_skel, 0},
      {"shutdown_server", &POA_ImplementationRepository::AMH_Administration::shutdown_server_skel, 0},
      {"",0,0},
      {"server_is_running", &POA_ImplementationRepository::AMH_Administration::server_is_running_skel, 0},
      {"register_activator", &POA_ImplementationRepository::AMH_Locator::register_activator_skel, 0},
      {"list", &POA_ImplementationRepository::AMH_Administration::list_skel, 0},
      {"child_death_pid", &POA_ImplementationRepository::AMH_Locator::child_death_pid_skel, 0},
      {"",0,0},{"",0,0},
      {"server_is_shutting_down", &POA_ImplementationRepository::AMH_Administration::server_is_shutting_down_skel, 0},
      {"find", &POA_ImplementationRepository::AMH_Administration::find_skel, 0},
      {"_component", &TAO_AMH_Skeletons::_component_amh_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_AMH_Skeletons::_non_existent_amh_skel, 0},
      {"",0,0},
      {"unregister_activator", &POA_ImplementationRepository::AMH_Locator::unregister_activator_skel, 0},
      {"",0,0},{"",0,0},
      {"notify_child_death", &POA_ImplementationRepository::AMH_Locator::notify_child_death_skel, 0},
      {"",0,0},
      {"_is_a", &TAO_AMH_Skeletons::_is_a_amh_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"force_remove_server", &POA_ImplementationRepository::AMH_AdministrationExt::force_remove_server_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"activate_server", &POA_ImplementationRepository::AMH_Administration::activate_server_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"add_or_update_server", &POA_ImplementationRepository::AMH_Administration::add_or_update_server_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ImplementationRepository_AMH_Locator_Perfect_Hash_OpTable tao_ImplementationRepository_AMH_Locator_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_ImplementationRepository::AMH_Locator::AMH_Locator (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ImplementationRepository_AMH_Locator_optable;
}

POA_ImplementationRepository::AMH_Locator::AMH_Locator (const AMH_Locator& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_ImplementationRepository::AMH_Administration (rhs),
    POA_ImplementationRepository::AMH_AdministrationExt (rhs)
{
}

POA_ImplementationRepository::AMH_Locator::~AMH_Locator (void)
{
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_ss.cpp:305

void
POA_ImplementationRepository::AMH_Locator::register_activator_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_ImplementationRepository::AMH_Locator * const _tao_impl =
    dynamic_cast<POA_ImplementationRepository::AMH_Locator *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::String_var name;
  ::ImplementationRepository::Activator_var act;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> name.out ()) &&
      (_tao_in >> act.out ())
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->register_activator (
      safe_rd_.get (),
      name.in (),
      act.in ()
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_ss.cpp:305

void
POA_ImplementationRepository::AMH_Locator::unregister_activator_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_ImplementationRepository::AMH_Locator * const _tao_impl =
    dynamic_cast<POA_ImplementationRepository::AMH_Locator *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::String_var name;
  ::CORBA::Long token;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> name.out ()) &&
      (_tao_in >> token)
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->unregister_activator (
      safe_rd_.get (),
      name.in (),
      token
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_ss.cpp:305

void
POA_ImplementationRepository::AMH_Locator::notify_child_death_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_ImplementationRepository::AMH_Locator * const _tao_impl =
    dynamic_cast<POA_ImplementationRepository::AMH_Locator *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::String_var name;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> name.out ())
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->notify_child_death (
      safe_rd_.get (),
      name.in ()
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_ss.cpp:305

void
POA_ImplementationRepository::AMH_Locator::child_death_pid_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_ImplementationRepository::AMH_Locator * const _tao_impl =
    dynamic_cast<POA_ImplementationRepository::AMH_Locator *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::String_var name;
  ::CORBA::Long pid;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> name.out ()) &&
      (_tao_in >> pid)
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->child_death_pid (
      safe_rd_.get (),
      name.in (),
      pid
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_ss.cpp:305

void
POA_ImplementationRepository::AMH_Locator::spawn_pid_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_ImplementationRepository::AMH_Locator * const _tao_impl =
    dynamic_cast<POA_ImplementationRepository::AMH_Locator *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::String_var name;
  ::CORBA::Long pid;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> name.out ()) &&
      (_tao_in >> pid)
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->spawn_pid (
      safe_rd_.get (),
      name.in (),
      pid
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_ImplementationRepository::AMH_Locator::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/Administration:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AdministrationExt:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/Locator:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ImplementationRepository::AMH_Locator::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/Locator:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\amh_ss.cpp:116

void
POA_ImplementationRepository::AMH_Locator::_dispatch (
    TAO_ServerRequest &req,
    TAO::Portable_Server::Servant_Upcall *context)
{
  this->asynchronous_upcall_dispatch (req,context,this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\amh_ss.cpp:65

ImplementationRepository::Locator*
POA_ImplementationRepository::AMH_Locator::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ImplementationRepository::Locator STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_ImplementationRepository_Locator_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ImplementationRepository_Locator_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ImplementationRepository_Locator_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51,  0, 51, 30, 51,  5,
      0,  0, 20,  0, 15, 51, 51,  0,  0, 51,
      0, 51, 51, 51,  0,  0, 15, 10, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ImplementationRepository_Locator_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 22,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 23,
      MIN_HASH_VALUE = 8,
      MAX_HASH_VALUE = 50,
      HASH_VALUE_RANGE = 43,
      DUPLICATES = 0,
      WORDLIST_SIZE = 30
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"shutdown", &POA_ImplementationRepository::Administration::shutdown_skel, 0},
      {"spawn_pid", &POA_ImplementationRepository::Locator::spawn_pid_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"kill_server", &POA_ImplementationRepository::AdministrationExt::kill_server_skel, 0},
      {"link_servers", &POA_ImplementationRepository::AdministrationExt::link_servers_skel, 0},
      {"remove_server", &POA_ImplementationRepository::Administration::remove_server_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"shutdown_server", &POA_ImplementationRepository::Administration::shutdown_server_skel, 0},
      {"",0,0},
      {"server_is_running", &POA_ImplementationRepository::Administration::server_is_running_skel, 0},
      {"register_activator", &POA_ImplementationRepository::Locator::register_activator_skel, 0},
      {"list", &POA_ImplementationRepository::Administration::list_skel, 0},
      {"child_death_pid", &POA_ImplementationRepository::Locator::child_death_pid_skel, 0},
      {"",0,0},{"",0,0},
      {"server_is_shutting_down", &POA_ImplementationRepository::Administration::server_is_shutting_down_skel, 0},
      {"find", &POA_ImplementationRepository::Administration::find_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"",0,0},
      {"unregister_activator", &POA_ImplementationRepository::Locator::unregister_activator_skel, 0},
      {"",0,0},{"",0,0},
      {"notify_child_death", &POA_ImplementationRepository::Locator::notify_child_death_skel, 0},
      {"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"force_remove_server", &POA_ImplementationRepository::AdministrationExt::force_remove_server_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"activate_server", &POA_ImplementationRepository::Administration::activate_server_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"add_or_update_server", &POA_ImplementationRepository::Administration::add_or_update_server_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ImplementationRepository_Locator_Perfect_Hash_OpTable tao_ImplementationRepository_Locator_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_ImplementationRepository::Locator::Locator (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ImplementationRepository_Locator_optable;
}

POA_ImplementationRepository::Locator::Locator (const Locator& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_ImplementationRepository::Administration (rhs),
    POA_ImplementationRepository::AdministrationExt (rhs)
{
}

POA_ImplementationRepository::Locator::~Locator (void)
{
}

namespace POA_ImplementationRepository
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class register_activator_Locator
    : public TAO::Upcall_Command
  {
  public:
    inline register_activator_Locator (
      POA_ImplementationRepository::Locator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ImplementationRepository::Activator>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ImplementationRepository::Activator> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->register_activator (
          arg_1
          , arg_2);
    }
  
  private:
    POA_ImplementationRepository::Locator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_ImplementationRepository::Locator::register_activator_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< ::ImplementationRepository::Activator>::in_arg_val _tao_act;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_name,
      &_tao_act
    };
  
  static size_t const nargs = 3;

  POA_ImplementationRepository::Locator * const impl =
    dynamic_cast<POA_ImplementationRepository::Locator *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  register_activator_Locator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class unregister_activator_Locator
    : public TAO::Upcall_Command
  {
  public:
    inline unregister_activator_Locator (
      POA_ImplementationRepository::Locator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->unregister_activator (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::Locator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_ImplementationRepository::Locator::unregister_activator_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_token;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_name,
      &_tao_token
    };
  
  static size_t const nargs = 3;

  POA_ImplementationRepository::Locator * const impl =
    dynamic_cast<POA_ImplementationRepository::Locator *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  unregister_activator_Locator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class notify_child_death_Locator
    : public TAO::Upcall_Command
  {
  public:
    inline notify_child_death_Locator (
      POA_ImplementationRepository::Locator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->notify_child_death (
        arg_1);
    }
  
  private:
    POA_ImplementationRepository::Locator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_ImplementationRepository::Locator::notify_child_death_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_name
    };
  
  static size_t const nargs = 2;

  POA_ImplementationRepository::Locator * const impl =
    dynamic_cast<POA_ImplementationRepository::Locator *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  notify_child_death_Locator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class child_death_pid_Locator
    : public TAO::Upcall_Command
  {
  public:
    inline child_death_pid_Locator (
      POA_ImplementationRepository::Locator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->child_death_pid (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::Locator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_ImplementationRepository::Locator::child_death_pid_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_pid;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_name,
      &_tao_pid
    };
  
  static size_t const nargs = 3;

  POA_ImplementationRepository::Locator * const impl =
    dynamic_cast<POA_ImplementationRepository::Locator *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  child_death_pid_Locator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class spawn_pid_Locator
    : public TAO::Upcall_Command
  {
  public:
    inline spawn_pid_Locator (
      POA_ImplementationRepository::Locator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->spawn_pid (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::Locator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_ImplementationRepository::Locator::spawn_pid_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_name;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_pid;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_name,
      &_tao_pid
    };
  
  static size_t const nargs = 3;

  POA_ImplementationRepository::Locator * const impl =
    dynamic_cast<POA_ImplementationRepository::Locator *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  spawn_pid_Locator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_ImplementationRepository::Locator::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/Administration:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AdministrationExt:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/Locator:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ImplementationRepository::Locator::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/Locator:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_ImplementationRepository::Locator::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

ImplementationRepository::Locator *
POA_ImplementationRepository::Locator::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ImplementationRepository::Locator STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\amh_rh_ss.cpp:68

POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::TAO_AMH_LocatorResponseHandler (void)
: TAO_AMH_Response_Handler (),
  ::ImplementationRepository::AMH_LocatorResponseHandler ()
{
}

POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::~TAO_AMH_LocatorResponseHandler (void)
{
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::register_activator (
  ::CORBA::Long return_value)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << return_value)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::register_activator_excep (
  ::ImplementationRepository::AMH_LocatorExceptionHolder * holder)
{
  try
  {
    holder->raise_register_activator ();
  }
  catch ( ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::unregister_activator (
  void)
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::unregister_activator_excep (
  ::ImplementationRepository::AMH_LocatorExceptionHolder * holder)
{
  try
  {
    holder->raise_unregister_activator ();
  }
  catch ( ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::notify_child_death (
  void)
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::notify_child_death_excep (
  ::ImplementationRepository::AMH_LocatorExceptionHolder * holder)
{
  try
  {
    holder->raise_notify_child_death ();
  }
  catch ( ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::child_death_pid (
  void)
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::child_death_pid_excep (
  ::ImplementationRepository::AMH_LocatorExceptionHolder * holder)
{
  try
  {
    holder->raise_child_death_pid ();
  }
  catch ( ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::spawn_pid (
  void)
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_LocatorResponseHandler::spawn_pid_excep (
  ::ImplementationRepository::AMH_LocatorExceptionHolder * holder)
{
  try
  {
    holder->raise_spawn_pid ();
  }
  catch ( ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_ImplementationRepository_AMH_UpdatePushNotification_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ImplementationRepository_AMH_UpdatePushNotification_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ImplementationRepository_AMH_UpdatePushNotification_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
      0,  5, 19, 19, 19, 19, 19, 19, 19, 19,
      0, 19, 19, 19,  0, 19,  0, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ImplementationRepository_AMH_UpdatePushNotification_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 16,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 18,
      HASH_VALUE_RANGE = 14,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_AMH_Skeletons::_is_a_amh_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_AMH_Skeletons::_component_amh_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_AMH_Skeletons::_non_existent_amh_skel, 0},
      {"_repository_id", &TAO_AMH_Skeletons::_repository_id_amh_skel, 0},
      {"_interface", &TAO_AMH_Skeletons::_interface_amh_skel, 0},
      {"register_replica", &POA_ImplementationRepository::AMH_UpdatePushNotification::register_replica_skel, 0},
      {"",0,0},
      {"notify_update", &POA_ImplementationRepository::AMH_UpdatePushNotification::notify_update_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ImplementationRepository_AMH_UpdatePushNotification_Perfect_Hash_OpTable tao_ImplementationRepository_AMH_UpdatePushNotification_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_ImplementationRepository::AMH_UpdatePushNotification::AMH_UpdatePushNotification (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ImplementationRepository_AMH_UpdatePushNotification_optable;
}

POA_ImplementationRepository::AMH_UpdatePushNotification::AMH_UpdatePushNotification (const AMH_UpdatePushNotification& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ImplementationRepository::AMH_UpdatePushNotification::~AMH_UpdatePushNotification (void)
{
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_ss.cpp:305

void
POA_ImplementationRepository::AMH_UpdatePushNotification::notify_update_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_ImplementationRepository::AMH_UpdatePushNotification * const _tao_impl =
    dynamic_cast<POA_ImplementationRepository::AMH_UpdatePushNotification *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::CORBA::ULongLong seq_num;
  ::ImplementationRepository::UpdateInfoSeq info;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> seq_num) &&
      (_tao_in >> info)
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->notify_update (
      safe_rd_.get (),
      seq_num,
      info
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_ss.cpp:305

void
POA_ImplementationRepository::AMH_UpdatePushNotification::register_replica_skel (
    TAO_ServerRequest & _tao_server_request,
    TAO::Portable_Server::Servant_Upcall * /* context */,
    TAO_ServantBase * _tao_servant)
{
  POA_ImplementationRepository::AMH_UpdatePushNotification * const _tao_impl =
    dynamic_cast<POA_ImplementationRepository::AMH_UpdatePushNotification *> (_tao_servant);
  if (!_tao_impl)
    throw ::CORBA::INTERNAL ();
  
  ::ImplementationRepository::UpdatePushNotification_var peer;
  ::CORBA::String_var ft_imr_ior;
  TAO_InputCDR & _tao_in = *_tao_server_request.incoming ();

  if (!(
      (_tao_in >> peer.out ()) &&
      (_tao_in >> ft_imr_ior.out ())
    ))
    throw ::CORBA::MARSHAL();
  
  TAO_ORB_Core *orb_core =
    _tao_server_request.orb ()->orb_core ();
  
  TAO_AMH_BUFFER_ALLOCATOR* amh_allocator =
    orb_core->lane_resources ().amh_response_handler_allocator ();
  
  TAO::TAO_Buffer_Allocator<
      POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler,
      TAO_AMH_BUFFER_ALLOCATOR
    > buffer_allocator (amh_allocator);
  
  POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler_ptr _tao_rh_ptr = 
    buffer_allocator.allocate();
  
  if (!_tao_rh_ptr) 
    throw ::CORBA::NO_MEMORY ();
  
  _tao_rh_ptr->init (_tao_server_request, amh_allocator);
  
  ACE_Utils::Auto_Functor <POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler, TAO::ARH_Refcount_Functor> safe_rd_(_tao_rh_ptr);
  
  _tao_impl->register_replica (
      safe_rd_.get (),
      peer.in (),
      ft_imr_ior.in ()
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_ImplementationRepository::AMH_UpdatePushNotification::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/UpdatePushNotification:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ImplementationRepository::AMH_UpdatePushNotification::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/UpdatePushNotification:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\amh_ss.cpp:116

void
POA_ImplementationRepository::AMH_UpdatePushNotification::_dispatch (
    TAO_ServerRequest &req,
    TAO::Portable_Server::Servant_Upcall *context)
{
  this->asynchronous_upcall_dispatch (req,context,this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\amh_ss.cpp:65

ImplementationRepository::UpdatePushNotification*
POA_ImplementationRepository::AMH_UpdatePushNotification::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ImplementationRepository::UpdatePushNotification STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_ImplementationRepository_UpdatePushNotification_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ImplementationRepository_UpdatePushNotification_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ImplementationRepository_UpdatePushNotification_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
     19, 19, 19, 19, 19,  0, 19,  0, 19, 19,
      0,  5, 19, 19, 19, 19, 19, 19, 19, 19,
      0, 19, 19, 19,  0, 19,  0, 19, 19, 19,
     19, 19, 19, 19, 19, 19, 19, 19,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ImplementationRepository_UpdatePushNotification_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 16,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 18,
      HASH_VALUE_RANGE = 14,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"register_replica", &POA_ImplementationRepository::UpdatePushNotification::register_replica_skel, 0},
      {"",0,0},
      {"notify_update", &POA_ImplementationRepository::UpdatePushNotification::notify_update_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ImplementationRepository_UpdatePushNotification_Perfect_Hash_OpTable tao_ImplementationRepository_UpdatePushNotification_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_ImplementationRepository::UpdatePushNotification::UpdatePushNotification (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ImplementationRepository_UpdatePushNotification_optable;
}

POA_ImplementationRepository::UpdatePushNotification::UpdatePushNotification (const UpdatePushNotification& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ImplementationRepository::UpdatePushNotification::~UpdatePushNotification (void)
{
}

namespace POA_ImplementationRepository
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class notify_update_UpdatePushNotification
    : public TAO::Upcall_Command
  {
  public:
    inline notify_update_UpdatePushNotification (
      POA_ImplementationRepository::UpdatePushNotification * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ImplementationRepository::UpdateInfoSeq>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ImplementationRepository::UpdateInfoSeq> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->notify_update (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ImplementationRepository::UpdatePushNotification * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_ImplementationRepository::UpdatePushNotification::notify_update_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_seq_num;
  TAO::SArg_Traits< ::ImplementationRepository::UpdateInfoSeq>::in_arg_val _tao_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_seq_num,
      &_tao_info
    };
  
  static size_t const nargs = 3;

  POA_ImplementationRepository::UpdatePushNotification * const impl =
    dynamic_cast<POA_ImplementationRepository::UpdatePushNotification *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  notify_update_UpdatePushNotification command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ImplementationRepository
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class register_replica_UpdatePushNotification
    : public TAO::Upcall_Command
  {
  public:
    inline register_replica_UpdatePushNotification (
      POA_ImplementationRepository::UpdatePushNotification * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ImplementationRepository::UpdatePushNotification>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ImplementationRepository::UpdatePushNotification> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::inout_arg_type arg_2 =
        TAO::Portable_Server::get_inout_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->register_replica (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_ImplementationRepository::UpdatePushNotification * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_ImplementationRepository::UpdatePushNotification::register_replica_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      ImplementationRepository::_tc_InvalidPeer
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ImplementationRepository::UpdatePushNotification>::in_arg_val _tao_peer;
  TAO::SArg_Traits< char *>::inout_arg_val _tao_ft_imr_ior;
  TAO::SArg_Traits< ::CORBA::ULongLong>::out_arg_val _tao_seq_num;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_peer,
      &_tao_ft_imr_ior,
      &_tao_seq_num
    };
  
  static size_t const nargs = 4;

  POA_ImplementationRepository::UpdatePushNotification * const impl =
    dynamic_cast<POA_ImplementationRepository::UpdatePushNotification *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  register_replica_UpdatePushNotification command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_ImplementationRepository::UpdatePushNotification::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/UpdatePushNotification:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ImplementationRepository::UpdatePushNotification::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/UpdatePushNotification:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_ImplementationRepository::UpdatePushNotification::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

ImplementationRepository::UpdatePushNotification *
POA_ImplementationRepository::UpdatePushNotification::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ImplementationRepository::UpdatePushNotification STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\amh_rh_ss.cpp:68

POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler::TAO_AMH_UpdatePushNotificationResponseHandler (void)
: TAO_AMH_Response_Handler (),
  ::ImplementationRepository::AMH_UpdatePushNotificationResponseHandler ()
{
}

POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler::~TAO_AMH_UpdatePushNotificationResponseHandler (void)
{
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler::notify_update (
  void)
{
  this->_tao_rh_init_reply ();

  
  this->_tao_rh_send_reply ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler::notify_update_excep (
  ::ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder * holder)
{
  try
  {
    holder->raise_notify_update ();
  }
  catch ( ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler::register_replica (
  const char * ft_imr_ior,
  ::CORBA::ULongLong seq_num)
{
  this->_tao_rh_init_reply ();

  if (!(
      (_tao_out << ft_imr_ior) &&
      (_tao_out << seq_num)
    ))
    {
      throw ::CORBA::MARSHAL();
    }
  
  this->_tao_rh_send_reply ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\amh_rh_ss.cpp:77

void
POA_ImplementationRepository::TAO_AMH_UpdatePushNotificationResponseHandler::register_replica_excep (
  ::ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder * holder)
{
  try
  {
    holder->raise_register_replica ();
  }
  catch ( ::CORBA::Exception& ex)
  {
    this->_tao_rh_send_exception (ex);
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

