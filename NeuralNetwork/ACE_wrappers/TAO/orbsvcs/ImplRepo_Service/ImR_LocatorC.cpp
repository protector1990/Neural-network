// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:366


#include "ImR_LocatorC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"
#include "ace/Auto_Ptr.h"

#if !defined (__ACE_INLINE__)
#include "ImR_LocatorC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::Locator.

ImplementationRepository::Locator_ptr
TAO::Objref_Traits<ImplementationRepository::Locator>::duplicate (
    ImplementationRepository::Locator_ptr p)
{
  return ImplementationRepository::Locator::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::Locator>::release (
    ImplementationRepository::Locator_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::Locator_ptr
TAO::Objref_Traits<ImplementationRepository::Locator>::nil (void)
{
  return ImplementationRepository::Locator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::Locator>::marshal (
    const ImplementationRepository::Locator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

::CORBA::Long
ImplementationRepository::Locator::register_activator (
  const char * name,
  ::ImplementationRepository::Activator_ptr act)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Long>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< ::ImplementationRepository::Activator>::in_arg_val _tao_act (act);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_act
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "register_activator",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::Locator::unregister_activator (
  const char * name,
  ::CORBA::Long token)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_token (token);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_token
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "unregister_activator",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::Locator::notify_child_death (
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "notify_child_death",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::Locator::child_death_pid (
  const char * name,
  ::CORBA::Long pid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_pid (pid);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_pid
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "child_death_pid",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::Locator::spawn_pid (
  const char * name,
  ::CORBA::Long pid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_pid (pid);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_pid
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "spawn_pid",
      9,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

ImplementationRepository::Locator::Locator (void)
{
}

ImplementationRepository::Locator::~Locator (void)
{
}

void
ImplementationRepository::Locator::_tao_any_destructor (void *_tao_void_pointer)
{
  Locator *_tao_tmp_pointer =
    static_cast<Locator *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::Locator_ptr
ImplementationRepository::Locator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Locator>::narrow (
        _tao_objref,
        "IDL:ImplementationRepository/Locator:1.0");
}

ImplementationRepository::Locator_ptr
ImplementationRepository::Locator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Locator>::unchecked_narrow (
        _tao_objref);
}

ImplementationRepository::Locator_ptr
ImplementationRepository::Locator::_nil (void)
{
  return 0;
}

ImplementationRepository::Locator_ptr
ImplementationRepository::Locator::_duplicate (Locator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::Locator::_tao_release (Locator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::Locator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/Administration:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AdministrationExt:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/Locator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ImplementationRepository::Locator::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/Locator:1.0";
}

::CORBA::Boolean
ImplementationRepository::Locator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_Locator (
    ::CORBA::tk_objref,
    "IDL:ImplementationRepository/Locator:1.0",
    "Locator");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_Locator =
    &_tao_tc_ImplementationRepository_Locator;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_ImplementationRepository_AMH_LocatorExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMH_LocatorExceptionHolder (
    ::CORBA::tk_value,
    "IDL:ImplementationRepository/AMH_LocatorExceptionHolder:1.0",
    "AMH_LocatorExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_ImplementationRepository_AMH_LocatorExceptionHolder,
    0);
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMH_LocatorExceptionHolder =
    &_tao_tc_ImplementationRepository_AMH_LocatorExceptionHolder;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:53

void
TAO::Value_Traits<ImplementationRepository::AMH_LocatorExceptionHolder>::add_ref (
    ImplementationRepository::AMH_LocatorExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<ImplementationRepository::AMH_LocatorExceptionHolder>::remove_ref (
    ImplementationRepository::AMH_LocatorExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<ImplementationRepository::AMH_LocatorExceptionHolder>::release (
    ImplementationRepository::AMH_LocatorExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

ImplementationRepository::AMH_LocatorExceptionHolder *
ImplementationRepository::AMH_LocatorExceptionHolder::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::ImplementationRepository::AMH_LocatorExceptionHolder * > (v);
}

const char *
ImplementationRepository::AMH_LocatorExceptionHolder::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
ImplementationRepository::AMH_LocatorExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
ImplementationRepository::AMH_LocatorExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_LocatorExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_LocatorExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr ImplementationRepository::AMH_LocatorExceptionHolder::_tao_type (void) const
{
  return ::ImplementationRepository::_tc_AMH_LocatorExceptionHolder;
}

ImplementationRepository::AMH_LocatorExceptionHolder::~AMH_LocatorExceptionHolder (void)
{}

::CORBA::ValueBase *
ImplementationRepository::AMH_LocatorExceptionHolder::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_LocatorExceptionHolder (),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
ImplementationRepository::AMH_LocatorExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_LocatorExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_LocatorExceptionHolder::_tao_match_formal_type (ptrdiff_t ) const
{
  return false;
}

::CORBA::Boolean
ImplementationRepository::AMH_LocatorExceptionHolder::_tao_marshal__ImplementationRepository_AMH_LocatorExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_LocatorExceptionHolder::_tao_unmarshal__ImplementationRepository_AMH_LocatorExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_LocatorExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_LocatorExceptionHolder *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_LocatorExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_LocatorExceptionHolder::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_LocatorExceptionHolder::raise_register_activator (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_LocatorExceptionHolder::raise_unregister_activator (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_LocatorExceptionHolder::raise_notify_child_death (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_LocatorExceptionHolder::raise_child_death_pid (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_LocatorExceptionHolder::raise_spawn_pid (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::AMH_LocatorResponseHandler.

ImplementationRepository::AMH_LocatorResponseHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMH_LocatorResponseHandler>::duplicate (
    ImplementationRepository::AMH_LocatorResponseHandler_ptr p)
{
  return ImplementationRepository::AMH_LocatorResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::AMH_LocatorResponseHandler>::release (
    ImplementationRepository::AMH_LocatorResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::AMH_LocatorResponseHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMH_LocatorResponseHandler>::nil (void)
{
  return ImplementationRepository::AMH_LocatorResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::AMH_LocatorResponseHandler>::marshal (
    const ImplementationRepository::AMH_LocatorResponseHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




ImplementationRepository::AMH_LocatorResponseHandler::AMH_LocatorResponseHandler (void)
{}

ImplementationRepository::AMH_LocatorResponseHandler::~AMH_LocatorResponseHandler (void)
{
}

void
ImplementationRepository::AMH_LocatorResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_LocatorResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_LocatorResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::AMH_LocatorResponseHandler_ptr
ImplementationRepository::AMH_LocatorResponseHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_LocatorResponseHandler::_duplicate (
      dynamic_cast<AMH_LocatorResponseHandler_ptr> (_tao_objref));
}

ImplementationRepository::AMH_LocatorResponseHandler_ptr
ImplementationRepository::AMH_LocatorResponseHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_LocatorResponseHandler::_duplicate (
      dynamic_cast<AMH_LocatorResponseHandler_ptr> (_tao_objref));
}

ImplementationRepository::AMH_LocatorResponseHandler_ptr
ImplementationRepository::AMH_LocatorResponseHandler::_nil (void)
{
  return 0;
}

ImplementationRepository::AMH_LocatorResponseHandler_ptr
ImplementationRepository::AMH_LocatorResponseHandler::_duplicate (AMH_LocatorResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::AMH_LocatorResponseHandler::_tao_release (AMH_LocatorResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::AMH_LocatorResponseHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AMH_LocatorResponseHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* ImplementationRepository::AMH_LocatorResponseHandler::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/AMH_LocatorResponseHandler:1.0";
}

::CORBA::Boolean
ImplementationRepository::AMH_LocatorResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMH_LocatorResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:ImplementationRepository/AMH_LocatorResponseHandler:1.0",
    "AMH_LocatorResponseHandler");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMH_LocatorResponseHandler =
    &_tao_tc_ImplementationRepository_AMH_LocatorResponseHandler;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\enum_typecode.cpp:29
static char const * const _tao_enumerators_ImplementationRepository_UpdateType[] =
  {
    "repo_update",
    "repo_remove",
    "access"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_UpdateType (
    "IDL:ImplementationRepository/UpdateType:1.0",
    "UpdateType",
    _tao_enumerators_ImplementationRepository_UpdateType,
    3);
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_UpdateType =
    &_tao_tc_ImplementationRepository_UpdateType;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\enum_typecode.cpp:29
static char const * const _tao_enumerators_ImplementationRepository_EntityType[] =
  {
    "repo_activator",
    "repo_server"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_EntityType (
    "IDL:ImplementationRepository/EntityType:1.0",
    "EntityType",
    _tao_enumerators_ImplementationRepository_EntityType,
    2);
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_EntityType =
    &_tao_tc_ImplementationRepository_EntityType;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_ImplementationRepository_RepoIdent[] =
      {
        { "repo_id", &CORBA::_tc_long },
        { "repo_type", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_ImplementationRepository_RepoIdent (
  ::CORBA::tk_struct,
  "IDL:ImplementationRepository/RepoIdent:1.0",
  "RepoIdent",
  _tao_fields_ImplementationRepository_RepoIdent,
  2);


namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_RepoIdent =
    &_tao_tc_ImplementationRepository_RepoIdent;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:56

void
ImplementationRepository::RepoIdent::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RepoIdent *_tao_tmp_pointer =
    static_cast<RepoIdent *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\enum_typecode.cpp:29
static char const * const _tao_enumerators_ImplementationRepository_AAM_Status[] =
  {
    "AAM_INIT",
    "AAM_SERVER_STARTED_RUNNING",
    "AAM_ACTIVATION_SENT",
    "AAM_WAIT_FOR_RUNNING",
    "AAM_WAIT_FOR_PING",
    "AAM_WAIT_FOR_ALIVE",
    "AAM_WAIT_FOR_DEATH",
    "AAM_SERVER_READY",
    "AAM_SERVER_DEAD",
    "AAM_NOT_MANUAL",
    "AAM_NO_ACTIVATOR",
    "AAM_NO_COMMANDLINE",
    "AAM_RETRIES_EXCEEDED",
    "AAM_UPDATE_FAILED",
    "AAM_ACTIVE_TERMINATE"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AAM_Status (
    "IDL:ImplementationRepository/AAM_Status:1.0",
    "AAM_Status",
    _tao_enumerators_ImplementationRepository_AAM_Status,
    15);
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AAM_Status =
    &_tao_tc_ImplementationRepository_AAM_Status;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_ImplementationRepository_RepoInfo[] =
      {
        { "kind", &ImplementationRepository::_tc_EntityType },
        { "repo", &ImplementationRepository::_tc_RepoIdent }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_ImplementationRepository_RepoInfo (
  ::CORBA::tk_struct,
  "IDL:ImplementationRepository/RepoInfo:1.0",
  "RepoInfo",
  _tao_fields_ImplementationRepository_RepoInfo,
  2);


namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_RepoInfo =
    &_tao_tc_ImplementationRepository_RepoInfo;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:56

void
ImplementationRepository::RepoInfo::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RepoInfo *_tao_tmp_pointer =
    static_cast<RepoInfo *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union\union_cs.cpp:76

ImplementationRepository::UpdateAction::UpdateAction (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (ImplementationRepository::UpdateType) -1;
}

ImplementationRepository::UpdateAction::UpdateAction (const ::ImplementationRepository::UpdateAction &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case ImplementationRepository::repo_update:
    {
      this->u_.info_ = u.u_.info_;
    }
    break;
    case ImplementationRepository::repo_remove:
    {
      this->u_.kind_ = 
        u.u_.kind_;
    }
    break;
    case ImplementationRepository::access:
    {
      this->u_.state_ = 
        u.u_.state_;
    }
    break;
    default:
    break;
  }
}

ImplementationRepository::UpdateAction::~UpdateAction (void)
{
  // Finalize.
  this->_reset ();
}

void ImplementationRepository::UpdateAction::_tao_any_destructor (void *_tao_void_pointer)
{
  UpdateAction *tmp =
    static_cast<UpdateAction *> (_tao_void_pointer);
  delete tmp;
}

ImplementationRepository::UpdateAction &
ImplementationRepository::UpdateAction::operator= (const ::ImplementationRepository::UpdateAction &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case ImplementationRepository::repo_update:
    {
      this->u_.info_ = u.u_.info_;
    }
    break;
    case ImplementationRepository::repo_remove:
    {
      this->u_.kind_ = 
        u.u_.kind_;
    }
    break;
    case ImplementationRepository::access:
    {
      this->u_.state_ = 
        u.u_.state_;
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void ImplementationRepository::UpdateAction::_reset (void)
{
  switch (this->disc_)
  {
    
    case ImplementationRepository::repo_update:
      
    break;
    
    case ImplementationRepository::repo_remove:
      
    break;
    
    case ImplementationRepository::access:
      
    break;
    
    default:
    break;
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\union_typecode.cpp:65

static TAO::TypeCode::Case_T<ImplementationRepository::UpdateType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_ImplementationRepository_UpdateAction__0 (ImplementationRepository::repo_update, "info", &ImplementationRepository::_tc_RepoInfo);
static TAO::TypeCode::Case_T<ImplementationRepository::UpdateType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_ImplementationRepository_UpdateAction__1 (ImplementationRepository::repo_remove, "kind", &ImplementationRepository::_tc_EntityType);
static TAO::TypeCode::Case_T<ImplementationRepository::UpdateType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_ImplementationRepository_UpdateAction__2 (ImplementationRepository::access, "state", &ImplementationRepository::_tc_AAM_Status);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_ImplementationRepository_UpdateAction[] =
  {
    &_tao_cases_ImplementationRepository_UpdateAction__0,
    &_tao_cases_ImplementationRepository_UpdateAction__1,
    &_tao_cases_ImplementationRepository_UpdateAction__2
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_UpdateAction (
    "IDL:ImplementationRepository/UpdateAction:1.0",
    "UpdateAction",
    &ImplementationRepository::_tc_UpdateType,
    _tao_cases_ImplementationRepository_UpdateAction,
    sizeof (_tao_cases_ImplementationRepository_UpdateAction)/sizeof (_tao_cases_ImplementationRepository_UpdateAction[0]),
    -1);
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_UpdateAction =
    &_tao_tc_ImplementationRepository_UpdateAction;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_ImplementationRepository_UpdateInfo[] =
      {
        { "name", &CORBA::_tc_string },
        { "action", &ImplementationRepository::_tc_UpdateAction }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_ImplementationRepository_UpdateInfo (
  ::CORBA::tk_struct,
  "IDL:ImplementationRepository/UpdateInfo:1.0",
  "UpdateInfo",
  _tao_fields_ImplementationRepository_UpdateInfo,
  2);


namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_UpdateInfo =
    &_tao_tc_ImplementationRepository_UpdateInfo;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:56

void
ImplementationRepository::UpdateInfo::_tao_any_destructor (
    void *_tao_void_pointer)
{
  UpdateInfo *_tao_tmp_pointer =
    static_cast<UpdateInfo *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:105

#if !defined (_IMPLEMENTATIONREPOSITORY_UPDATEINFOSEQ_CS_)
#define _IMPLEMENTATIONREPOSITORY_UPDATEINFOSEQ_CS_

ImplementationRepository::UpdateInfoSeq::UpdateInfoSeq (void)
{}

ImplementationRepository::UpdateInfoSeq::UpdateInfoSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence< UpdateInfo> (max)
{}

ImplementationRepository::UpdateInfoSeq::UpdateInfoSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ImplementationRepository::UpdateInfo * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_value_sequence< UpdateInfo>
    (max, length, buffer, release)
{}

ImplementationRepository::UpdateInfoSeq::UpdateInfoSeq (
    const UpdateInfoSeq &seq)
  : ::TAO::unbounded_value_sequence< UpdateInfo> (seq)
{}

ImplementationRepository::UpdateInfoSeq::~UpdateInfoSeq (void)
{}

void ImplementationRepository::UpdateInfoSeq::_tao_any_destructor (
    void * _tao_void_pointer)
{
  UpdateInfoSeq * _tao_tmp_pointer =
    static_cast<UpdateInfoSeq *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_ImplementationRepository_UpdateInfoSeq_GUARD
#define _TAO_TYPECODE_ImplementationRepository_UpdateInfoSeq_GUARD


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ImplementationRepository_UpdateInfoSeq_0 (
          ::CORBA::tk_sequence,
          &ImplementationRepository::_tc_UpdateInfo,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_ImplementationRepository_UpdateInfoSeq_0 =
        &ImplementationRepository_UpdateInfoSeq_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_TYPECODE_ImplementationRepository_UpdateInfoSeq_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_UpdateInfoSeq (
    ::CORBA::tk_alias,
    "IDL:ImplementationRepository/UpdateInfoSeq:1.0",
    "UpdateInfoSeq",
    &TAO::TypeCode::tc_ImplementationRepository_UpdateInfoSeq_0);
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_UpdateInfoSeq =
    &_tao_tc_ImplementationRepository_UpdateInfoSeq;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_ctor.cpp:51

ImplementationRepository::InvalidPeer::InvalidPeer (
    const char * _tao_reason)
  : ::CORBA::UserException (
        "IDL:ImplementationRepository/InvalidPeer:1.0",
        "InvalidPeer")
{
  this->reason = ::CORBA::string_dup (_tao_reason);
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_cs.cpp:98

ImplementationRepository::InvalidPeer::InvalidPeer (void)
  : ::CORBA::UserException (
        "IDL:ImplementationRepository/InvalidPeer:1.0",
        "InvalidPeer")
{
}

ImplementationRepository::InvalidPeer::~InvalidPeer (void)
{
}

ImplementationRepository::InvalidPeer::InvalidPeer (const ::ImplementationRepository::InvalidPeer &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ())
{
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
}

ImplementationRepository::InvalidPeer&
ImplementationRepository::InvalidPeer::operator= (const ::ImplementationRepository::InvalidPeer &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->reason = ::CORBA::string_dup (_tao_excp.reason.in ());
  return *this;
}

void ImplementationRepository::InvalidPeer::_tao_any_destructor (void *_tao_void_pointer)
{
  InvalidPeer *_tao_tmp_pointer =
    static_cast<InvalidPeer *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

ImplementationRepository::InvalidPeer *
ImplementationRepository::InvalidPeer::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<InvalidPeer *> (_tao_excp);
}

const ImplementationRepository::InvalidPeer *
ImplementationRepository::InvalidPeer::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const InvalidPeer *> (_tao_excp);
}

::CORBA::Exception *ImplementationRepository::InvalidPeer::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::ImplementationRepository::InvalidPeer, 0);
  return retval;
}

::CORBA::Exception *
ImplementationRepository::InvalidPeer::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::ImplementationRepository::InvalidPeer (*this),
      0);
  return result;
}

void ImplementationRepository::InvalidPeer::_raise (void) const
{
  throw *this;
}

void ImplementationRepository::InvalidPeer::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void ImplementationRepository::InvalidPeer::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr ImplementationRepository::InvalidPeer::_tao_type (void) const
{
  return ::ImplementationRepository::_tc_InvalidPeer;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:86

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_ImplementationRepository_InvalidPeer[] =
      {
        { "reason", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_ImplementationRepository_InvalidPeer (
  ::CORBA::tk_except,
  "IDL:ImplementationRepository/InvalidPeer:1.0",
  "InvalidPeer",
  _tao_fields_ImplementationRepository_InvalidPeer,
  1);


namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_InvalidPeer =
    &_tao_tc_ImplementationRepository_InvalidPeer;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::UpdatePushNotification.

ImplementationRepository::UpdatePushNotification_ptr
TAO::Objref_Traits<ImplementationRepository::UpdatePushNotification>::duplicate (
    ImplementationRepository::UpdatePushNotification_ptr p)
{
  return ImplementationRepository::UpdatePushNotification::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::UpdatePushNotification>::release (
    ImplementationRepository::UpdatePushNotification_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::UpdatePushNotification_ptr
TAO::Objref_Traits<ImplementationRepository::UpdatePushNotification>::nil (void)
{
  return ImplementationRepository::UpdatePushNotification::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::UpdatePushNotification>::marshal (
    const ImplementationRepository::UpdatePushNotification_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::UpdatePushNotification::notify_update (
  ::CORBA::ULongLong seq_num,
  const ::ImplementationRepository::UpdateInfoSeq & info)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_seq_num (seq_num);
  TAO::Arg_Traits< ::ImplementationRepository::UpdateInfoSeq>::in_arg_val _tao_info (info);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_seq_num,
      &_tao_info
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "notify_update",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::UpdatePushNotification::register_replica (
  ::ImplementationRepository::UpdatePushNotification_ptr peer,
  char *& ft_imr_ior,
  ::CORBA::ULongLong_out seq_num)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ImplementationRepository::UpdatePushNotification>::in_arg_val _tao_peer (peer);
  TAO::Arg_Traits< char *>::inout_arg_val _tao_ft_imr_ior (ft_imr_ior);
  TAO::Arg_Traits< ::CORBA::ULongLong>::out_arg_val _tao_seq_num (seq_num);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_peer,
      &_tao_ft_imr_ior,
      &_tao_seq_num
    };

  static TAO::Exception_Data
  _tao_ImplementationRepository_UpdatePushNotification_register_replica_exceptiondata [] = 
    {
      {
        "IDL:ImplementationRepository/InvalidPeer:1.0",
        ImplementationRepository::InvalidPeer::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ImplementationRepository::_tc_InvalidPeer
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "register_replica",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_ImplementationRepository_UpdatePushNotification_register_replica_exceptiondata,
      1
    );
}

ImplementationRepository::UpdatePushNotification::UpdatePushNotification (void)
{
}

ImplementationRepository::UpdatePushNotification::~UpdatePushNotification (void)
{
}

void
ImplementationRepository::UpdatePushNotification::_tao_any_destructor (void *_tao_void_pointer)
{
  UpdatePushNotification *_tao_tmp_pointer =
    static_cast<UpdatePushNotification *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::UpdatePushNotification_ptr
ImplementationRepository::UpdatePushNotification::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<UpdatePushNotification>::narrow (
        _tao_objref,
        "IDL:ImplementationRepository/UpdatePushNotification:1.0");
}

ImplementationRepository::UpdatePushNotification_ptr
ImplementationRepository::UpdatePushNotification::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<UpdatePushNotification>::unchecked_narrow (
        _tao_objref);
}

ImplementationRepository::UpdatePushNotification_ptr
ImplementationRepository::UpdatePushNotification::_nil (void)
{
  return 0;
}

ImplementationRepository::UpdatePushNotification_ptr
ImplementationRepository::UpdatePushNotification::_duplicate (UpdatePushNotification_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::UpdatePushNotification::_tao_release (UpdatePushNotification_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::UpdatePushNotification::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/UpdatePushNotification:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ImplementationRepository::UpdatePushNotification::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/UpdatePushNotification:1.0";
}

::CORBA::Boolean
ImplementationRepository::UpdatePushNotification::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_UpdatePushNotification (
    ::CORBA::tk_objref,
    "IDL:ImplementationRepository/UpdatePushNotification:1.0",
    "UpdatePushNotification");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_UpdatePushNotification =
    &_tao_tc_ImplementationRepository_UpdatePushNotification;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_ImplementationRepository_AMH_UpdatePushNotificationExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMH_UpdatePushNotificationExceptionHolder (
    ::CORBA::tk_value,
    "IDL:ImplementationRepository/AMH_UpdatePushNotificationExceptionHolder:1.0",
    "AMH_UpdatePushNotificationExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_ImplementationRepository_AMH_UpdatePushNotificationExceptionHolder,
    0);
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMH_UpdatePushNotificationExceptionHolder =
    &_tao_tc_ImplementationRepository_AMH_UpdatePushNotificationExceptionHolder;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:53

void
TAO::Value_Traits<ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder>::add_ref (
    ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder>::remove_ref (
    ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder>::release (
    ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder *
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder * > (v);
}

const char *
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_UpdatePushNotificationExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_UpdatePushNotificationExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_type (void) const
{
  return ::ImplementationRepository::_tc_AMH_UpdatePushNotificationExceptionHolder;
}

ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::~AMH_UpdatePushNotificationExceptionHolder (void)
{}

::CORBA::ValueBase *
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_UpdatePushNotificationExceptionHolder (),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_match_formal_type (ptrdiff_t ) const
{
  return false;
}

::CORBA::Boolean
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_marshal__ImplementationRepository_AMH_UpdatePushNotificationExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_unmarshal__ImplementationRepository_AMH_UpdatePushNotificationExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_UpdatePushNotificationExceptionHolder *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_UpdatePushNotificationExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_UpdatePushNotificationExceptionHolder::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::raise_notify_update (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::raise_register_replica (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::AMH_UpdatePushNotificationResponseHandler.

ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMH_UpdatePushNotificationResponseHandler>::duplicate (
    ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr p)
{
  return ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::AMH_UpdatePushNotificationResponseHandler>::release (
    ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMH_UpdatePushNotificationResponseHandler>::nil (void)
{
  return ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::AMH_UpdatePushNotificationResponseHandler>::marshal (
    const ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::AMH_UpdatePushNotificationResponseHandler (void)
{}

ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::~AMH_UpdatePushNotificationResponseHandler (void)
{
}

void
ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_UpdatePushNotificationResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_UpdatePushNotificationResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr
ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_UpdatePushNotificationResponseHandler::_duplicate (
      dynamic_cast<AMH_UpdatePushNotificationResponseHandler_ptr> (_tao_objref));
}

ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr
ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_UpdatePushNotificationResponseHandler::_duplicate (
      dynamic_cast<AMH_UpdatePushNotificationResponseHandler_ptr> (_tao_objref));
}

ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr
ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_nil (void)
{
  return 0;
}

ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr
ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_duplicate (AMH_UpdatePushNotificationResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_tao_release (AMH_UpdatePushNotificationResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AMH_UpdatePushNotificationResponseHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/AMH_UpdatePushNotificationResponseHandler:1.0";
}

::CORBA::Boolean
ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMH_UpdatePushNotificationResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:ImplementationRepository/AMH_UpdatePushNotificationResponseHandler:1.0",
    "AMH_UpdatePushNotificationResponseHandler");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMH_UpdatePushNotificationResponseHandler =
    &_tao_tc_ImplementationRepository_AMH_UpdatePushNotificationResponseHandler;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_obv_cs.cpp:44

OBV_ImplementationRepository::AMH_LocatorExceptionHolder::AMH_LocatorExceptionHolder (void)
: require_truncation_ (false)
{}

OBV_ImplementationRepository::AMH_LocatorExceptionHolder::~AMH_LocatorExceptionHolder (void)
{}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_LocatorExceptionHolder::_tao_marshal__ImplementationRepository_AMH_LocatorExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_LocatorExceptionHolder::_tao_unmarshal__ImplementationRepository_AMH_LocatorExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_obv_cs.cpp:44

OBV_ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::AMH_UpdatePushNotificationExceptionHolder (void)
: require_truncation_ (false)
{}

OBV_ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::~AMH_UpdatePushNotificationExceptionHolder (void)
{}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_marshal__ImplementationRepository_AMH_UpdatePushNotificationExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_unmarshal__ImplementationRepository_AMH_UpdatePushNotificationExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::Locator>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Locator_ptr _tao_elem)
  {
    Locator_ptr _tao_objptr =
      Locator::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Locator_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Locator>::insert (
        _tao_any,
        Locator::_tao_any_destructor,
        _tc_Locator,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Locator_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Locator>::extract (
          _tao_any,
          Locator::_tao_any_destructor,
          _tc_Locator,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::Locator_ptr _tao_elem)
{
  ImplementationRepository::Locator_ptr _tao_objptr =
    ImplementationRepository::Locator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::Locator_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::Locator>::insert (
      _tao_any,
      ImplementationRepository::Locator::_tao_any_destructor,
      ImplementationRepository::_tc_Locator,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::Locator_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::Locator>::extract (
        _tao_any,
        ImplementationRepository::Locator::_tao_any_destructor,
        ImplementationRepository::_tc_Locator,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_LocatorExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_LocatorExceptionHolder *_tao_elem)
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      AMH_LocatorExceptionHolder *_tao_copy =
        _tao_elem ?
          AMH_LocatorExceptionHolder::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_LocatorExceptionHolder **_tao_elem)
  {
    TAO::Any_Impl_T<AMH_LocatorExceptionHolder>::insert (
        _tao_any,
        AMH_LocatorExceptionHolder::_tao_any_destructor,
        _tc_AMH_LocatorExceptionHolder,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_LocatorExceptionHolder *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<AMH_LocatorExceptionHolder>::extract (
          _tao_any,
          AMH_LocatorExceptionHolder::_tao_any_destructor,
          _tc_AMH_LocatorExceptionHolder,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_LocatorExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    ImplementationRepository::AMH_LocatorExceptionHolder *_tao_copy =
      _tao_elem ?
        ImplementationRepository::AMH_LocatorExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_LocatorExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMH_LocatorExceptionHolder>::insert (
      _tao_any,
      ImplementationRepository::AMH_LocatorExceptionHolder::_tao_any_destructor,
      ImplementationRepository::_tc_AMH_LocatorExceptionHolder,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_LocatorExceptionHolder *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMH_LocatorExceptionHolder>::extract (
        _tao_any,
        ImplementationRepository::AMH_LocatorExceptionHolder::_tao_any_destructor,
        ImplementationRepository::_tc_AMH_LocatorExceptionHolder,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_LocatorResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_LocatorResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_LocatorResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_LocatorResponseHandler_ptr _tao_elem)
  {
    AMH_LocatorResponseHandler_ptr _tao_objptr =
      AMH_LocatorResponseHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_LocatorResponseHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMH_LocatorResponseHandler>::insert (
        _tao_any,
        AMH_LocatorResponseHandler::_tao_any_destructor,
        _tc_AMH_LocatorResponseHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_LocatorResponseHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMH_LocatorResponseHandler>::extract (
          _tao_any,
          AMH_LocatorResponseHandler::_tao_any_destructor,
          _tc_AMH_LocatorResponseHandler,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_LocatorResponseHandler_ptr _tao_elem)
{
  ImplementationRepository::AMH_LocatorResponseHandler_ptr _tao_objptr =
    ImplementationRepository::AMH_LocatorResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_LocatorResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMH_LocatorResponseHandler>::insert (
      _tao_any,
      ImplementationRepository::AMH_LocatorResponseHandler::_tao_any_destructor,
      ImplementationRepository::_tc_AMH_LocatorResponseHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_LocatorResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMH_LocatorResponseHandler>::extract (
        _tao_any,
        ImplementationRepository::AMH_LocatorResponseHandler::_tao_any_destructor,
        ImplementationRepository::_tc_AMH_LocatorResponseHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\any_op_cs.cpp:35


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::ImplementationRepository::UpdateType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::ImplementationRepository::UpdateType>::insert (
        _tao_any,
        ::ImplementationRepository::_tc_UpdateType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::ImplementationRepository::UpdateType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::ImplementationRepository::UpdateType>::extract (
          _tao_any,
          ::ImplementationRepository::_tc_UpdateType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::UpdateType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<ImplementationRepository::UpdateType>::insert (
      _tao_any,
      ImplementationRepository::_tc_UpdateType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::UpdateType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<ImplementationRepository::UpdateType>::extract (
        _tao_any,
        ImplementationRepository::_tc_UpdateType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\any_op_cs.cpp:35


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::ImplementationRepository::EntityType _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::ImplementationRepository::EntityType>::insert (
        _tao_any,
        ::ImplementationRepository::_tc_EntityType,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::ImplementationRepository::EntityType &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::ImplementationRepository::EntityType>::extract (
          _tao_any,
          ::ImplementationRepository::_tc_EntityType,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::EntityType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<ImplementationRepository::EntityType>::insert (
      _tao_any,
      ImplementationRepository::_tc_EntityType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::EntityType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<ImplementationRepository::EntityType>::extract (
        _tao_any,
        ImplementationRepository::_tc_EntityType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::ImplementationRepository::RepoIdent &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::RepoIdent>::insert_copy (
        _tao_any,
        ::ImplementationRepository::RepoIdent::_tao_any_destructor,
        ::ImplementationRepository::_tc_RepoIdent,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    ImplementationRepository::RepoIdent *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ImplementationRepository::RepoIdent>::insert (
      _tao_any,
      ::ImplementationRepository::RepoIdent::_tao_any_destructor,
      ::ImplementationRepository::_tc_RepoIdent,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::ImplementationRepository::RepoIdent *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::RepoIdent>::extract (
        _tao_any,
        ::ImplementationRepository::RepoIdent::_tao_any_destructor,
        ::ImplementationRepository::_tc_RepoIdent,
        _tao_elem);
}
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ImplementationRepository::RepoIdent &_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::RepoIdent>::insert_copy (
    _tao_any,
    ImplementationRepository::RepoIdent::_tao_any_destructor,
    ImplementationRepository::_tc_RepoIdent,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ImplementationRepository::RepoIdent *_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::RepoIdent>::insert (
    _tao_any,
    ImplementationRepository::RepoIdent::_tao_any_destructor,
    ImplementationRepository::_tc_RepoIdent,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ImplementationRepository::RepoIdent *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<ImplementationRepository::RepoIdent>::extract (
      _tao_any,
      ImplementationRepository::RepoIdent::_tao_any_destructor,
      ImplementationRepository::_tc_RepoIdent,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\any_op_cs.cpp:35


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::ImplementationRepository::AAM_Status _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::ImplementationRepository::AAM_Status>::insert (
        _tao_any,
        ::ImplementationRepository::_tc_AAM_Status,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::ImplementationRepository::AAM_Status &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::ImplementationRepository::AAM_Status>::extract (
          _tao_any,
          ::ImplementationRepository::_tc_AAM_Status,
          _tao_elem 
        );
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AAM_Status _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<ImplementationRepository::AAM_Status>::insert (
      _tao_any,
      ImplementationRepository::_tc_AAM_Status,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AAM_Status &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<ImplementationRepository::AAM_Status>::extract (
        _tao_any,
        ImplementationRepository::_tc_AAM_Status,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::ImplementationRepository::RepoInfo &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::RepoInfo>::insert_copy (
        _tao_any,
        ::ImplementationRepository::RepoInfo::_tao_any_destructor,
        ::ImplementationRepository::_tc_RepoInfo,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    ImplementationRepository::RepoInfo *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ImplementationRepository::RepoInfo>::insert (
      _tao_any,
      ::ImplementationRepository::RepoInfo::_tao_any_destructor,
      ::ImplementationRepository::_tc_RepoInfo,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::ImplementationRepository::RepoInfo *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::RepoInfo>::extract (
        _tao_any,
        ::ImplementationRepository::RepoInfo::_tao_any_destructor,
        ::ImplementationRepository::_tc_RepoInfo,
        _tao_elem);
}
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ImplementationRepository::RepoInfo &_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::RepoInfo>::insert_copy (
    _tao_any,
    ImplementationRepository::RepoInfo::_tao_any_destructor,
    ImplementationRepository::_tc_RepoInfo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ImplementationRepository::RepoInfo *_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::RepoInfo>::insert (
    _tao_any,
    ImplementationRepository::RepoInfo::_tao_any_destructor,
    ImplementationRepository::_tc_RepoInfo,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ImplementationRepository::RepoInfo *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<ImplementationRepository::RepoInfo>::extract (
      _tao_any,
      ImplementationRepository::RepoInfo::_tao_any_destructor,
      ImplementationRepository::_tc_RepoInfo,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union\any_op_cs.cpp:37



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::ImplementationRepository::UpdateAction &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::UpdateAction>::insert_copy (
        _tao_any,
        ::ImplementationRepository::UpdateAction::_tao_any_destructor,
        ::ImplementationRepository::_tc_UpdateAction,
        _tao_elem
      );
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ::ImplementationRepository::UpdateAction *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ImplementationRepository::UpdateAction>::insert (
      _tao_any,
      ::ImplementationRepository::UpdateAction::_tao_any_destructor,
      ::ImplementationRepository::_tc_UpdateAction,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::ImplementationRepository::UpdateAction *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::UpdateAction>::extract (
        _tao_any,
        ::ImplementationRepository::UpdateAction::_tao_any_destructor,
        ::ImplementationRepository::_tc_UpdateAction,
        _tao_elem);
}
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const ImplementationRepository::UpdateAction &_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::UpdateAction>::insert_copy (
      _tao_any,
      ImplementationRepository::UpdateAction::_tao_any_destructor,
      ImplementationRepository::_tc_UpdateAction,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::UpdateAction *_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::UpdateAction>::insert (
      _tao_any,
      ImplementationRepository::UpdateAction::_tao_any_destructor,
      ImplementationRepository::_tc_UpdateAction,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ImplementationRepository::UpdateAction *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<ImplementationRepository::UpdateAction>::extract (
        _tao_any,
        ImplementationRepository::UpdateAction::_tao_any_destructor,
        ImplementationRepository::_tc_UpdateAction,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::ImplementationRepository::UpdateInfo &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::UpdateInfo>::insert_copy (
        _tao_any,
        ::ImplementationRepository::UpdateInfo::_tao_any_destructor,
        ::ImplementationRepository::_tc_UpdateInfo,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    ImplementationRepository::UpdateInfo *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::ImplementationRepository::UpdateInfo>::insert (
      _tao_any,
      ::ImplementationRepository::UpdateInfo::_tao_any_destructor,
      ::ImplementationRepository::_tc_UpdateInfo,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::ImplementationRepository::UpdateInfo *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::UpdateInfo>::extract (
        _tao_any,
        ::ImplementationRepository::UpdateInfo::_tao_any_destructor,
        ::ImplementationRepository::_tc_UpdateInfo,
        _tao_elem);
}
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const ImplementationRepository::UpdateInfo &_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::UpdateInfo>::insert_copy (
    _tao_any,
    ImplementationRepository::UpdateInfo::_tao_any_destructor,
    ImplementationRepository::_tc_UpdateInfo,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  ImplementationRepository::UpdateInfo *_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::UpdateInfo>::insert (
    _tao_any,
    ImplementationRepository::UpdateInfo::_tao_any_destructor,
    ImplementationRepository::_tc_UpdateInfo,
    _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const ImplementationRepository::UpdateInfo *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<ImplementationRepository::UpdateInfo>::extract (
      _tao_any,
      ImplementationRepository::UpdateInfo::_tao_any_destructor,
      ImplementationRepository::_tc_UpdateInfo,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_cs.cpp:45



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::ImplementationRepository::UpdateInfoSeq &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::UpdateInfoSeq>::insert_copy (
        _tao_any,
        ::ImplementationRepository::UpdateInfoSeq::_tao_any_destructor,
        ::ImplementationRepository::_tc_UpdateInfoSeq,
        _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::ImplementationRepository::UpdateInfoSeq *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::UpdateInfoSeq>::insert (
        _tao_any,
        ::ImplementationRepository::UpdateInfoSeq::_tao_any_destructor,
        ::ImplementationRepository::_tc_UpdateInfoSeq,
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::ImplementationRepository::UpdateInfoSeq *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::ImplementationRepository::UpdateInfoSeq>::extract (
          _tao_any,
          ::ImplementationRepository::UpdateInfoSeq::_tao_any_destructor,
          ::ImplementationRepository::_tc_UpdateInfoSeq,
          _tao_elem);
  }
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


/// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const ImplementationRepository::UpdateInfoSeq &_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::UpdateInfoSeq>::insert_copy (
      _tao_any,
      ImplementationRepository::UpdateInfoSeq::_tao_any_destructor,
      ImplementationRepository::_tc_UpdateInfoSeq,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::UpdateInfoSeq *_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::UpdateInfoSeq>::insert (
      _tao_any,
      ImplementationRepository::UpdateInfoSeq::_tao_any_destructor,
      ImplementationRepository::_tc_UpdateInfoSeq,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ImplementationRepository::UpdateInfoSeq *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<ImplementationRepository::UpdateInfoSeq>::extract (
        _tao_any,
        ImplementationRepository::UpdateInfoSeq::_tao_any_destructor,
        ImplementationRepository::_tc_UpdateInfoSeq,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<ImplementationRepository::InvalidPeer>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::ImplementationRepository::InvalidPeer &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::InvalidPeer>::insert_copy (
        _tao_any,
        ::ImplementationRepository::InvalidPeer::_tao_any_destructor,
        ::ImplementationRepository::_tc_InvalidPeer,
        _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::ImplementationRepository::InvalidPeer *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::ImplementationRepository::InvalidPeer>::insert (
        _tao_any,
        ::ImplementationRepository::InvalidPeer::_tao_any_destructor,
        ::ImplementationRepository::_tc_InvalidPeer,
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::ImplementationRepository::InvalidPeer *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::ImplementationRepository::InvalidPeer>::extract (
          _tao_any,
          ::ImplementationRepository::InvalidPeer::_tao_any_destructor,
          ::ImplementationRepository::_tc_InvalidPeer,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const ImplementationRepository::InvalidPeer &_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::InvalidPeer>::insert_copy (
      _tao_any,
      ImplementationRepository::InvalidPeer::_tao_any_destructor,
      ImplementationRepository::_tc_InvalidPeer,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::InvalidPeer *_tao_elem)
{
  TAO::Any_Dual_Impl_T<ImplementationRepository::InvalidPeer>::insert (
      _tao_any,
      ImplementationRepository::InvalidPeer::_tao_any_destructor,
      ImplementationRepository::_tc_InvalidPeer,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ImplementationRepository::InvalidPeer *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<ImplementationRepository::InvalidPeer>::extract (
        _tao_any,
        ImplementationRepository::InvalidPeer::_tao_any_destructor,
        ImplementationRepository::_tc_InvalidPeer,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::UpdatePushNotification>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UpdatePushNotification_ptr _tao_elem)
  {
    UpdatePushNotification_ptr _tao_objptr =
      UpdatePushNotification::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      UpdatePushNotification_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<UpdatePushNotification>::insert (
        _tao_any,
        UpdatePushNotification::_tao_any_destructor,
        _tc_UpdatePushNotification,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      UpdatePushNotification_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<UpdatePushNotification>::extract (
          _tao_any,
          UpdatePushNotification::_tao_any_destructor,
          _tc_UpdatePushNotification,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::UpdatePushNotification_ptr _tao_elem)
{
  ImplementationRepository::UpdatePushNotification_ptr _tao_objptr =
    ImplementationRepository::UpdatePushNotification::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::UpdatePushNotification_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::UpdatePushNotification>::insert (
      _tao_any,
      ImplementationRepository::UpdatePushNotification::_tao_any_destructor,
      ImplementationRepository::_tc_UpdatePushNotification,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::UpdatePushNotification_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::UpdatePushNotification>::extract (
        _tao_any,
        ImplementationRepository::UpdatePushNotification::_tao_any_destructor,
        ImplementationRepository::_tc_UpdatePushNotification,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_UpdatePushNotificationExceptionHolder *_tao_elem)
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      AMH_UpdatePushNotificationExceptionHolder *_tao_copy =
        _tao_elem ?
          AMH_UpdatePushNotificationExceptionHolder::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_UpdatePushNotificationExceptionHolder **_tao_elem)
  {
    TAO::Any_Impl_T<AMH_UpdatePushNotificationExceptionHolder>::insert (
        _tao_any,
        AMH_UpdatePushNotificationExceptionHolder::_tao_any_destructor,
        _tc_AMH_UpdatePushNotificationExceptionHolder,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_UpdatePushNotificationExceptionHolder *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<AMH_UpdatePushNotificationExceptionHolder>::extract (
          _tao_any,
          AMH_UpdatePushNotificationExceptionHolder::_tao_any_destructor,
          _tc_AMH_UpdatePushNotificationExceptionHolder,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder *_tao_copy =
      _tao_elem ?
        ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder>::insert (
      _tao_any,
      ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_any_destructor,
      ImplementationRepository::_tc_AMH_UpdatePushNotificationExceptionHolder,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder>::extract (
        _tao_any,
        ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_any_destructor,
        ImplementationRepository::_tc_AMH_UpdatePushNotificationExceptionHolder,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_UpdatePushNotificationResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_UpdatePushNotificationResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_UpdatePushNotificationResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_UpdatePushNotificationResponseHandler_ptr _tao_elem)
  {
    AMH_UpdatePushNotificationResponseHandler_ptr _tao_objptr =
      AMH_UpdatePushNotificationResponseHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_UpdatePushNotificationResponseHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMH_UpdatePushNotificationResponseHandler>::insert (
        _tao_any,
        AMH_UpdatePushNotificationResponseHandler::_tao_any_destructor,
        _tc_AMH_UpdatePushNotificationResponseHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_UpdatePushNotificationResponseHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMH_UpdatePushNotificationResponseHandler>::extract (
          _tao_any,
          AMH_UpdatePushNotificationResponseHandler::_tao_any_destructor,
          _tc_AMH_UpdatePushNotificationResponseHandler,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr _tao_elem)
{
  ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr _tao_objptr =
    ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMH_UpdatePushNotificationResponseHandler>::insert (
      _tao_any,
      ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_tao_any_destructor,
      ImplementationRepository::_tc_AMH_UpdatePushNotificationResponseHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_UpdatePushNotificationResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMH_UpdatePushNotificationResponseHandler>::extract (
        _tao_any,
        ImplementationRepository::AMH_UpdatePushNotificationResponseHandler::_tao_any_destructor,
        ImplementationRepository::_tc_AMH_UpdatePushNotificationResponseHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:51


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::Locator_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::Locator_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ImplementationRepository::Locator RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_valuetype.cpp:512

void
CORBA::add_ref (ImplementationRepository::AMH_LocatorExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (ImplementationRepository::AMH_LocatorExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\cdr_op_cs.cpp:60



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::AMH_LocatorExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&ImplementationRepository::AMH_LocatorExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::AMH_LocatorExceptionHolder *&_tao_valuetype)
{
  return ImplementationRepository::AMH_LocatorExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\marshal_cs.cpp:33

::CORBA::Boolean
OBV_ImplementationRepository::AMH_LocatorExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_LocatorExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

void
OBV_ImplementationRepository::AMH_LocatorExceptionHolder::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\cdr_op_cs.cpp:34



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ImplementationRepository::UpdateType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, ImplementationRepository::UpdateType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<ImplementationRepository::UpdateType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\cdr_op_cs.cpp:34



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ImplementationRepository::EntityType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, ImplementationRepository::EntityType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<ImplementationRepository::EntityType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:49


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::RepoIdent &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.repo_id) &&
    (strm << _tao_aggregate.repo_type);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::RepoIdent &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.repo_id) &&
    (strm >> _tao_aggregate.repo_type);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\cdr_op_cs.cpp:34



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, ImplementationRepository::AAM_Status _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, ImplementationRepository::AAM_Status & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<ImplementationRepository::AAM_Status> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:49


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::RepoInfo &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.kind) &&
    (strm << _tao_aggregate.repo);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::RepoInfo &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.kind) &&
    (strm >> _tao_aggregate.repo);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union\cdr_op_cs.cpp:74



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::UpdateAction &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case ImplementationRepository::repo_update:
      {
        result = strm << _tao_union.info ();
      }
      break;
    case ImplementationRepository::repo_remove:
      {
        result = strm << _tao_union.kind ();
      }
      break;
    case ImplementationRepository::access:
      {
        result = strm << _tao_union.state ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::UpdateAction &_tao_union
  )
{
  ImplementationRepository::UpdateType _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case ImplementationRepository::repo_update:
      {
        ImplementationRepository::RepoInfo _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.info (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ImplementationRepository::repo_remove:
      {
        ImplementationRepository::EntityType _tao_union_tmp =
          static_cast<ImplementationRepository::EntityType> (0UL);
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.kind (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case ImplementationRepository::access:
      {
        ImplementationRepository::AAM_Status _tao_union_tmp =
          static_cast<ImplementationRepository::AAM_Status> (0UL);
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.state (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:49


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::UpdateInfo &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.action);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::UpdateInfo &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.action);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_ImplementationRepository_UpdateInfoSeq_CPP_
#define _TAO_CDR_OP_ImplementationRepository_UpdateInfoSeq_CPP_


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::UpdateInfoSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::UpdateInfoSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


#endif /* _TAO_CDR_OP_ImplementationRepository_UpdateInfoSeq_CPP_ */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\cdr_op_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::InvalidPeer &_tao_aggregate)
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.reason.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::InvalidPeer &_tao_aggregate)
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.reason.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:51


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::UpdatePushNotification_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::UpdatePushNotification_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ImplementationRepository::UpdatePushNotification RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_valuetype.cpp:512

void
CORBA::add_ref (ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\cdr_op_cs.cpp:60



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder *&_tao_valuetype)
{
  return ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\marshal_cs.cpp:33

::CORBA::Boolean
OBV_ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

void
OBV_ImplementationRepository::AMH_UpdatePushNotificationExceptionHolder::truncation_hook (void)
{
  this->require_truncation_ = true;
}




TAO_END_VERSIONED_NAMESPACE_DECL


