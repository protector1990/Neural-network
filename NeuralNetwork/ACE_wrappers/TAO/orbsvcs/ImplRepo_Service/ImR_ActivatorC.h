// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:149

#ifndef _TAO_IDL_IMR_ACTIVATORC_UBPD53_H_
#define _TAO_IDL_IMR_ACTIVATORC_UBPD53_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "activator_idl_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "ImplRepoC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 5 || TAO_MICRO_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_root\root_ch.cpp:157

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

namespace ImplementationRepository
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_IMPLEMENTATIONREPOSITORY_ACTIVATOR__VAR_OUT_CH_)
#define _IMPLEMENTATIONREPOSITORY_ACTIVATOR__VAR_OUT_CH_

  class AMI_ActivatorHandler;
  typedef AMI_ActivatorHandler *AMI_ActivatorHandler_ptr;

  class Activator;
  typedef Activator *Activator_ptr;
  typedef TAO_Objref_Var_T<Activator> Activator_var;
  typedef TAO_Objref_Out_T<Activator> Activator_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class ActivatorIDL_Export Activator
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Activator>;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef Activator_ptr _ptr_type;
    typedef Activator_var _var_type;
    typedef Activator_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Activator_ptr _duplicate (Activator_ptr obj);

    static void _tao_release (Activator_ptr obj);

    static Activator_ptr _narrow (::CORBA::Object_ptr obj);
    static Activator_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Activator_ptr _nil (void);

    virtual void start_server (
      const char * name,
      const char * cmdline,
      const char * dir,
      const ::ImplementationRepository::EnvironmentList & env);

    virtual void shutdown (
      void);

    virtual void sendc_start_server (
      ::ImplementationRepository::AMI_ActivatorHandler_ptr ami_handler,
      const char * name,
      const char * cmdline,
      const char * dir,
      const ::ImplementationRepository::EnvironmentList & env);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Activator (void);

    // Concrete non-local interface only.
    Activator (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Activator (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Activator (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Activator (const Activator &);

    void operator= (const Activator &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern ActivatorIDL_Export ::CORBA::TypeCode_ptr const _tc_Activator;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_valuetype.cpp:564

  

#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXCEPTIONHOLDER__VAR_OUT_CH_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXCEPTIONHOLDER__VAR_OUT_CH_

  class AMH_ActivatorExceptionHolder;
  typedef
    TAO_Value_Var_T<
        AMH_ActivatorExceptionHolder
      >
    AMH_ActivatorExceptionHolder_var;
  
  typedef
    TAO_Value_Out_T<
        AMH_ActivatorExceptionHolder
      >
    AMH_ActivatorExceptionHolder_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:50

  class ActivatorIDL_Export AMH_ActivatorExceptionHolder
    : public virtual ::CORBA::DefaultValueRefCountBase
  {
  public:

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef AMH_ActivatorExceptionHolder * _ptr_type;
    typedef AMH_ActivatorExceptionHolder_var _var_type;
    typedef AMH_ActivatorExceptionHolder_out _out_type;

    static void _tao_any_destructor (void *);

    AMH_ActivatorExceptionHolder ( ::CORBA::Exception *ex)
      : exception (ex)
    {}

    virtual ~AMH_ActivatorExceptionHolder (void);
    virtual ::CORBA::ValueBase *_copy_value (void);

    static AMH_ActivatorExceptionHolder* _downcast ( ::CORBA::ValueBase *v);
    
    /// TAO extensions or internals
    static ::CORBA::Boolean _tao_unmarshal (
        TAO_InputCDR &strm,
        AMH_ActivatorExceptionHolder *&new_object);
    
    virtual const char* _tao_obv_repository_id (void) const;

    virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

    static const char* _tao_obv_static_repository_id (void);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  
  public:

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:396
    
  public:
    virtual void raise_start_server (void);

public:

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:396
  
public:
  virtual void raise_shutdown (void);

public:

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:396
  
public:
  virtual void raise_sendc_start_server (void);

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:238

protected:
  AMH_ActivatorExceptionHolder (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
  
private:
  AMH_ActivatorExceptionHolder (const AMH_ActivatorExceptionHolder &);
  void operator= (const AMH_ActivatorExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__ImplementationRepository_AMH_ActivatorExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__ImplementationRepository_AMH_ActivatorExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

extern ActivatorIDL_Export ::CORBA::TypeCode_ptr const _tc_AMH_ActivatorExceptionHolder;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATORRESPONSEHANDLER__VAR_OUT_CH_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATORRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_ActivatorResponseHandlerHandler;
typedef AMI_AMH_ActivatorResponseHandlerHandler *AMI_AMH_ActivatorResponseHandlerHandler_ptr;

class AMH_ActivatorResponseHandler;
typedef AMH_ActivatorResponseHandler *AMH_ActivatorResponseHandler_ptr;
typedef TAO_Objref_Var_T<AMH_ActivatorResponseHandler> AMH_ActivatorResponseHandler_var;
typedef TAO_Objref_Out_T<AMH_ActivatorResponseHandler> AMH_ActivatorResponseHandler_out;


#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

class ActivatorIDL_Export AMH_ActivatorResponseHandler
  : public virtual ::CORBA::Object
{
public:

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

  typedef AMH_ActivatorResponseHandler_ptr _ptr_type;
  typedef AMH_ActivatorResponseHandler_var _var_type;
  typedef AMH_ActivatorResponseHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_ActivatorResponseHandler_ptr _duplicate (AMH_ActivatorResponseHandler_ptr obj);

  static void _tao_release (AMH_ActivatorResponseHandler_ptr obj);

  static AMH_ActivatorResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_ActivatorResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_ActivatorResponseHandler_ptr _nil (void);

  virtual void start_server (
    void) = 0;

  virtual void start_server_excep (
    ::ImplementationRepository::AMH_ActivatorExceptionHolder * holder) = 0;

  virtual void shutdown (
    void) = 0;

  virtual void shutdown_excep (
    ::ImplementationRepository::AMH_ActivatorExceptionHolder * holder) = 0;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_ActivatorResponseHandler (void);

  

  virtual ~AMH_ActivatorResponseHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMH_ActivatorResponseHandler (const AMH_ActivatorResponseHandler &);

  void operator= (const AMH_ActivatorResponseHandler &);
};

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

extern ActivatorIDL_Export ::CORBA::TypeCode_ptr const _tc_AMH_ActivatorResponseHandler;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_IMPLEMENTATIONREPOSITORY_AMI_ACTIVATORHANDLER__VAR_OUT_CH_)
#define _IMPLEMENTATIONREPOSITORY_AMI_ACTIVATORHANDLER__VAR_OUT_CH_

class AMI_ActivatorHandler;
typedef AMI_ActivatorHandler *AMI_ActivatorHandler_ptr;
typedef TAO_Objref_Var_T<AMI_ActivatorHandler> AMI_ActivatorHandler_var;
typedef TAO_Objref_Out_T<AMI_ActivatorHandler> AMI_ActivatorHandler_out;


#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

class ActivatorIDL_Export AMI_ActivatorHandler
  : public virtual ::Messaging::ReplyHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_ActivatorHandler>;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

  typedef AMI_ActivatorHandler_ptr _ptr_type;
  typedef AMI_ActivatorHandler_var _var_type;
  typedef AMI_ActivatorHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ActivatorHandler_ptr _duplicate (AMI_ActivatorHandler_ptr obj);

  static void _tao_release (AMI_ActivatorHandler_ptr obj);

  static AMI_ActivatorHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ActivatorHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ActivatorHandler_ptr _nil (void);

  virtual void start_server (
    void);

  static void
  start_server_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void start_server_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ActivatorHandler (void);

  // Concrete non-local interface only.
  AMI_ActivatorHandler (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ActivatorHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~AMI_ActivatorHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ActivatorHandler (const AMI_ActivatorHandler &);

  void operator= (const AMI_ActivatorHandler &);
};

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

extern ActivatorIDL_Export ::CORBA::TypeCode_ptr const _tc_AMI_ActivatorHandler;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_IMPLEMENTATIONREPOSITORY_ACTIVATOREXT__VAR_OUT_CH_)
#define _IMPLEMENTATIONREPOSITORY_ACTIVATOREXT__VAR_OUT_CH_

class AMI_ActivatorExtHandler;
typedef AMI_ActivatorExtHandler *AMI_ActivatorExtHandler_ptr;

class ActivatorExt;
typedef ActivatorExt *ActivatorExt_ptr;
typedef TAO_Objref_Var_T<ActivatorExt> ActivatorExt_var;
typedef TAO_Objref_Out_T<ActivatorExt> ActivatorExt_out;


#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

class ActivatorIDL_Export ActivatorExt
  : public virtual ::ImplementationRepository::Activator

{
public:
  friend class TAO::Narrow_Utils<ActivatorExt>;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

  typedef ActivatorExt_ptr _ptr_type;
  typedef ActivatorExt_var _var_type;
  typedef ActivatorExt_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static ActivatorExt_ptr _duplicate (ActivatorExt_ptr obj);

  static void _tao_release (ActivatorExt_ptr obj);

  static ActivatorExt_ptr _narrow (::CORBA::Object_ptr obj);
  static ActivatorExt_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static ActivatorExt_ptr _nil (void);

  virtual ::CORBA::Boolean kill_server (
    const char * name,
    ::CORBA::Long pid,
    ::CORBA::Short signum);

  virtual ::CORBA::Boolean still_alive (
    ::CORBA::Long pid);

  virtual void sendc_kill_server (
    ::ImplementationRepository::AMI_ActivatorExtHandler_ptr ami_handler,
    const char * name,
    ::CORBA::Long pid,
    ::CORBA::Short signum);

  virtual void sendc_still_alive (
    ::ImplementationRepository::AMI_ActivatorExtHandler_ptr ami_handler,
    ::CORBA::Long pid);

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  ActivatorExt (void);

  // Concrete non-local interface only.
  ActivatorExt (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  ActivatorExt (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~ActivatorExt (void);

private:
  // Private and unimplemented for concrete interfaces.
  ActivatorExt (const ActivatorExt &);

  void operator= (const ActivatorExt &);
};

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

extern ActivatorIDL_Export ::CORBA::TypeCode_ptr const _tc_ActivatorExt;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_valuetype.cpp:564



#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTEXCEPTIONHOLDER__VAR_OUT_CH_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTEXCEPTIONHOLDER__VAR_OUT_CH_

class AMH_ActivatorExtExceptionHolder;
typedef
  TAO_Value_Var_T<
      AMH_ActivatorExtExceptionHolder
    >
  AMH_ActivatorExtExceptionHolder_var;

typedef
  TAO_Value_Out_T<
      AMH_ActivatorExtExceptionHolder
    >
  AMH_ActivatorExtExceptionHolder_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:50

class ActivatorIDL_Export AMH_ActivatorExtExceptionHolder
  : public virtual ::CORBA::DefaultValueRefCountBase
{
public:

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

  typedef AMH_ActivatorExtExceptionHolder * _ptr_type;
  typedef AMH_ActivatorExtExceptionHolder_var _var_type;
  typedef AMH_ActivatorExtExceptionHolder_out _out_type;

  static void _tao_any_destructor (void *);

  AMH_ActivatorExtExceptionHolder ( ::CORBA::Exception *ex)
    : exception (ex)
  {}

  virtual ~AMH_ActivatorExtExceptionHolder (void);
  virtual ::CORBA::ValueBase *_copy_value (void);

  static AMH_ActivatorExtExceptionHolder* _downcast ( ::CORBA::ValueBase *v);
  
  /// TAO extensions or internals
  static ::CORBA::Boolean _tao_unmarshal (
      TAO_InputCDR &strm,
      AMH_ActivatorExtExceptionHolder *&new_object);
  
  virtual const char* _tao_obv_repository_id (void) const;

  virtual void _tao_obv_truncatable_repo_ids (Repository_Id_List &) const;

  static const char* _tao_obv_static_repository_id (void);

  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;

public:

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:396
  
public:
  virtual void raise_kill_server (void);

public:

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:396
  
public:
  virtual void raise_still_alive (void);

public:

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:396
  
public:
  virtual void raise_sendc_kill_server (void);

public:

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:396
  
public:
  virtual void raise_sendc_still_alive (void);

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_ch.cpp:238

protected:
  AMH_ActivatorExtExceptionHolder (void);
  virtual ::CORBA::Boolean _tao_marshal_v (TAO_OutputCDR &) const;
  virtual ::CORBA::Boolean _tao_unmarshal_v (TAO_InputCDR &);
  virtual ::CORBA::Boolean _tao_match_formal_type (ptrdiff_t ) const;
  
private:
  AMH_ActivatorExtExceptionHolder (const AMH_ActivatorExtExceptionHolder &);
  void operator= (const AMH_ActivatorExtExceptionHolder &);
  
  ::CORBA::Exception *exception;
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__ImplementationRepository_AMH_ActivatorExtExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__ImplementationRepository_AMH_ActivatorExtExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);
};

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

extern ActivatorIDL_Export ::CORBA::TypeCode_ptr const _tc_AMH_ActivatorExtExceptionHolder;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTRESPONSEHANDLER__VAR_OUT_CH_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTRESPONSEHANDLER__VAR_OUT_CH_

class AMI_AMH_ActivatorExtResponseHandlerHandler;
typedef AMI_AMH_ActivatorExtResponseHandlerHandler *AMI_AMH_ActivatorExtResponseHandlerHandler_ptr;

class AMH_ActivatorExtResponseHandler;
typedef AMH_ActivatorExtResponseHandler *AMH_ActivatorExtResponseHandler_ptr;
typedef TAO_Objref_Var_T<AMH_ActivatorExtResponseHandler> AMH_ActivatorExtResponseHandler_var;
typedef TAO_Objref_Out_T<AMH_ActivatorExtResponseHandler> AMH_ActivatorExtResponseHandler_out;


#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

class ActivatorIDL_Export AMH_ActivatorExtResponseHandler
  : public virtual ::CORBA::Object
{
public:

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

  typedef AMH_ActivatorExtResponseHandler_ptr _ptr_type;
  typedef AMH_ActivatorExtResponseHandler_var _var_type;
  typedef AMH_ActivatorExtResponseHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMH_ActivatorExtResponseHandler_ptr _duplicate (AMH_ActivatorExtResponseHandler_ptr obj);

  static void _tao_release (AMH_ActivatorExtResponseHandler_ptr obj);

  static AMH_ActivatorExtResponseHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMH_ActivatorExtResponseHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMH_ActivatorExtResponseHandler_ptr _nil (void);

  virtual void kill_server (
    ::CORBA::Boolean return_value) = 0;

  virtual void kill_server_excep (
    ::ImplementationRepository::AMH_ActivatorExtExceptionHolder * holder) = 0;

  virtual void still_alive (
    ::CORBA::Boolean return_value) = 0;

  virtual void still_alive_excep (
    ::ImplementationRepository::AMH_ActivatorExtExceptionHolder * holder) = 0;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Abstract or local interface only.
  AMH_ActivatorExtResponseHandler (void);

  

  virtual ~AMH_ActivatorExtResponseHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMH_ActivatorExtResponseHandler (const AMH_ActivatorExtResponseHandler &);

  void operator= (const AMH_ActivatorExtResponseHandler &);
};

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

extern ActivatorIDL_Export ::CORBA::TypeCode_ptr const _tc_AMH_ActivatorExtResponseHandler;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_IMPLEMENTATIONREPOSITORY_AMI_ACTIVATOREXTHANDLER__VAR_OUT_CH_)
#define _IMPLEMENTATIONREPOSITORY_AMI_ACTIVATOREXTHANDLER__VAR_OUT_CH_

class AMI_ActivatorExtHandler;
typedef AMI_ActivatorExtHandler *AMI_ActivatorExtHandler_ptr;
typedef TAO_Objref_Var_T<AMI_ActivatorExtHandler> AMI_ActivatorExtHandler_var;
typedef TAO_Objref_Out_T<AMI_ActivatorExtHandler> AMI_ActivatorExtHandler_out;


#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

class ActivatorIDL_Export AMI_ActivatorExtHandler
  : public virtual ::ImplementationRepository::AMI_ActivatorHandler

{
public:
  friend class TAO::Narrow_Utils<AMI_ActivatorExtHandler>;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

  typedef AMI_ActivatorExtHandler_ptr _ptr_type;
  typedef AMI_ActivatorExtHandler_var _var_type;
  typedef AMI_ActivatorExtHandler_out _out_type;

  static void _tao_any_destructor (void *);

  // The static operations.
  static AMI_ActivatorExtHandler_ptr _duplicate (AMI_ActivatorExtHandler_ptr obj);

  static void _tao_release (AMI_ActivatorExtHandler_ptr obj);

  static AMI_ActivatorExtHandler_ptr _narrow (::CORBA::Object_ptr obj);
  static AMI_ActivatorExtHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static AMI_ActivatorExtHandler_ptr _nil (void);

  virtual void kill_server (
    ::CORBA::Boolean ami_return_val);

  static void
  kill_server_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void kill_server_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  virtual void still_alive (
    ::CORBA::Boolean ami_return_val);

  static void
  still_alive_reply_stub (
    TAO_InputCDR &_tao_reply_cdr,
    ::Messaging::ReplyHandler_ptr _tao_reply_handler,
    ::CORBA::ULong reply_status);

  virtual void still_alive_excep (
    ::Messaging::ExceptionHolder * excep_holder);

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);

protected:
  // Concrete interface only.
  AMI_ActivatorExtHandler (void);

  // Concrete non-local interface only.
  AMI_ActivatorExtHandler (
      ::IOP::IOR *ior,
      TAO_ORB_Core *orb_core);
  
  // Non-local interface only.
  AMI_ActivatorExtHandler (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);

  virtual ~AMI_ActivatorExtHandler (void);

private:
  // Private and unimplemented for concrete interfaces.
  AMI_ActivatorExtHandler (const AMI_ActivatorExtHandler &);

  void operator= (const AMI_ActivatorExtHandler &);
};

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

extern ActivatorIDL_Export ::CORBA::TypeCode_ptr const _tc_AMI_ActivatorExtHandler;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64

} // module ImplementationRepository

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:66


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_IMPLEMENTATIONREPOSITORY_ACTIVATOR__ARG_TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_ACTIVATOR__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ImplementationRepository::Activator>
    : public
        Object_Arg_Traits_T<
            ::ImplementationRepository::Activator_ptr,
            ::ImplementationRepository::Activator_var,
            ::ImplementationRepository::Activator_out,
            TAO::Objref_Traits<ImplementationRepository::Activator>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:306

#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXCEPTIONHOLDER__ARG_TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::ImplementationRepository::AMH_ActivatorExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::ImplementationRepository::AMH_ActivatorExceptionHolder *,
            ::ImplementationRepository::AMH_ActivatorExceptionHolder_var,
            ::ImplementationRepository::AMH_ActivatorExceptionHolder_out,
            TAO::Value_Traits<ImplementationRepository::AMH_ActivatorExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_IMPLEMENTATIONREPOSITORY_AMI_ACTIVATORHANDLER__ARG_TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMI_ACTIVATORHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ImplementationRepository::AMI_ActivatorHandler>
    : public
        Object_Arg_Traits_T<
            ::ImplementationRepository::AMI_ActivatorHandler_ptr,
            ::ImplementationRepository::AMI_ActivatorHandler_var,
            ::ImplementationRepository::AMI_ActivatorHandler_out,
            TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_IMPLEMENTATIONREPOSITORY_ACTIVATOREXT__ARG_TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_ACTIVATOREXT__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ImplementationRepository::ActivatorExt>
    : public
        Object_Arg_Traits_T<
            ::ImplementationRepository::ActivatorExt_ptr,
            ::ImplementationRepository::ActivatorExt_var,
            ::ImplementationRepository::ActivatorExt_out,
            TAO::Objref_Traits<ImplementationRepository::ActivatorExt>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:306

#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTEXCEPTIONHOLDER__ARG_TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTEXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::ImplementationRepository::AMH_ActivatorExtExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::ImplementationRepository::AMH_ActivatorExtExceptionHolder *,
            ::ImplementationRepository::AMH_ActivatorExtExceptionHolder_var,
            ::ImplementationRepository::AMH_ActivatorExtExceptionHolder_out,
            TAO::Value_Traits<ImplementationRepository::AMH_ActivatorExtExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_IMPLEMENTATIONREPOSITORY_AMI_ACTIVATOREXTHANDLER__ARG_TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMI_ACTIVATOREXTHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::ImplementationRepository::AMI_ActivatorExtHandler>
    : public
        Object_Arg_Traits_T<
            ::ImplementationRepository::AMI_ActivatorExtHandler_ptr,
            ::ImplementationRepository::AMI_ActivatorExtHandler_var,
            ::ImplementationRepository::AMI_ActivatorExtHandler_out,
            TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorExtHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\obv_module.cpp:44

namespace OBV_ImplementationRepository
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_obv_ch.cpp:44

  // OBV_ class
  class ActivatorIDL_Export AMH_ActivatorExceptionHolder
    : public virtual ImplementationRepository::AMH_ActivatorExceptionHolder
  {

protected:
  AMH_ActivatorExceptionHolder (void);
  virtual ~AMH_ActivatorExceptionHolder (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__ImplementationRepository_AMH_ActivatorExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__ImplementationRepository_AMH_ActivatorExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  CORBA::Boolean require_truncation_;
};

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_obv_ch.cpp:44

// OBV_ class
class ActivatorIDL_Export AMH_ActivatorExtExceptionHolder
  : public virtual ImplementationRepository::AMH_ActivatorExtExceptionHolder
{

protected:
  AMH_ActivatorExtExceptionHolder (void);
  virtual ~AMH_ActivatorExtExceptionHolder (void);
  
protected:
  virtual ::CORBA::Boolean
  _tao_marshal__ImplementationRepository_AMH_ActivatorExtExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo &) const;

  virtual ::CORBA::Boolean
  _tao_unmarshal__ImplementationRepository_AMH_ActivatorExtExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo &);

  ::CORBA::Boolean _tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo &) const;
  ::CORBA::Boolean _tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo &);
  virtual void truncation_hook (void);

private:
  CORBA::Boolean require_truncation_;
};
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:60


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_IMPLEMENTATIONREPOSITORY_ACTIVATOR__TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_ACTIVATOR__TRAITS_

  template<>
  struct ActivatorIDL_Export Objref_Traits< ::ImplementationRepository::Activator>
  {
    static ::ImplementationRepository::Activator_ptr duplicate (
        ::ImplementationRepository::Activator_ptr p);
    static void release (
        ::ImplementationRepository::Activator_ptr p);
    static ::ImplementationRepository::Activator_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ImplementationRepository::Activator_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXCEPTIONHOLDER__TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXCEPTIONHOLDER__TRAITS_

  template<>
  struct ActivatorIDL_Export Value_Traits<ImplementationRepository::AMH_ActivatorExceptionHolder>
  {
    static void add_ref (ImplementationRepository::AMH_ActivatorExceptionHolder *);
    static void remove_ref (ImplementationRepository::AMH_ActivatorExceptionHolder *);
    static void release (ImplementationRepository::AMH_ActivatorExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATORRESPONSEHANDLER__TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATORRESPONSEHANDLER__TRAITS_

  template<>
  struct ActivatorIDL_Export Objref_Traits< ::ImplementationRepository::AMH_ActivatorResponseHandler>
  {
    static ::ImplementationRepository::AMH_ActivatorResponseHandler_ptr duplicate (
        ::ImplementationRepository::AMH_ActivatorResponseHandler_ptr p);
    static void release (
        ::ImplementationRepository::AMH_ActivatorResponseHandler_ptr p);
    static ::ImplementationRepository::AMH_ActivatorResponseHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ImplementationRepository::AMH_ActivatorResponseHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_IMPLEMENTATIONREPOSITORY_AMI_ACTIVATORHANDLER__TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMI_ACTIVATORHANDLER__TRAITS_

  template<>
  struct ActivatorIDL_Export Objref_Traits< ::ImplementationRepository::AMI_ActivatorHandler>
  {
    static ::ImplementationRepository::AMI_ActivatorHandler_ptr duplicate (
        ::ImplementationRepository::AMI_ActivatorHandler_ptr p);
    static void release (
        ::ImplementationRepository::AMI_ActivatorHandler_ptr p);
    static ::ImplementationRepository::AMI_ActivatorHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ImplementationRepository::AMI_ActivatorHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_IMPLEMENTATIONREPOSITORY_ACTIVATOREXT__TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_ACTIVATOREXT__TRAITS_

  template<>
  struct ActivatorIDL_Export Objref_Traits< ::ImplementationRepository::ActivatorExt>
  {
    static ::ImplementationRepository::ActivatorExt_ptr duplicate (
        ::ImplementationRepository::ActivatorExt_ptr p);
    static void release (
        ::ImplementationRepository::ActivatorExt_ptr p);
    static ::ImplementationRepository::ActivatorExt_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ImplementationRepository::ActivatorExt_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTEXCEPTIONHOLDER__TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTEXCEPTIONHOLDER__TRAITS_

  template<>
  struct ActivatorIDL_Export Value_Traits<ImplementationRepository::AMH_ActivatorExtExceptionHolder>
  {
    static void add_ref (ImplementationRepository::AMH_ActivatorExtExceptionHolder *);
    static void remove_ref (ImplementationRepository::AMH_ActivatorExtExceptionHolder *);
    static void release (ImplementationRepository::AMH_ActivatorExtExceptionHolder *);
  };

#endif /* end #if !defined */

#if !defined (_IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTRESPONSEHANDLER__TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMH_ACTIVATOREXTRESPONSEHANDLER__TRAITS_

  template<>
  struct ActivatorIDL_Export Objref_Traits< ::ImplementationRepository::AMH_ActivatorExtResponseHandler>
  {
    static ::ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr duplicate (
        ::ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr p);
    static void release (
        ::ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr p);
    static ::ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_IMPLEMENTATIONREPOSITORY_AMI_ACTIVATOREXTHANDLER__TRAITS_)
#define _IMPLEMENTATIONREPOSITORY_AMI_ACTIVATOREXTHANDLER__TRAITS_

  template<>
  struct ActivatorIDL_Export Objref_Traits< ::ImplementationRepository::AMI_ActivatorExtHandler>
  {
    static ::ImplementationRepository::AMI_ActivatorExtHandler_ptr duplicate (
        ::ImplementationRepository::AMI_ActivatorExtHandler_ptr p);
    static void release (
        ::ImplementationRepository::AMI_ActivatorExtHandler_ptr p);
    static ::ImplementationRepository::AMI_ActivatorExtHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::ImplementationRepository::AMI_ActivatorExtHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, Activator_ptr); // copying
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, Activator_ptr *); // non-copying
  ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Activator_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::Activator_ptr); // copying
ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::Activator_ptr *); // non-copying
ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ImplementationRepository::Activator_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMH_ActivatorExceptionHolder *); // copying
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMH_ActivatorExceptionHolder **); // non-copying
  ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_ActivatorExceptionHolder *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMH_ActivatorExceptionHolder *); // copying
ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMH_ActivatorExceptionHolder **); // non-copying
ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ImplementationRepository::AMH_ActivatorExceptionHolder *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMH_ActivatorResponseHandler_ptr); // copying
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMH_ActivatorResponseHandler_ptr *); // non-copying
  ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_ActivatorResponseHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMH_ActivatorResponseHandler_ptr); // copying
ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMH_ActivatorResponseHandler_ptr *); // non-copying
ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ImplementationRepository::AMH_ActivatorResponseHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMI_ActivatorHandler_ptr); // copying
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMI_ActivatorHandler_ptr *); // non-copying
  ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_ActivatorHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMI_ActivatorHandler_ptr); // copying
ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMI_ActivatorHandler_ptr *); // non-copying
ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ImplementationRepository::AMI_ActivatorHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, ActivatorExt_ptr); // copying
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, ActivatorExt_ptr *); // non-copying
  ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ActivatorExt_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::ActivatorExt_ptr); // copying
ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::ActivatorExt_ptr *); // non-copying
ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ImplementationRepository::ActivatorExt_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\any_op_ch.cpp:43



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMH_ActivatorExtExceptionHolder *); // copying
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMH_ActivatorExtExceptionHolder **); // non-copying
  ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_ActivatorExtExceptionHolder *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMH_ActivatorExtExceptionHolder *); // copying
ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMH_ActivatorExtExceptionHolder **); // non-copying
ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ImplementationRepository::AMH_ActivatorExtExceptionHolder *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMH_ActivatorExtResponseHandler_ptr); // copying
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMH_ActivatorExtResponseHandler_ptr *); // non-copying
  ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMH_ActivatorExtResponseHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr); // copying
ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr *); // non-copying
ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMI_ActivatorExtHandler_ptr); // copying
  ActivatorIDL_Export void operator<<= ( ::CORBA::Any &, AMI_ActivatorExtHandler_ptr *); // non-copying
  ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_ActivatorExtHandler_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMI_ActivatorExtHandler_ptr); // copying
ActivatorIDL_Export void operator<<= (::CORBA::Any &, ImplementationRepository::AMI_ActivatorExtHandler_ptr *); // non-copying
ActivatorIDL_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ImplementationRepository::AMI_ActivatorExtHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ImplementationRepository::Activator_ptr );
ActivatorIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ImplementationRepository::Activator_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_valuetype.cpp:456



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern ActivatorIDL_Export void add_ref (ImplementationRepository::AMH_ActivatorExceptionHolder *);
  extern ActivatorIDL_Export void remove_ref (ImplementationRepository::AMH_ActivatorExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\cdr_op_ch.cpp:49



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ImplementationRepository::AMH_ActivatorExceptionHolder *);
ActivatorIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ImplementationRepository::AMH_ActivatorExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ImplementationRepository::AMI_ActivatorHandler_ptr );
ActivatorIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ImplementationRepository::AMI_ActivatorHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ImplementationRepository::ActivatorExt_ptr );
ActivatorIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ImplementationRepository::ActivatorExt_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_valuetype.cpp:456



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace CORBA
{
  extern ActivatorIDL_Export void add_ref (ImplementationRepository::AMH_ActivatorExtExceptionHolder *);
  extern ActivatorIDL_Export void remove_ref (ImplementationRepository::AMH_ActivatorExtExceptionHolder *);
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\cdr_op_ch.cpp:49



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ImplementationRepository::AMH_ActivatorExtExceptionHolder *);
ActivatorIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ImplementationRepository::AMH_ActivatorExtExceptionHolder *&);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

ActivatorIDL_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const ImplementationRepository::AMI_ActivatorExtHandler_ptr );
ActivatorIDL_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, ImplementationRepository::AMI_ActivatorExtHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1686


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "ImR_ActivatorC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

