// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:366


#include "ImR_ActivatorC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "ace/OS_NS_string.h"
#include "ace/Auto_Ptr.h"

#if !defined (__ACE_INLINE__)
#include "ImR_ActivatorC.inl"
#endif /* !defined INLINE */

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::Activator.

ImplementationRepository::Activator_ptr
TAO::Objref_Traits<ImplementationRepository::Activator>::duplicate (
    ImplementationRepository::Activator_ptr p)
{
  return ImplementationRepository::Activator::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::Activator>::release (
    ImplementationRepository::Activator_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::Activator_ptr
TAO::Objref_Traits<ImplementationRepository::Activator>::nil (void)
{
  return ImplementationRepository::Activator::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::Activator>::marshal (
    const ImplementationRepository::Activator_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::Activator::start_server (
  const char * name,
  const char * cmdline,
  const char * dir,
  const ::ImplementationRepository::EnvironmentList & env)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< char *>::in_arg_val _tao_cmdline (cmdline);
  TAO::Arg_Traits< char *>::in_arg_val _tao_dir (dir);
  TAO::Arg_Traits< ::ImplementationRepository::EnvironmentList>::in_arg_val _tao_env (env);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_cmdline,
      &_tao_dir,
      &_tao_env
    };

  static TAO::Exception_Data
  _tao_ImplementationRepository_Activator_start_server_exceptiondata [] = 
    {
      {
        "IDL:ImplementationRepository/CannotActivate:1.0",
        ImplementationRepository::CannotActivate::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ImplementationRepository::_tc_CannotActivate
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "start_server",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_ImplementationRepository_Activator_start_server_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::Activator::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\ami_cs.cpp:55

void
ImplementationRepository::Activator::sendc_start_server (
  ::ImplementationRepository::AMI_ActivatorHandler_ptr ami_handler,
  const char * name,
  const char * cmdline,
  const char * dir,
  const ::ImplementationRepository::EnvironmentList & env)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< char *>::in_arg_val _tao_cmdline (cmdline);
  TAO::Arg_Traits< char *>::in_arg_val _tao_dir (dir);
  TAO::Arg_Traits< ::ImplementationRepository::EnvironmentList>::in_arg_val _tao_env (env);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_cmdline,
      &_tao_dir,
      &_tao_env
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "start_server",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &ImplementationRepository::AMI_ActivatorHandler::start_server_reply_stub
    );
}

ImplementationRepository::Activator::Activator (void)
{
}

ImplementationRepository::Activator::~Activator (void)
{
}

void
ImplementationRepository::Activator::_tao_any_destructor (void *_tao_void_pointer)
{
  Activator *_tao_tmp_pointer =
    static_cast<Activator *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::Activator_ptr
ImplementationRepository::Activator::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Activator>::narrow (
        _tao_objref,
        "IDL:ImplementationRepository/Activator:1.0");
}

ImplementationRepository::Activator_ptr
ImplementationRepository::Activator::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Activator>::unchecked_narrow (
        _tao_objref);
}

ImplementationRepository::Activator_ptr
ImplementationRepository::Activator::_nil (void)
{
  return 0;
}

ImplementationRepository::Activator_ptr
ImplementationRepository::Activator::_duplicate (Activator_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::Activator::_tao_release (Activator_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::Activator::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/Activator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ImplementationRepository::Activator::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/Activator:1.0";
}

::CORBA::Boolean
ImplementationRepository::Activator::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_Activator (
    ::CORBA::tk_objref,
    "IDL:ImplementationRepository/Activator:1.0",
    "Activator");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_Activator =
    &_tao_tc_ImplementationRepository_Activator;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_ImplementationRepository_AMH_ActivatorExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMH_ActivatorExceptionHolder (
    ::CORBA::tk_value,
    "IDL:ImplementationRepository/AMH_ActivatorExceptionHolder:1.0",
    "AMH_ActivatorExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_ImplementationRepository_AMH_ActivatorExceptionHolder,
    0);
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMH_ActivatorExceptionHolder =
    &_tao_tc_ImplementationRepository_AMH_ActivatorExceptionHolder;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:53

void
TAO::Value_Traits<ImplementationRepository::AMH_ActivatorExceptionHolder>::add_ref (
    ImplementationRepository::AMH_ActivatorExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<ImplementationRepository::AMH_ActivatorExceptionHolder>::remove_ref (
    ImplementationRepository::AMH_ActivatorExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<ImplementationRepository::AMH_ActivatorExceptionHolder>::release (
    ImplementationRepository::AMH_ActivatorExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

ImplementationRepository::AMH_ActivatorExceptionHolder *
ImplementationRepository::AMH_ActivatorExceptionHolder::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::ImplementationRepository::AMH_ActivatorExceptionHolder * > (v);
}

const char *
ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_ActivatorExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_ActivatorExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_type (void) const
{
  return ::ImplementationRepository::_tc_AMH_ActivatorExceptionHolder;
}

ImplementationRepository::AMH_ActivatorExceptionHolder::~AMH_ActivatorExceptionHolder (void)
{}

::CORBA::ValueBase *
ImplementationRepository::AMH_ActivatorExceptionHolder::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_ActivatorExceptionHolder (),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_match_formal_type (ptrdiff_t ) const
{
  return false;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_marshal__ImplementationRepository_AMH_ActivatorExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_unmarshal__ImplementationRepository_AMH_ActivatorExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_ActivatorExceptionHolder *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_ActivatorExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_ActivatorExceptionHolder::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_ActivatorExceptionHolder::raise_start_server (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_ActivatorExceptionHolder::raise_shutdown (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_ActivatorExceptionHolder::raise_sendc_start_server (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::AMH_ActivatorResponseHandler.

ImplementationRepository::AMH_ActivatorResponseHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMH_ActivatorResponseHandler>::duplicate (
    ImplementationRepository::AMH_ActivatorResponseHandler_ptr p)
{
  return ImplementationRepository::AMH_ActivatorResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::AMH_ActivatorResponseHandler>::release (
    ImplementationRepository::AMH_ActivatorResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::AMH_ActivatorResponseHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMH_ActivatorResponseHandler>::nil (void)
{
  return ImplementationRepository::AMH_ActivatorResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::AMH_ActivatorResponseHandler>::marshal (
    const ImplementationRepository::AMH_ActivatorResponseHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




ImplementationRepository::AMH_ActivatorResponseHandler::AMH_ActivatorResponseHandler (void)
{}

ImplementationRepository::AMH_ActivatorResponseHandler::~AMH_ActivatorResponseHandler (void)
{
}

void
ImplementationRepository::AMH_ActivatorResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_ActivatorResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_ActivatorResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::AMH_ActivatorResponseHandler_ptr
ImplementationRepository::AMH_ActivatorResponseHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_ActivatorResponseHandler::_duplicate (
      dynamic_cast<AMH_ActivatorResponseHandler_ptr> (_tao_objref));
}

ImplementationRepository::AMH_ActivatorResponseHandler_ptr
ImplementationRepository::AMH_ActivatorResponseHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_ActivatorResponseHandler::_duplicate (
      dynamic_cast<AMH_ActivatorResponseHandler_ptr> (_tao_objref));
}

ImplementationRepository::AMH_ActivatorResponseHandler_ptr
ImplementationRepository::AMH_ActivatorResponseHandler::_nil (void)
{
  return 0;
}

ImplementationRepository::AMH_ActivatorResponseHandler_ptr
ImplementationRepository::AMH_ActivatorResponseHandler::_duplicate (AMH_ActivatorResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::AMH_ActivatorResponseHandler::_tao_release (AMH_ActivatorResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorResponseHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AMH_ActivatorResponseHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* ImplementationRepository::AMH_ActivatorResponseHandler::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/AMH_ActivatorResponseHandler:1.0";
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMH_ActivatorResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:ImplementationRepository/AMH_ActivatorResponseHandler:1.0",
    "AMH_ActivatorResponseHandler");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMH_ActivatorResponseHandler =
    &_tao_tc_ImplementationRepository_AMH_ActivatorResponseHandler;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::AMI_ActivatorHandler.

ImplementationRepository::AMI_ActivatorHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorHandler>::duplicate (
    ImplementationRepository::AMI_ActivatorHandler_ptr p)
{
  return ImplementationRepository::AMI_ActivatorHandler::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorHandler>::release (
    ImplementationRepository::AMI_ActivatorHandler_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::AMI_ActivatorHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorHandler>::nil (void)
{
  return ImplementationRepository::AMI_ActivatorHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorHandler>::marshal (
    const ImplementationRepository::AMI_ActivatorHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::AMI_ActivatorHandler::start_server (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_ImplementationRepository_AMI_ActivatorHandler_start_server_exceptiondata [] = 
    {
      {
        "IDL:ImplementationRepository/CannotActivate:1.0",
        ImplementationRepository::CannotActivate::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ImplementationRepository::_tc_CannotActivate
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "start_server",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (
      _tao_ImplementationRepository_AMI_ActivatorHandler_start_server_exceptiondata,
      1
    );
}

void
ImplementationRepository::AMI_ActivatorHandler::start_server_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  ImplementationRepository::AMI_ActivatorHandler_var _tao_reply_handler_object =
    ImplementationRepository::AMI_ActivatorHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->start_server (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:ImplementationRepository/CannotActivate:1.0",
          ImplementationRepository::CannotActivate::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , ImplementationRepository::_tc_CannotActivate
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::ULong const exceptions_count = 1;
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            exceptions_count,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->start_server_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::AMI_ActivatorHandler::start_server_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  static TAO::Exception_Data
  _tao_ImplementationRepository_AMI_ActivatorHandler_start_server_excep_exceptiondata [] = 
    {
      {
        "IDL:ImplementationRepository/CannotActivate:1.0",
        ImplementationRepository::CannotActivate::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , ImplementationRepository::_tc_CannotActivate
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "start_server_excep",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_ImplementationRepository_AMI_ActivatorHandler_start_server_excep_exceptiondata,
      1
    );
}

ImplementationRepository::AMI_ActivatorHandler::AMI_ActivatorHandler (void)
{
}

ImplementationRepository::AMI_ActivatorHandler::~AMI_ActivatorHandler (void)
{
}

void
ImplementationRepository::AMI_ActivatorHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_ActivatorHandler *_tao_tmp_pointer =
    static_cast<AMI_ActivatorHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::AMI_ActivatorHandler_ptr
ImplementationRepository::AMI_ActivatorHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_ActivatorHandler>::narrow (
        _tao_objref,
        "IDL:ImplementationRepository/AMI_ActivatorHandler:1.0");
}

ImplementationRepository::AMI_ActivatorHandler_ptr
ImplementationRepository::AMI_ActivatorHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_ActivatorHandler>::unchecked_narrow (
        _tao_objref);
}

ImplementationRepository::AMI_ActivatorHandler_ptr
ImplementationRepository::AMI_ActivatorHandler::_nil (void)
{
  return 0;
}

ImplementationRepository::AMI_ActivatorHandler_ptr
ImplementationRepository::AMI_ActivatorHandler::_duplicate (AMI_ActivatorHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::AMI_ActivatorHandler::_tao_release (AMI_ActivatorHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::AMI_ActivatorHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AMI_ActivatorHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ImplementationRepository::AMI_ActivatorHandler::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/AMI_ActivatorHandler:1.0";
}

::CORBA::Boolean
ImplementationRepository::AMI_ActivatorHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMI_ActivatorHandler (
    ::CORBA::tk_objref,
    "IDL:ImplementationRepository/AMI_ActivatorHandler:1.0",
    "AMI_ActivatorHandler");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMI_ActivatorHandler =
    &_tao_tc_ImplementationRepository_AMI_ActivatorHandler;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::ActivatorExt.

ImplementationRepository::ActivatorExt_ptr
TAO::Objref_Traits<ImplementationRepository::ActivatorExt>::duplicate (
    ImplementationRepository::ActivatorExt_ptr p)
{
  return ImplementationRepository::ActivatorExt::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::ActivatorExt>::release (
    ImplementationRepository::ActivatorExt_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::ActivatorExt_ptr
TAO::Objref_Traits<ImplementationRepository::ActivatorExt>::nil (void)
{
  return ImplementationRepository::ActivatorExt::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::ActivatorExt>::marshal (
    const ImplementationRepository::ActivatorExt_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

::CORBA::Boolean
ImplementationRepository::ActivatorExt::kill_server (
  const char * name,
  ::CORBA::Long pid,
  ::CORBA::Short signum)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_pid (pid);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_signum (signum);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_pid,
      &_tao_signum
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "kill_server",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

::CORBA::Boolean
ImplementationRepository::ActivatorExt::still_alive (
  ::CORBA::Long pid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_pid (pid);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_pid
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "still_alive",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\ami_cs.cpp:55

void
ImplementationRepository::ActivatorExt::sendc_kill_server (
  ::ImplementationRepository::AMI_ActivatorExtHandler_ptr ami_handler,
  const char * name,
  ::CORBA::Long pid,
  ::CORBA::Short signum)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_pid (pid);
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_signum (signum);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_name,
      &_tao_pid,
      &_tao_signum
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "kill_server",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &ImplementationRepository::AMI_ActivatorExtHandler::kill_server_reply_stub
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\ami_cs.cpp:55

void
ImplementationRepository::ActivatorExt::sendc_still_alive (
  ::ImplementationRepository::AMI_ActivatorExtHandler_ptr ami_handler,
  ::CORBA::Long pid)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_pid (pid);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_pid
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "still_alive",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &ImplementationRepository::AMI_ActivatorExtHandler::still_alive_reply_stub
    );
}

ImplementationRepository::ActivatorExt::ActivatorExt (void)
{
}

ImplementationRepository::ActivatorExt::~ActivatorExt (void)
{
}

void
ImplementationRepository::ActivatorExt::_tao_any_destructor (void *_tao_void_pointer)
{
  ActivatorExt *_tao_tmp_pointer =
    static_cast<ActivatorExt *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::ActivatorExt_ptr
ImplementationRepository::ActivatorExt::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ActivatorExt>::narrow (
        _tao_objref,
        "IDL:ImplementationRepository/ActivatorExt:1.0");
}

ImplementationRepository::ActivatorExt_ptr
ImplementationRepository::ActivatorExt::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ActivatorExt>::unchecked_narrow (
        _tao_objref);
}

ImplementationRepository::ActivatorExt_ptr
ImplementationRepository::ActivatorExt::_nil (void)
{
  return 0;
}

ImplementationRepository::ActivatorExt_ptr
ImplementationRepository::ActivatorExt::_duplicate (ActivatorExt_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::ActivatorExt::_tao_release (ActivatorExt_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::ActivatorExt::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/Activator:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/ActivatorExt:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ImplementationRepository::ActivatorExt::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/ActivatorExt:1.0";
}

::CORBA::Boolean
ImplementationRepository::ActivatorExt::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_ActivatorExt (
    ::CORBA::tk_objref,
    "IDL:ImplementationRepository/ActivatorExt:1.0",
    "ActivatorExt");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_ActivatorExt =
    &_tao_tc_ImplementationRepository_ActivatorExt;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\value_typecode.cpp:65

static TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_fields_ImplementationRepository_AMH_ActivatorExtExceptionHolder = 0;
static TAO::TypeCode::Value<char const *,
                     ::CORBA::TypeCode_ptr const *,
                     TAO::TypeCode::Value_Field<char const *, ::CORBA::TypeCode_ptr const *> const *,
                     TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMH_ActivatorExtExceptionHolder (
    ::CORBA::tk_value,
    "IDL:ImplementationRepository/AMH_ActivatorExtExceptionHolder:1.0",
    "AMH_ActivatorExtExceptionHolder",
    ::CORBA::VM_NONE,
    &::CORBA::_tc_null,
    _tao_fields_ImplementationRepository_AMH_ActivatorExtExceptionHolder,
    0);
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMH_ActivatorExtExceptionHolder =
    &_tao_tc_ImplementationRepository_AMH_ActivatorExtExceptionHolder;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:53

void
TAO::Value_Traits<ImplementationRepository::AMH_ActivatorExtExceptionHolder>::add_ref (
    ImplementationRepository::AMH_ActivatorExtExceptionHolder * p)
{
  ::CORBA::add_ref (p);
}

void
TAO::Value_Traits<ImplementationRepository::AMH_ActivatorExtExceptionHolder>::remove_ref (
    ImplementationRepository::AMH_ActivatorExtExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

void
TAO::Value_Traits<ImplementationRepository::AMH_ActivatorExtExceptionHolder>::release (
    ImplementationRepository::AMH_ActivatorExtExceptionHolder * p)
{
  ::CORBA::remove_ref (p);
}

ImplementationRepository::AMH_ActivatorExtExceptionHolder *
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_downcast ( ::CORBA::ValueBase *v)
{
  return dynamic_cast< ::ImplementationRepository::AMH_ActivatorExtExceptionHolder * > (v);
}

const char *
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_obv_repository_id (void) const
{
  return this->_tao_obv_static_repository_id ();
}

void
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_obv_truncatable_repo_ids (Repository_Id_List& ids) const
{
  ids.push_back (this->_tao_obv_static_repository_id ());
}

void
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_ActivatorExtExceptionHolder *_tao_tmp_pointer =
    static_cast<AMH_ActivatorExtExceptionHolder *> (_tao_void_pointer);
  ::CORBA::remove_ref (_tao_tmp_pointer);
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_type (void) const
{
  return ::ImplementationRepository::_tc_AMH_ActivatorExtExceptionHolder;
}

ImplementationRepository::AMH_ActivatorExtExceptionHolder::~AMH_ActivatorExtExceptionHolder (void)
{}

::CORBA::ValueBase *
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_copy_value (void)
{
  ::CORBA::ValueBase *ret_val = 0;
  ACE_NEW_THROW_EX (
    ret_val,
    AMH_ActivatorExtExceptionHolder (),
    ::CORBA::NO_MEMORY ()
  );
  return ret_val;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_marshal_v (TAO_OutputCDR &) const
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_unmarshal_v (TAO_InputCDR &)
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_match_formal_type (ptrdiff_t ) const
{
  return false;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_marshal__ImplementationRepository_AMH_ActivatorExtExceptionHolder (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_unmarshal__ImplementationRepository_AMH_ActivatorExtExceptionHolder (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_unmarshal (
    TAO_InputCDR &strm,
    AMH_ActivatorExtExceptionHolder *&new_object
  )
{
  ::CORBA::ValueBase *base = 0;
  ::CORBA::Boolean is_indirected = false;
  ::CORBA::Boolean is_null_object = false;
  ::CORBA::Boolean const retval =
    ::CORBA::ValueBase::_tao_unmarshal_pre (
        strm,
        base,
        AMH_ActivatorExtExceptionHolder::_tao_obv_static_repository_id (),
        is_null_object,
        is_indirected
      );
  
  ::CORBA::ValueBase_var owner (base);

  if (!retval)
    return false;
  
  if (is_null_object)
    return true;
  
  if (!is_indirected && !base->_tao_unmarshal_v (strm))
    return false;
  
  // Now base must point to the unmarshaled object.
  // Align the pointer to the right subobject.
  new_object = AMH_ActivatorExtExceptionHolder::_downcast (base);
  if (0 == new_object)
    return false;
  
  if (is_indirected)
    new_object->_add_ref ();
  
  owner._retn ();
  return true;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_ActivatorExtExceptionHolder::raise_kill_server (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_ActivatorExtExceptionHolder::raise_still_alive (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_ActivatorExtExceptionHolder::raise_sendc_kill_server (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_cs.cpp:421

void
ImplementationRepository::AMH_ActivatorExtExceptionHolder::raise_sendc_still_alive (void)
{
auto_ptr< ::CORBA::Exception> safety (this->exception);
this->exception->_raise ();
}


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::AMH_ActivatorExtResponseHandler.

ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMH_ActivatorExtResponseHandler>::duplicate (
    ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr p)
{
  return ImplementationRepository::AMH_ActivatorExtResponseHandler::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::AMH_ActivatorExtResponseHandler>::release (
    ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMH_ActivatorExtResponseHandler>::nil (void)
{
  return ImplementationRepository::AMH_ActivatorExtResponseHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::AMH_ActivatorExtResponseHandler>::marshal (
    const ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




ImplementationRepository::AMH_ActivatorExtResponseHandler::AMH_ActivatorExtResponseHandler (void)
{}

ImplementationRepository::AMH_ActivatorExtResponseHandler::~AMH_ActivatorExtResponseHandler (void)
{
}

void
ImplementationRepository::AMH_ActivatorExtResponseHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMH_ActivatorExtResponseHandler *_tao_tmp_pointer =
    static_cast<AMH_ActivatorExtResponseHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr
ImplementationRepository::AMH_ActivatorExtResponseHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_ActivatorExtResponseHandler::_duplicate (
      dynamic_cast<AMH_ActivatorExtResponseHandler_ptr> (_tao_objref));
}

ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr
ImplementationRepository::AMH_ActivatorExtResponseHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return AMH_ActivatorExtResponseHandler::_duplicate (
      dynamic_cast<AMH_ActivatorExtResponseHandler_ptr> (_tao_objref));
}

ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr
ImplementationRepository::AMH_ActivatorExtResponseHandler::_nil (void)
{
  return 0;
}

ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr
ImplementationRepository::AMH_ActivatorExtResponseHandler::_duplicate (AMH_ActivatorExtResponseHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::AMH_ActivatorExtResponseHandler::_tao_release (AMH_ActivatorExtResponseHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExtResponseHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AMH_ActivatorExtResponseHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* ImplementationRepository::AMH_ActivatorExtResponseHandler::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/AMH_ActivatorExtResponseHandler:1.0";
}

::CORBA::Boolean
ImplementationRepository::AMH_ActivatorExtResponseHandler::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMH_ActivatorExtResponseHandler (
    ::CORBA::tk_local_interface,
    "IDL:ImplementationRepository/AMH_ActivatorExtResponseHandler:1.0",
    "AMH_ActivatorExtResponseHandler");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMH_ActivatorExtResponseHandler =
    &_tao_tc_ImplementationRepository_AMH_ActivatorExtResponseHandler;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for ImplementationRepository::AMI_ActivatorExtHandler.

ImplementationRepository::AMI_ActivatorExtHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorExtHandler>::duplicate (
    ImplementationRepository::AMI_ActivatorExtHandler_ptr p)
{
  return ImplementationRepository::AMI_ActivatorExtHandler::_duplicate (p);
}

void
TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorExtHandler>::release (
    ImplementationRepository::AMI_ActivatorExtHandler_ptr p)
{
  ::CORBA::release (p);
}

ImplementationRepository::AMI_ActivatorExtHandler_ptr
TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorExtHandler>::nil (void)
{
  return ImplementationRepository::AMI_ActivatorExtHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<ImplementationRepository::AMI_ActivatorExtHandler>::marshal (
    const ImplementationRepository::AMI_ActivatorExtHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::AMI_ActivatorExtHandler::kill_server (
  ::CORBA::Boolean ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ami_return_val
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "kill_server",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

void
ImplementationRepository::AMI_ActivatorExtHandler::kill_server_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  ImplementationRepository::AMI_ActivatorExtHandler_var _tao_reply_handler_object =
    ImplementationRepository::AMI_ActivatorExtHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Boolean ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ::ACE_InputCDR::to_boolean (ami_return_val))
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->kill_server (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->kill_server_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::AMI_ActivatorExtHandler::kill_server_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "kill_server_excep",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::AMI_ActivatorExtHandler::still_alive (
  ::CORBA::Boolean ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ami_return_val
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "still_alive",
      11,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

void
ImplementationRepository::AMI_ActivatorExtHandler::still_alive_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  ImplementationRepository::AMI_ActivatorExtHandler_var _tao_reply_handler_object =
    ImplementationRepository::AMI_ActivatorExtHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::CORBA::Boolean ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ::ACE_InputCDR::to_boolean (ami_return_val))
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->still_alive (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->still_alive_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
ImplementationRepository::AMI_ActivatorExtHandler::still_alive_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "still_alive_excep",
      17,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

ImplementationRepository::AMI_ActivatorExtHandler::AMI_ActivatorExtHandler (void)
{
}

ImplementationRepository::AMI_ActivatorExtHandler::~AMI_ActivatorExtHandler (void)
{
}

void
ImplementationRepository::AMI_ActivatorExtHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_ActivatorExtHandler *_tao_tmp_pointer =
    static_cast<AMI_ActivatorExtHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

ImplementationRepository::AMI_ActivatorExtHandler_ptr
ImplementationRepository::AMI_ActivatorExtHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_ActivatorExtHandler>::narrow (
        _tao_objref,
        "IDL:ImplementationRepository/AMI_ActivatorExtHandler:1.0");
}

ImplementationRepository::AMI_ActivatorExtHandler_ptr
ImplementationRepository::AMI_ActivatorExtHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_ActivatorExtHandler>::unchecked_narrow (
        _tao_objref);
}

ImplementationRepository::AMI_ActivatorExtHandler_ptr
ImplementationRepository::AMI_ActivatorExtHandler::_nil (void)
{
  return 0;
}

ImplementationRepository::AMI_ActivatorExtHandler_ptr
ImplementationRepository::AMI_ActivatorExtHandler::_duplicate (AMI_ActivatorExtHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
ImplementationRepository::AMI_ActivatorExtHandler::_tao_release (AMI_ActivatorExtHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
ImplementationRepository::AMI_ActivatorExtHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AMI_ActivatorHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ImplementationRepository/AMI_ActivatorExtHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* ImplementationRepository::AMI_ActivatorExtHandler::_interface_repository_id (void) const
{
  return "IDL:ImplementationRepository/AMI_ActivatorExtHandler:1.0";
}

::CORBA::Boolean
ImplementationRepository::AMI_ActivatorExtHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_ImplementationRepository_AMI_ActivatorExtHandler (
    ::CORBA::tk_objref,
    "IDL:ImplementationRepository/AMI_ActivatorExtHandler:1.0",
    "AMI_ActivatorExtHandler");
  

namespace ImplementationRepository
{
  ::CORBA::TypeCode_ptr const _tc_AMI_ActivatorExtHandler =
    &_tao_tc_ImplementationRepository_AMI_ActivatorExtHandler;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_obv_cs.cpp:44

OBV_ImplementationRepository::AMH_ActivatorExceptionHolder::AMH_ActivatorExceptionHolder (void)
: require_truncation_ (false)
{}

OBV_ImplementationRepository::AMH_ActivatorExceptionHolder::~AMH_ActivatorExceptionHolder (void)
{}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_marshal__ImplementationRepository_AMH_ActivatorExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_unmarshal__ImplementationRepository_AMH_ActivatorExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\valuetype_obv_cs.cpp:44

OBV_ImplementationRepository::AMH_ActivatorExtExceptionHolder::AMH_ActivatorExtExceptionHolder (void)
: require_truncation_ (false)
{}

OBV_ImplementationRepository::AMH_ActivatorExtExceptionHolder::~AMH_ActivatorExtExceptionHolder (void)
{}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_marshal__ImplementationRepository_AMH_ActivatorExtExceptionHolder (TAO_OutputCDR &strm, TAO_ChunkInfo& ci) const
{
  return _tao_marshal_state (strm, ci);
}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_unmarshal__ImplementationRepository_AMH_ActivatorExtExceptionHolder (TAO_InputCDR &strm, TAO_ChunkInfo& ci)
{
  return _tao_unmarshal_state (strm, ci);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::Activator>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Activator_ptr _tao_elem)
  {
    Activator_ptr _tao_objptr =
      Activator::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Activator_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Activator>::insert (
        _tao_any,
        Activator::_tao_any_destructor,
        _tc_Activator,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Activator_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Activator>::extract (
          _tao_any,
          Activator::_tao_any_destructor,
          _tc_Activator,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::Activator_ptr _tao_elem)
{
  ImplementationRepository::Activator_ptr _tao_objptr =
    ImplementationRepository::Activator::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::Activator_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::Activator>::insert (
      _tao_any,
      ImplementationRepository::Activator::_tao_any_destructor,
      ImplementationRepository::_tc_Activator,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::Activator_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::Activator>::extract (
        _tao_any,
        ImplementationRepository::Activator::_tao_any_destructor,
        ImplementationRepository::_tc_Activator,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_ActivatorExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_ActivatorExceptionHolder *_tao_elem)
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      AMH_ActivatorExceptionHolder *_tao_copy =
        _tao_elem ?
          AMH_ActivatorExceptionHolder::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_ActivatorExceptionHolder **_tao_elem)
  {
    TAO::Any_Impl_T<AMH_ActivatorExceptionHolder>::insert (
        _tao_any,
        AMH_ActivatorExceptionHolder::_tao_any_destructor,
        _tc_AMH_ActivatorExceptionHolder,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_ActivatorExceptionHolder *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<AMH_ActivatorExceptionHolder>::extract (
          _tao_any,
          AMH_ActivatorExceptionHolder::_tao_any_destructor,
          _tc_AMH_ActivatorExceptionHolder,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    ImplementationRepository::AMH_ActivatorExceptionHolder *_tao_copy =
      _tao_elem ?
        ImplementationRepository::AMH_ActivatorExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMH_ActivatorExceptionHolder>::insert (
      _tao_any,
      ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_any_destructor,
      ImplementationRepository::_tc_AMH_ActivatorExceptionHolder,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorExceptionHolder *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMH_ActivatorExceptionHolder>::extract (
        _tao_any,
        ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_any_destructor,
        ImplementationRepository::_tc_AMH_ActivatorExceptionHolder,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_ActivatorResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_ActivatorResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_ActivatorResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_ActivatorResponseHandler_ptr _tao_elem)
  {
    AMH_ActivatorResponseHandler_ptr _tao_objptr =
      AMH_ActivatorResponseHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_ActivatorResponseHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMH_ActivatorResponseHandler>::insert (
        _tao_any,
        AMH_ActivatorResponseHandler::_tao_any_destructor,
        _tc_AMH_ActivatorResponseHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_ActivatorResponseHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMH_ActivatorResponseHandler>::extract (
          _tao_any,
          AMH_ActivatorResponseHandler::_tao_any_destructor,
          _tc_AMH_ActivatorResponseHandler,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorResponseHandler_ptr _tao_elem)
{
  ImplementationRepository::AMH_ActivatorResponseHandler_ptr _tao_objptr =
    ImplementationRepository::AMH_ActivatorResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMH_ActivatorResponseHandler>::insert (
      _tao_any,
      ImplementationRepository::AMH_ActivatorResponseHandler::_tao_any_destructor,
      ImplementationRepository::_tc_AMH_ActivatorResponseHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMH_ActivatorResponseHandler>::extract (
        _tao_any,
        ImplementationRepository::AMH_ActivatorResponseHandler::_tao_any_destructor,
        ImplementationRepository::_tc_AMH_ActivatorResponseHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMI_ActivatorHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_ActivatorHandler_ptr _tao_elem)
  {
    AMI_ActivatorHandler_ptr _tao_objptr =
      AMI_ActivatorHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_ActivatorHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMI_ActivatorHandler>::insert (
        _tao_any,
        AMI_ActivatorHandler::_tao_any_destructor,
        _tc_AMI_ActivatorHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMI_ActivatorHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMI_ActivatorHandler>::extract (
          _tao_any,
          AMI_ActivatorHandler::_tao_any_destructor,
          _tc_AMI_ActivatorHandler,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMI_ActivatorHandler_ptr _tao_elem)
{
  ImplementationRepository::AMI_ActivatorHandler_ptr _tao_objptr =
    ImplementationRepository::AMI_ActivatorHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMI_ActivatorHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMI_ActivatorHandler>::insert (
      _tao_any,
      ImplementationRepository::AMI_ActivatorHandler::_tao_any_destructor,
      ImplementationRepository::_tc_AMI_ActivatorHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMI_ActivatorHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMI_ActivatorHandler>::extract (
        _tao_any,
        ImplementationRepository::AMI_ActivatorHandler::_tao_any_destructor,
        ImplementationRepository::_tc_AMI_ActivatorHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::ActivatorExt>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ActivatorExt_ptr _tao_elem)
  {
    ActivatorExt_ptr _tao_objptr =
      ActivatorExt::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      ActivatorExt_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<ActivatorExt>::insert (
        _tao_any,
        ActivatorExt::_tao_any_destructor,
        _tc_ActivatorExt,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      ActivatorExt_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<ActivatorExt>::extract (
          _tao_any,
          ActivatorExt::_tao_any_destructor,
          _tc_ActivatorExt,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::ActivatorExt_ptr _tao_elem)
{
  ImplementationRepository::ActivatorExt_ptr _tao_objptr =
    ImplementationRepository::ActivatorExt::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::ActivatorExt_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::ActivatorExt>::insert (
      _tao_any,
      ImplementationRepository::ActivatorExt::_tao_any_destructor,
      ImplementationRepository::_tc_ActivatorExt,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::ActivatorExt_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::ActivatorExt>::extract (
        _tao_any,
        ImplementationRepository::ActivatorExt::_tao_any_destructor,
        ImplementationRepository::_tc_ActivatorExt,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\any_op_cs.cpp:45

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_ActivatorExtExceptionHolder>::to_value (
      ::CORBA::ValueBase *&_tao_elem) const
  {
    ::CORBA::add_ref (this->value_);
    _tao_elem = this->value_;
    return true;
  }
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_ActivatorExtExceptionHolder *_tao_elem)
  {
    #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
      AMH_ActivatorExtExceptionHolder *_tao_copy =
        _tao_elem ?
          AMH_ActivatorExtExceptionHolder::_downcast (_tao_elem->_copy_value ())
          : 0;
      _tao_any <<= &_tao_copy;
    #else
      ::CORBA::add_ref (_tao_elem);
      _tao_any <<= &_tao_elem;
    #endif
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_ActivatorExtExceptionHolder **_tao_elem)
  {
    TAO::Any_Impl_T<AMH_ActivatorExtExceptionHolder>::insert (
        _tao_any,
        AMH_ActivatorExtExceptionHolder::_tao_any_destructor,
        _tc_AMH_ActivatorExtExceptionHolder,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_ActivatorExtExceptionHolder *&_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<AMH_ActivatorExtExceptionHolder>::extract (
          _tao_any,
          AMH_ActivatorExtExceptionHolder::_tao_any_destructor,
          _tc_AMH_ActivatorExtExceptionHolder,
          _tao_elem
        );
  }

  
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorExtExceptionHolder *_tao_elem)
{
  #ifdef TAO_VALUETYPE_COPYING_ANY_INSERTION_USES_COPY_VALUE
    ImplementationRepository::AMH_ActivatorExtExceptionHolder *_tao_copy =
      _tao_elem ?
        ImplementationRepository::AMH_ActivatorExtExceptionHolder::_downcast (_tao_elem->_copy_value ())
        : 0;
    _tao_any <<= &_tao_copy;
  #else
    ::CORBA::add_ref (_tao_elem);
    _tao_any <<= &_tao_elem;
  #endif
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorExtExceptionHolder **_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMH_ActivatorExtExceptionHolder>::insert (
      _tao_any,
      ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_any_destructor,
      ImplementationRepository::_tc_AMH_ActivatorExtExceptionHolder,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorExtExceptionHolder *&_tao_elem
  )
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMH_ActivatorExtExceptionHolder>::extract (
        _tao_any,
        ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_any_destructor,
        ImplementationRepository::_tc_AMH_ActivatorExtExceptionHolder,
        _tao_elem
      );
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_ActivatorExtResponseHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_ActivatorExtResponseHandler>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }

  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMH_ActivatorExtResponseHandler>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_ActivatorExtResponseHandler_ptr _tao_elem)
  {
    AMH_ActivatorExtResponseHandler_ptr _tao_objptr =
      AMH_ActivatorExtResponseHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMH_ActivatorExtResponseHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMH_ActivatorExtResponseHandler>::insert (
        _tao_any,
        AMH_ActivatorExtResponseHandler::_tao_any_destructor,
        _tc_AMH_ActivatorExtResponseHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMH_ActivatorExtResponseHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMH_ActivatorExtResponseHandler>::extract (
          _tao_any,
          AMH_ActivatorExtResponseHandler::_tao_any_destructor,
          _tc_AMH_ActivatorExtResponseHandler,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr _tao_elem)
{
  ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr _tao_objptr =
    ImplementationRepository::AMH_ActivatorExtResponseHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMH_ActivatorExtResponseHandler>::insert (
      _tao_any,
      ImplementationRepository::AMH_ActivatorExtResponseHandler::_tao_any_destructor,
      ImplementationRepository::_tc_AMH_ActivatorExtResponseHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMH_ActivatorExtResponseHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMH_ActivatorExtResponseHandler>::extract (
        _tao_any,
        ImplementationRepository::AMH_ActivatorExtResponseHandler::_tao_any_destructor,
        ImplementationRepository::_tc_AMH_ActivatorExtResponseHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<ImplementationRepository::AMI_ActivatorExtHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace ImplementationRepository
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_ActivatorExtHandler_ptr _tao_elem)
  {
    AMI_ActivatorExtHandler_ptr _tao_objptr =
      AMI_ActivatorExtHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_ActivatorExtHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMI_ActivatorExtHandler>::insert (
        _tao_any,
        AMI_ActivatorExtHandler::_tao_any_destructor,
        _tc_AMI_ActivatorExtHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMI_ActivatorExtHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMI_ActivatorExtHandler>::extract (
          _tao_any,
          AMI_ActivatorExtHandler::_tao_any_destructor,
          _tc_AMI_ActivatorExtHandler,
          _tao_elem);
  }
}

#else


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMI_ActivatorExtHandler_ptr _tao_elem)
{
  ImplementationRepository::AMI_ActivatorExtHandler_ptr _tao_objptr =
    ImplementationRepository::AMI_ActivatorExtHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    ImplementationRepository::AMI_ActivatorExtHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<ImplementationRepository::AMI_ActivatorExtHandler>::insert (
      _tao_any,
      ImplementationRepository::AMI_ActivatorExtHandler::_tao_any_destructor,
      ImplementationRepository::_tc_AMI_ActivatorExtHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    ImplementationRepository::AMI_ActivatorExtHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<ImplementationRepository::AMI_ActivatorExtHandler>::extract (
        _tao_any,
        ImplementationRepository::AMI_ActivatorExtHandler::_tao_any_destructor,
        ImplementationRepository::_tc_AMI_ActivatorExtHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:51


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::Activator_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::Activator_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ImplementationRepository::Activator RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_valuetype.cpp:512

void
CORBA::add_ref (ImplementationRepository::AMH_ActivatorExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (ImplementationRepository::AMH_ActivatorExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\cdr_op_cs.cpp:60



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::AMH_ActivatorExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&ImplementationRepository::AMH_ActivatorExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::AMH_ActivatorExceptionHolder *&_tao_valuetype)
{
  return ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\marshal_cs.cpp:33

::CORBA::Boolean
OBV_ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_ActivatorExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

void
OBV_ImplementationRepository::AMH_ActivatorExceptionHolder::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:51


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::AMI_ActivatorHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::AMI_ActivatorHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ImplementationRepository::AMI_ActivatorHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:51


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::ActivatorExt_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::ActivatorExt_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ImplementationRepository::ActivatorExt RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_valuetype.cpp:512

void
CORBA::add_ref (ImplementationRepository::AMH_ActivatorExtExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_add_ref ();
    }
}

void
CORBA::remove_ref (ImplementationRepository::AMH_ActivatorExtExceptionHolder * vt)
{
  if (vt != 0)
    {
      vt->_remove_ref ();
    }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\cdr_op_cs.cpp:60



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean
operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::AMH_ActivatorExtExceptionHolder *_tao_valuetype)
{
  return
    ::CORBA::ValueBase::_tao_marshal (
        strm,
        _tao_valuetype,
        reinterpret_cast<ptrdiff_t> (&ImplementationRepository::AMH_ActivatorExtExceptionHolder::_downcast));
}

::CORBA::Boolean
operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::AMH_ActivatorExtExceptionHolder *&_tao_valuetype)
{
  return ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_unmarshal (strm, _tao_valuetype);
}


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_valuetype\marshal_cs.cpp:33

::CORBA::Boolean
OBV_ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_marshal_state (TAO_OutputCDR &, TAO_ChunkInfo&) const
{
  return true;
}

::CORBA::Boolean
OBV_ImplementationRepository::AMH_ActivatorExtExceptionHolder::_tao_unmarshal_state (TAO_InputCDR &, TAO_ChunkInfo&)
{
  return true;
}

void
OBV_ImplementationRepository::AMH_ActivatorExtExceptionHolder::truncation_hook (void)
{
  this->require_truncation_ = true;
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:51


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ImplementationRepository::AMI_ActivatorExtHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ImplementationRepository::AMI_ActivatorExtHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::ImplementationRepository::AMI_ActivatorExtHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL





TAO_END_VERSIONED_NAMESPACE_DECL


