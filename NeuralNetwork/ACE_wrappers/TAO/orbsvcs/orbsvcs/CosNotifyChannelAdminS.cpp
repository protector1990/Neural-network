// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:635

#ifndef _TAO_IDL_COSNOTIFYCHANNELADMINS_VCVCLO_CPP_
#define _TAO_IDL_COSNOTIFYCHANNELADMINS_VCVCLO_CPP_


#include "CosNotifyChannelAdminS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_ProxyConsumer_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_ProxyConsumer_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_ProxyConsumer_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41,  0, 41, 30, 41, 41,
      0,  0, 41,  5, 41, 41, 41, 41, 41, 41,
     10,  5, 41, 41,  0,  0, 15, 41,  5, 41,
     41, 41, 41, 41, 41, 41, 41, 41,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_ProxyConsumer_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 17,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 25,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 40,
      HASH_VALUE_RANGE = 34,
      DUPLICATES = 0,
      WORDLIST_SIZE = 24
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"",0,0},{"",0,0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyType_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"",0,0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"",0,0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"",0,0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyAdmin_skel, 0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxyConsumer::validate_event_qos_skel, 0},
      {"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"",0,0},
      {"obtain_subscription_types", &POA_CosNotifyChannelAdmin::ProxyConsumer::obtain_subscription_types_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_ProxyConsumer_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_ProxyConsumer_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::ProxyConsumer::ProxyConsumer (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_ProxyConsumer_optable;
}

POA_CosNotifyChannelAdmin::ProxyConsumer::ProxyConsumer (const ProxyConsumer& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs)
{
}

POA_CosNotifyChannelAdmin::ProxyConsumer::~ProxyConsumer (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyType_ProxyConsumer
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyType_ProxyConsumer (
      POA_CosNotifyChannelAdmin::ProxyConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyType ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxyConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyType_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ProxyConsumer * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxyConsumer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyType_ProxyConsumer command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyAdmin_ProxyConsumer
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyAdmin_ProxyConsumer (
      POA_CosNotifyChannelAdmin::ProxyConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::SupplierAdmin> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyAdmin ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxyConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyAdmin_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ProxyConsumer * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxyConsumer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyAdmin_ProxyConsumer command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class obtain_subscription_types_ProxyConsumer
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_subscription_types_ProxyConsumer (
      POA_CosNotifyChannelAdmin::ProxyConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotification::EventTypeSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotification::EventTypeSeq> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ObtainInfoMode>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ObtainInfoMode> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->obtain_subscription_types (
          arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxyConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxyConsumer::obtain_subscription_types_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotification::EventTypeSeq>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ObtainInfoMode>::in_arg_val _tao_mode;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_mode
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::ProxyConsumer * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxyConsumer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  obtain_subscription_types_ProxyConsumer command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class validate_event_qos_ProxyConsumer
    : public TAO::Upcall_Command
  {
  public:
    inline validate_event_qos_ProxyConsumer (
      POA_CosNotifyChannelAdmin::ProxyConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::QoSProperties> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNotification::NamedPropertyRangeSeq>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosNotification::NamedPropertyRangeSeq> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->validate_event_qos (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxyConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxyConsumer::validate_event_qos_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotification::_tc_UnsupportedQoS
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_required_qos;
  TAO::SArg_Traits< ::CosNotification::NamedPropertyRangeSeq>::out_arg_val _tao_available_qos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_required_qos,
      &_tao_available_qos
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyChannelAdmin::ProxyConsumer * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxyConsumer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  validate_event_qos_ProxyConsumer command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::ProxyConsumer::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::ProxyConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::ProxyConsumer::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::ProxyConsumer *
POA_CosNotifyChannelAdmin::ProxyConsumer::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::ProxyConsumer STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_ProxySupplier_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_ProxySupplier_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_ProxySupplier_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46,  0, 46, 20, 46, 46,
      0, 30, 46,  1, 46, 46, 46, 46, 46, 46,
      5, 25, 46, 46,  0,  0, 25, 46, 10, 46,
     46, 46, 46, 46, 46, 46, 46, 46,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_ProxySupplier_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 21,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 20,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 45,
      HASH_VALUE_RANGE = 39,
      DUPLICATES = 4,
      WORDLIST_SIZE = 28
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyAdmin_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"_get_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_priority_filter_skel, 0},
      {"_set_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_lifetime_filter_skel, 0},
      {"_get_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_lifetime_filter_skel, 0},
      {"_set_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_priority_filter_skel, 0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxySupplier::validate_event_qos_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyType_skel, 0},
      {"obtain_offered_types", &POA_CosNotifyChannelAdmin::ProxySupplier::obtain_offered_types_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,   8, -15,  -4,   9,  -1,  10, 
       11,  -1,  12,  13,  14,  -1, -56,  -1,  19,  -1,  -1,  20,  -1,  -1, 
       21,  -1,  22,  -1,  -1,  -1,  -1,  23,  -1,  -1,  24,  -1,  25,  26, 
       -1,  -1,  -1,  27, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_ProxySupplier_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_ProxySupplier_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::ProxySupplier::ProxySupplier (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_ProxySupplier_optable;
}

POA_CosNotifyChannelAdmin::ProxySupplier::ProxySupplier (const ProxySupplier& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs)
{
}

POA_CosNotifyChannelAdmin::ProxySupplier::~ProxySupplier (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyType_ProxySupplier
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyType_ProxySupplier (
      POA_CosNotifyChannelAdmin::ProxySupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyType>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyType> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyType ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxySupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyType_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyType>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ProxySupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxySupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyType_ProxySupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyAdmin_ProxySupplier
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyAdmin_ProxySupplier (
      POA_CosNotifyChannelAdmin::ProxySupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ConsumerAdmin> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyAdmin ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxySupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyAdmin_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ProxySupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxySupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyAdmin_ProxySupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_priority_filter_ProxySupplier
    : public TAO::Upcall_Command
  {
  public:
    inline _get_priority_filter_ProxySupplier (
      POA_CosNotifyChannelAdmin::ProxySupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::MappingFilter> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->priority_filter ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxySupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxySupplier::_get_priority_filter_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ProxySupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxySupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_priority_filter_ProxySupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _set_priority_filter_ProxySupplier
    : public TAO::Upcall_Command
  {
  public:
    inline _set_priority_filter_ProxySupplier (
      POA_CosNotifyChannelAdmin::ProxySupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::MappingFilter> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->priority_filter (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxySupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxySupplier::_set_priority_filter_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_val _tao_priority_filter;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_priority_filter
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::ProxySupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxySupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_priority_filter_ProxySupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_lifetime_filter_ProxySupplier
    : public TAO::Upcall_Command
  {
  public:
    inline _get_lifetime_filter_ProxySupplier (
      POA_CosNotifyChannelAdmin::ProxySupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::MappingFilter> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->lifetime_filter ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxySupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxySupplier::_get_lifetime_filter_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ProxySupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxySupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_lifetime_filter_ProxySupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _set_lifetime_filter_ProxySupplier
    : public TAO::Upcall_Command
  {
  public:
    inline _set_lifetime_filter_ProxySupplier (
      POA_CosNotifyChannelAdmin::ProxySupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::MappingFilter> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->lifetime_filter (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxySupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxySupplier::_set_lifetime_filter_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_val _tao_lifetime_filter;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_lifetime_filter
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::ProxySupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxySupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_lifetime_filter_ProxySupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class obtain_offered_types_ProxySupplier
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_offered_types_ProxySupplier (
      POA_CosNotifyChannelAdmin::ProxySupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotification::EventTypeSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotification::EventTypeSeq> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ObtainInfoMode>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ObtainInfoMode> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->obtain_offered_types (
          arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxySupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxySupplier::obtain_offered_types_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotification::EventTypeSeq>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ObtainInfoMode>::in_arg_val _tao_mode;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_mode
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::ProxySupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxySupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  obtain_offered_types_ProxySupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class validate_event_qos_ProxySupplier
    : public TAO::Upcall_Command
  {
  public:
    inline validate_event_qos_ProxySupplier (
      POA_CosNotifyChannelAdmin::ProxySupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::QoSProperties> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNotification::NamedPropertyRangeSeq>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosNotification::NamedPropertyRangeSeq> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->validate_event_qos (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxySupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxySupplier::validate_event_qos_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotification::_tc_UnsupportedQoS
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_required_qos;
  TAO::SArg_Traits< ::CosNotification::NamedPropertyRangeSeq>::out_arg_val _tao_available_qos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_required_qos,
      &_tao_available_qos
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyChannelAdmin::ProxySupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxySupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  validate_event_qos_ProxySupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::ProxySupplier::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::ProxySupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::ProxySupplier::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::ProxySupplier *
POA_CosNotifyChannelAdmin::ProxySupplier::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::ProxySupplier STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_ProxyPushConsumer_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_ProxyPushConsumer_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_ProxyPushConsumer_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
     41, 41, 41, 41, 41,  0, 41, 30, 41,  0,
      0,  0, 41,  5,  0, 41, 41, 41, 41, 41,
     15,  5,  0, 41,  0,  0, 13, 41, 10, 41,
     41, 41, 41, 41, 41, 41, 41, 41,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_ProxyPushConsumer_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 21,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 25,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 40,
      HASH_VALUE_RANGE = 37,
      DUPLICATES = 0,
      WORDLIST_SIZE = 25
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"push", &POA_CosEventComm::PushConsumer::push_skel, 0},
      {"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"",0,0},{"",0,0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyType_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"",0,0},
      {"offer_change", &POA_CosNotifyComm::NotifyPublish::offer_change_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"",0,0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"",0,0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"disconnect_push_consumer", &POA_CosEventComm::PushConsumer::disconnect_push_consumer_skel, 0},
      {"connect_any_push_supplier", &POA_CosNotifyChannelAdmin::ProxyPushConsumer::connect_any_push_supplier_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyAdmin_skel, 0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxyConsumer::validate_event_qos_skel, 0},
      {"",0,0},
      {"obtain_subscription_types", &POA_CosNotifyChannelAdmin::ProxyConsumer::obtain_subscription_types_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_ProxyPushConsumer_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_ProxyPushConsumer_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::ProxyPushConsumer::ProxyPushConsumer (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_ProxyPushConsumer_optable;
}

POA_CosNotifyChannelAdmin::ProxyPushConsumer::ProxyPushConsumer (const ProxyPushConsumer& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosNotifyChannelAdmin::ProxyConsumer (rhs),
    POA_CosNotifyComm::NotifyPublish (rhs),
    POA_CosEventComm::PushConsumer (rhs),
    POA_CosNotifyComm::PushConsumer (rhs)
{
}

POA_CosNotifyChannelAdmin::ProxyPushConsumer::~ProxyPushConsumer (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class connect_any_push_supplier_ProxyPushConsumer
    : public TAO::Upcall_Command
  {
  public:
    inline connect_any_push_supplier_ProxyPushConsumer (
      POA_CosNotifyChannelAdmin::ProxyPushConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosEventComm::PushSupplier>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosEventComm::PushSupplier> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->connect_any_push_supplier (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxyPushConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxyPushConsumer::connect_any_push_supplier_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosEventChannelAdmin::_tc_AlreadyConnected
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosEventComm::PushSupplier>::in_arg_val _tao_push_supplier;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_push_supplier
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::ProxyPushConsumer * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxyPushConsumer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  connect_any_push_supplier_ProxyPushConsumer command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::ProxyPushConsumer::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/PushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::ProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushConsumer:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::ProxyPushConsumer::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::ProxyPushConsumer *
POA_CosNotifyChannelAdmin::ProxyPushConsumer::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::ProxyPushConsumer STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_StructuredProxyPushConsumer_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_StructuredProxyPushConsumer_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_StructuredProxyPushConsumer_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46,  0, 46, 28, 46,  5,
     10,  0, 46, 25, 46, 46, 46, 46, 46, 46,
      0,  5,  0, 46,  0,  0, 10, 46, 10, 46,
     46, 46, 46, 46, 46, 46, 46, 46,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_StructuredProxyPushConsumer_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 21,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 35,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 45,
      HASH_VALUE_RANGE = 39,
      DUPLICATES = 0,
      WORDLIST_SIZE = 28
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"",0,0},{"",0,0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyType_skel, 0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyAdmin_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"offer_change", &POA_CosNotifyComm::NotifyPublish::offer_change_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxyConsumer::validate_event_qos_skel, 0},
      {"",0,0},
      {"obtain_subscription_types", &POA_CosNotifyChannelAdmin::ProxyConsumer::obtain_subscription_types_skel, 0},
      {"push_structured_event", &POA_CosNotifyComm::StructuredPushConsumer::push_structured_event_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"",0,0},
      {"connect_structured_push_supplier", &POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer::connect_structured_push_supplier_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"",0,0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"disconnect_structured_push_consumer", &POA_CosNotifyComm::StructuredPushConsumer::disconnect_structured_push_consumer_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_StructuredProxyPushConsumer_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_StructuredProxyPushConsumer_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer::StructuredProxyPushConsumer (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_StructuredProxyPushConsumer_optable;
}

POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer::StructuredProxyPushConsumer (const StructuredProxyPushConsumer& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosNotifyChannelAdmin::ProxyConsumer (rhs),
    POA_CosNotifyComm::NotifyPublish (rhs),
    POA_CosNotifyComm::StructuredPushConsumer (rhs)
{
}

POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer::~StructuredProxyPushConsumer (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class connect_structured_push_supplier_StructuredProxyPushConsumer
    : public TAO::Upcall_Command
  {
  public:
    inline connect_structured_push_supplier_StructuredProxyPushConsumer (
      POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyComm::StructuredPushSupplier>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyComm::StructuredPushSupplier> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->connect_structured_push_supplier (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer::connect_structured_push_supplier_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosEventChannelAdmin::_tc_AlreadyConnected
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyComm::StructuredPushSupplier>::in_arg_val _tao_push_supplier;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_push_supplier
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  connect_structured_push_supplier_StructuredProxyPushConsumer command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/StructuredPushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushConsumer:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::StructuredProxyPushConsumer *
POA_CosNotifyChannelAdmin::StructuredProxyPushConsumer::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::StructuredProxyPushConsumer STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_SequenceProxyPushConsumer_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_SequenceProxyPushConsumer_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_SequenceProxyPushConsumer_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46,  0, 46, 25, 46, 15,
      0,  0, 46,  5, 46, 46, 46, 46, 46, 46,
     20, 15,  0, 46,  0,  0, 15, 46,  5, 46,
     46, 46, 46, 46, 46, 46, 46, 46,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_SequenceProxyPushConsumer_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 21,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 33,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 45,
      HASH_VALUE_RANGE = 39,
      DUPLICATES = 0,
      WORDLIST_SIZE = 28
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"",0,0},{"",0,0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyType_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"",0,0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"",0,0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"",0,0},
      {"push_structured_events", &POA_CosNotifyComm::SequencePushConsumer::push_structured_events_skel, 0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxyConsumer::validate_event_qos_skel, 0},
      {"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},
      {"offer_change", &POA_CosNotifyComm::NotifyPublish::offer_change_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxyConsumer::_get_MyAdmin_skel, 0},
      {"disconnect_sequence_push_consumer", &POA_CosNotifyComm::SequencePushConsumer::disconnect_sequence_push_consumer_skel, 0},
      {"",0,0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"obtain_subscription_types", &POA_CosNotifyChannelAdmin::ProxyConsumer::obtain_subscription_types_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"connect_sequence_push_supplier", &POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer::connect_sequence_push_supplier_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_SequenceProxyPushConsumer_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_SequenceProxyPushConsumer_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer::SequenceProxyPushConsumer (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_SequenceProxyPushConsumer_optable;
}

POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer::SequenceProxyPushConsumer (const SequenceProxyPushConsumer& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosNotifyChannelAdmin::ProxyConsumer (rhs),
    POA_CosNotifyComm::NotifyPublish (rhs),
    POA_CosNotifyComm::SequencePushConsumer (rhs)
{
}

POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer::~SequenceProxyPushConsumer (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class connect_sequence_push_supplier_SequenceProxyPushConsumer
    : public TAO::Upcall_Command
  {
  public:
    inline connect_sequence_push_supplier_SequenceProxyPushConsumer (
      POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyComm::SequencePushSupplier>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyComm::SequencePushSupplier> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->connect_sequence_push_supplier (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer::connect_sequence_push_supplier_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosEventChannelAdmin::_tc_AlreadyConnected
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyComm::SequencePushSupplier>::in_arg_val _tao_push_supplier;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_push_supplier
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  connect_sequence_push_supplier_SequenceProxyPushConsumer command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/SequencePushConsumer:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushConsumer:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::SequenceProxyPushConsumer *
POA_CosNotifyChannelAdmin::SequenceProxyPushConsumer::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::SequenceProxyPushConsumer STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_ProxyPushSupplier_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_ProxyPushSupplier_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_ProxyPushSupplier_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51,  0, 51, 30, 51, 20,
      0,  0, 51, 15, 51, 51, 51, 51, 51, 51,
     15, 30, 51, 51,  0,  0, 13, 51, 25, 51,
     51, 51, 51, 51, 51, 51, 51, 51,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_ProxyPushSupplier_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 26,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 25,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 50,
      HASH_VALUE_RANGE = 44,
      DUPLICATES = 4,
      WORDLIST_SIZE = 33
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyType_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"subscription_change", &POA_CosNotifyComm::NotifySubscribe::subscription_change_skel, 0},
      {"_get_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_priority_filter_skel, 0},
      {"_set_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_lifetime_filter_skel, 0},
      {"_get_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_lifetime_filter_skel, 0},
      {"_set_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_priority_filter_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"disconnect_push_supplier", &POA_CosEventComm::PushSupplier::disconnect_push_supplier_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyAdmin_skel, 0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"resume_connection", &POA_CosNotifyChannelAdmin::ProxyPushSupplier::resume_connection_skel, 0},
      {"suspend_connection", &POA_CosNotifyChannelAdmin::ProxyPushSupplier::suspend_connection_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxySupplier::validate_event_qos_skel, 0},
      {"connect_any_push_consumer", &POA_CosNotifyChannelAdmin::ProxyPushSupplier::connect_any_push_consumer_skel, 0},
      {"obtain_offered_types", &POA_CosNotifyChannelAdmin::ProxySupplier::obtain_offered_types_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   8,   9,  -1,  10, 
       11,  -1, -14,  -4,  12,  13, -54,  -1,  18,  19,  20,  21,  22,  23, 
       -1,  -1,  24,  -1,  25,  26,  -1,  27,  -1,  28,  -1,  -1,  29,  -1, 
       -1,  30,  -1,  31,  -1,  -1,  -1,  -1,  32, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_ProxyPushSupplier_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_ProxyPushSupplier_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::ProxyPushSupplier::ProxyPushSupplier (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_ProxyPushSupplier_optable;
}

POA_CosNotifyChannelAdmin::ProxyPushSupplier::ProxyPushSupplier (const ProxyPushSupplier& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosNotifyChannelAdmin::ProxySupplier (rhs),
    POA_CosNotifyComm::NotifySubscribe (rhs),
    POA_CosEventComm::PushSupplier (rhs),
    POA_CosNotifyComm::PushSupplier (rhs)
{
}

POA_CosNotifyChannelAdmin::ProxyPushSupplier::~ProxyPushSupplier (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class connect_any_push_consumer_ProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline connect_any_push_consumer_ProxyPushSupplier (
      POA_CosNotifyChannelAdmin::ProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosEventComm::PushConsumer>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosEventComm::PushConsumer> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->connect_any_push_consumer (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxyPushSupplier::connect_any_push_consumer_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosEventChannelAdmin::_tc_AlreadyConnected,
      CosEventChannelAdmin::_tc_TypeError
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosEventComm::PushConsumer>::in_arg_val _tao_push_consumer;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_push_consumer
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::ProxyPushSupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  connect_any_push_consumer_ProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class suspend_connection_ProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline suspend_connection_ProxyPushSupplier (
      POA_CosNotifyChannelAdmin::ProxyPushSupplier * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->suspend_connection ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxyPushSupplier * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxyPushSupplier::suspend_connection_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive,
      CosNotifyChannelAdmin::_tc_NotConnected
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ProxyPushSupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  suspend_connection_ProxyPushSupplier command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class resume_connection_ProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline resume_connection_ProxyPushSupplier (
      POA_CosNotifyChannelAdmin::ProxyPushSupplier * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->resume_connection ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ProxyPushSupplier * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ProxyPushSupplier::resume_connection_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive,
      CosNotifyChannelAdmin::_tc_NotConnected
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ProxyPushSupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  resume_connection_ProxyPushSupplier command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::ProxyPushSupplier::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::ProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::ProxyPushSupplier::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::ProxyPushSupplier *
POA_CosNotifyChannelAdmin::ProxyPushSupplier::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::ProxyPushSupplier STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_StructuredProxyPushSupplier_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_StructuredProxyPushSupplier_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_StructuredProxyPushSupplier_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
     46, 46, 46, 46, 46,  0, 46, 18, 46, 10,
     10,  0, 46, 15, 46, 46, 46, 46, 46, 46,
     15, 20, 46, 46,  0,  0, 25, 46, 25, 46,
     46, 46, 46, 46, 46, 46, 46, 46,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_StructuredProxyPushSupplier_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 26,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 35,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 45,
      HASH_VALUE_RANGE = 39,
      DUPLICATES = 4,
      WORDLIST_SIZE = 33
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyType_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"subscription_change", &POA_CosNotifyComm::NotifySubscribe::subscription_change_skel, 0},
      {"_get_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_priority_filter_skel, 0},
      {"_set_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_lifetime_filter_skel, 0},
      {"_get_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_lifetime_filter_skel, 0},
      {"_set_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_priority_filter_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyAdmin_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"resume_connection", &POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::resume_connection_skel, 0},
      {"suspend_connection", &POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::suspend_connection_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"obtain_offered_types", &POA_CosNotifyChannelAdmin::ProxySupplier::obtain_offered_types_skel, 0},
      {"connect_structured_push_consumer", &POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::connect_structured_push_consumer_skel, 0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxySupplier::validate_event_qos_skel, 0},
      {"disconnect_structured_push_supplier", &POA_CosNotifyComm::StructuredPushSupplier::disconnect_structured_push_supplier_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   8,   9,  -1,  10, 
       -1,  -1, -13,  -4,  11,  12, -49,  -1,  17,  18,  19,  20,  -1,  21, 
       22,  -1,  23,  -1,  24,  25,  -1,  26,  -1,  27,  28,  -1,  29,  -1, 
       30,  31,  -1,  32, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_StructuredProxyPushSupplier_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_StructuredProxyPushSupplier_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::StructuredProxyPushSupplier (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_StructuredProxyPushSupplier_optable;
}

POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::StructuredProxyPushSupplier (const StructuredProxyPushSupplier& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosNotifyChannelAdmin::ProxySupplier (rhs),
    POA_CosNotifyComm::NotifySubscribe (rhs),
    POA_CosNotifyComm::StructuredPushSupplier (rhs)
{
}

POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::~StructuredProxyPushSupplier (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class connect_structured_push_consumer_StructuredProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline connect_structured_push_consumer_StructuredProxyPushSupplier (
      POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyComm::StructuredPushConsumer>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyComm::StructuredPushConsumer> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->connect_structured_push_consumer (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::connect_structured_push_consumer_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosEventChannelAdmin::_tc_AlreadyConnected,
      CosEventChannelAdmin::_tc_TypeError
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyComm::StructuredPushConsumer>::in_arg_val _tao_push_consumer;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_push_consumer
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  connect_structured_push_consumer_StructuredProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class suspend_connection_StructuredProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline suspend_connection_StructuredProxyPushSupplier (
      POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->suspend_connection ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::suspend_connection_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive,
      CosNotifyChannelAdmin::_tc_NotConnected
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  suspend_connection_StructuredProxyPushSupplier command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class resume_connection_StructuredProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline resume_connection_StructuredProxyPushSupplier (
      POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->resume_connection ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::resume_connection_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive,
      CosNotifyChannelAdmin::_tc_NotConnected
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  resume_connection_StructuredProxyPushSupplier command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::StructuredProxyPushSupplier *
POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::StructuredProxyPushSupplier STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_SequenceProxyPushSupplier_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_SequenceProxyPushSupplier_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_SequenceProxyPushSupplier_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51,  0, 51, 30, 51, 15,
     10,  0, 51, 15, 51, 51, 51, 51, 51, 51,
     15, 30, 51, 51,  0,  0, 13, 51, 30, 51,
     51, 51, 51, 51, 51, 51, 51, 51,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_SequenceProxyPushSupplier_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 26,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 33,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 50,
      HASH_VALUE_RANGE = 44,
      DUPLICATES = 4,
      WORDLIST_SIZE = 33
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyType_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"subscription_change", &POA_CosNotifyComm::NotifySubscribe::subscription_change_skel, 0},
      {"_get_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_priority_filter_skel, 0},
      {"_set_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_lifetime_filter_skel, 0},
      {"_get_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_lifetime_filter_skel, 0},
      {"_set_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_priority_filter_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyAdmin_skel, 0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"resume_connection", &POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::resume_connection_skel, 0},
      {"suspend_connection", &POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::suspend_connection_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"disconnect_sequence_push_supplier", &POA_CosNotifyComm::SequencePushSupplier::disconnect_sequence_push_supplier_skel, 0},
      {"connect_sequence_push_consumer", &POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::connect_sequence_push_consumer_skel, 0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxySupplier::validate_event_qos_skel, 0},
      {"obtain_offered_types", &POA_CosNotifyChannelAdmin::ProxySupplier::obtain_offered_types_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   8,   9,  -1,  10, 
       -1,  -1, -13,  -4,  11,  12, -54,  -1,  17,  18,  19,  20,  21,  22, 
       -1,  -1,  23,  -1,  24,  25,  -1,  26,  -1,  -1,  -1,  -1,  27,  -1, 
       28,  29,  -1,  30,  -1,  -1,  31,  -1,  32, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_SequenceProxyPushSupplier_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_SequenceProxyPushSupplier_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::SequenceProxyPushSupplier (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_SequenceProxyPushSupplier_optable;
}

POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::SequenceProxyPushSupplier (const SequenceProxyPushSupplier& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosNotifyChannelAdmin::ProxySupplier (rhs),
    POA_CosNotifyComm::NotifySubscribe (rhs),
    POA_CosNotifyComm::SequencePushSupplier (rhs)
{
}

POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::~SequenceProxyPushSupplier (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class connect_sequence_push_consumer_SequenceProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline connect_sequence_push_consumer_SequenceProxyPushSupplier (
      POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyComm::SequencePushConsumer>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyComm::SequencePushConsumer> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->connect_sequence_push_consumer (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::connect_sequence_push_consumer_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosEventChannelAdmin::_tc_AlreadyConnected,
      CosEventChannelAdmin::_tc_TypeError
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyComm::SequencePushConsumer>::in_arg_val _tao_push_consumer;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_push_consumer
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  connect_sequence_push_consumer_SequenceProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class suspend_connection_SequenceProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline suspend_connection_SequenceProxyPushSupplier (
      POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->suspend_connection ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::suspend_connection_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyInactive,
      CosNotifyChannelAdmin::_tc_NotConnected
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  suspend_connection_SequenceProxyPushSupplier command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class resume_connection_SequenceProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline resume_connection_SequenceProxyPushSupplier (
      POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->resume_connection ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::resume_connection_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_ConnectionAlreadyActive,
      CosNotifyChannelAdmin::_tc_NotConnected
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  resume_connection_SequenceProxyPushSupplier command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/SequencePushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/SequenceProxyPushSupplier:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::SequenceProxyPushSupplier *
POA_CosNotifyChannelAdmin::SequenceProxyPushSupplier::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::SequenceProxyPushSupplier STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_ConsumerAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_ConsumerAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_ConsumerAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
     54, 54, 54, 54, 54, 54, 54, 54,  0, 54,
     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
     54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
     54, 54, 54, 54, 54,  0, 54,  1, 54, 54,
      0, 13, 54, 20, 54, 54, 54, 54, 10, 54,
     54, 20, 54, 54,  0,  0, 15, 54,  0, 54,
     54, 10, 54, 54, 54, 54, 54, 54,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_ConsumerAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 29,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 33,
      MIN_HASH_VALUE = 6,
      MAX_HASH_VALUE = 53,
      HASH_VALUE_RANGE = 48,
      DUPLICATES = 7,
      WORDLIST_SIZE = 35
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"_get_MyID", &POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_MyID_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_get_MyOperator", &POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_MyOperator_skel, 0},
      {"destroy", &POA_CosNotifyChannelAdmin::ConsumerAdmin::destroy_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"_get_pull_suppliers", &POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_pull_suppliers_skel, 0},
      {"_get_push_suppliers", &POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_push_suppliers_skel, 0},
      {"_get_priority_filter", &POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_priority_filter_skel, 0},
      {"_set_lifetime_filter", &POA_CosNotifyChannelAdmin::ConsumerAdmin::_set_lifetime_filter_skel, 0},
      {"_get_lifetime_filter", &POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_lifetime_filter_skel, 0},
      {"_set_priority_filter", &POA_CosNotifyChannelAdmin::ConsumerAdmin::_set_priority_filter_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyChannel", &POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_MyChannel_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"subscription_change", &POA_CosNotifyComm::NotifySubscribe::subscription_change_skel, 0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"get_proxy_supplier", &POA_CosNotifyChannelAdmin::ConsumerAdmin::get_proxy_supplier_skel, 0},
      {"obtain_push_supplier", &POA_CosEventChannelAdmin::ConsumerAdmin::obtain_push_supplier_skel, 0},
      {"obtain_pull_supplier", &POA_CosEventChannelAdmin::ConsumerAdmin::obtain_pull_supplier_skel, 0},
      {"obtain_notification_pull_supplier", &POA_CosNotifyChannelAdmin::ConsumerAdmin::obtain_notification_pull_supplier_skel, 0},
      {"obtain_notification_push_supplier", &POA_CosNotifyChannelAdmin::ConsumerAdmin::obtain_notification_push_supplier_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1, -16,  -2, -18,  -4,   6,   7,  -1,   8,  -1,   9,  10,  11, 
       12,  13,  -1,  14,  15, -70, -69,  -1,  -1,  22,  23,  24,  -1,  25, 
       26,  -1,  27,  -1,  28,  -1,  -1,  29, -31,  -2,  30,  -1, -57,  -1, 
       -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -33,  -2, -55, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_ConsumerAdmin_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_ConsumerAdmin_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::ConsumerAdmin::ConsumerAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_ConsumerAdmin_optable;
}

POA_CosNotifyChannelAdmin::ConsumerAdmin::ConsumerAdmin (const ConsumerAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyComm::NotifySubscribe (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosEventChannelAdmin::ConsumerAdmin (rhs)
{
}

POA_CosNotifyChannelAdmin::ConsumerAdmin::~ConsumerAdmin (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyID_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyID_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyID ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_MyID_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyID_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyChannel_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyChannel_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::EventChannel> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyChannel ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_MyChannel_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyChannel_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyOperator_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyOperator_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::InterFilterGroupOperator> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyOperator ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_MyOperator_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyOperator_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_priority_filter_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_priority_filter_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::MappingFilter> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->priority_filter ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_priority_filter_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_priority_filter_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _set_priority_filter_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _set_priority_filter_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::MappingFilter> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->priority_filter (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_set_priority_filter_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_val _tao_priority_filter;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_priority_filter
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_priority_filter_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_lifetime_filter_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_lifetime_filter_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::MappingFilter> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->lifetime_filter ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_lifetime_filter_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_lifetime_filter_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _set_lifetime_filter_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _set_lifetime_filter_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyFilter::MappingFilter> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->lifetime_filter (
        arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_set_lifetime_filter_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyFilter::MappingFilter>::in_arg_val _tao_lifetime_filter;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_lifetime_filter
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _set_lifetime_filter_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_pull_suppliers_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_pull_suppliers_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyIDSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->pull_suppliers ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_pull_suppliers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_pull_suppliers_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_push_suppliers_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_push_suppliers_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyIDSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->push_suppliers ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_get_push_suppliers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_push_suppliers_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_proxy_supplier_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline get_proxy_supplier_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxySupplier> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_proxy_supplier (
          arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::get_proxy_supplier_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_ProxyNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_proxy_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_proxy_id
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_proxy_supplier_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class obtain_notification_pull_supplier_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_notification_pull_supplier_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxySupplier> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ClientType> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->obtain_notification_pull_supplier (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::obtain_notification_pull_supplier_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ctype,
      &_tao_proxy_id
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  obtain_notification_pull_supplier_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class obtain_notification_push_supplier_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_notification_push_supplier_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxySupplier> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ClientType> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->obtain_notification_push_supplier (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::obtain_notification_push_supplier_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxySupplier>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ctype,
      &_tao_proxy_id
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  obtain_notification_push_supplier_ConsumerAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class destroy_ConsumerAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_ConsumerAdmin (
      POA_CosNotifyChannelAdmin::ConsumerAdmin * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::ConsumerAdmin * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::ConsumerAdmin::destroy_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::ConsumerAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::ConsumerAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  destroy_ConsumerAdmin command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::ConsumerAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::ConsumerAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/ConsumerAdmin:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::ConsumerAdmin::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::ConsumerAdmin *
POA_CosNotifyChannelAdmin::ConsumerAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::ConsumerAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_SupplierAdmin_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_SupplierAdmin_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_SupplierAdmin_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39,  0, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
     39, 39, 39, 39, 39,  0, 39,  1, 39, 39,
      0,  0, 39, 20, 39, 39, 39, 39, 10, 39,
     39,  0, 39, 39,  0,  0, 15, 39,  5, 39,
     39, 15, 39, 39, 39, 39, 39, 39,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_SupplierAdmin_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 25,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 33,
      MIN_HASH_VALUE = 6,
      MAX_HASH_VALUE = 38,
      HASH_VALUE_RANGE = 33,
      DUPLICATES = 4,
      WORDLIST_SIZE = 31
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"_get_MyID", &POA_CosNotifyChannelAdmin::SupplierAdmin::_get_MyID_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"offer_change", &POA_CosNotifyComm::NotifyPublish::offer_change_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_get_MyOperator", &POA_CosNotifyChannelAdmin::SupplierAdmin::_get_MyOperator_skel, 0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"_get_pull_consumers", &POA_CosNotifyChannelAdmin::SupplierAdmin::_get_pull_consumers_skel, 0},
      {"_get_push_consumers", &POA_CosNotifyChannelAdmin::SupplierAdmin::_get_push_consumers_skel, 0},
      {"obtain_push_consumer", &POA_CosEventChannelAdmin::SupplierAdmin::obtain_push_consumer_skel, 0},
      {"obtain_pull_consumer", &POA_CosEventChannelAdmin::SupplierAdmin::obtain_pull_consumer_skel, 0},
      {"destroy", &POA_CosNotifyChannelAdmin::SupplierAdmin::destroy_skel, 0},
      {"_get_MyChannel", &POA_CosNotifyChannelAdmin::SupplierAdmin::_get_MyChannel_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"obtain_notification_pull_consumer", &POA_CosNotifyChannelAdmin::SupplierAdmin::obtain_notification_pull_consumer_skel, 0},
      {"obtain_notification_push_consumer", &POA_CosNotifyChannelAdmin::SupplierAdmin::obtain_notification_push_consumer_skel, 0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"get_proxy_consumer", &POA_CosNotifyChannelAdmin::SupplierAdmin::get_proxy_consumer_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1, -17,  -2, -19,  -2,   6,   7,  -1,   8,   9,  10,  11,  12, 
       13,  14,  -1,  15,  16, -55, -54,  -1,  21,  -1,  22,  23,  -1,  24, 
       25,  -1,  26, -27,  -2, -40,  -1,  29,  -1,  -1,  30, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_SupplierAdmin_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_SupplierAdmin_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::SupplierAdmin::SupplierAdmin (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_SupplierAdmin_optable;
}

POA_CosNotifyChannelAdmin::SupplierAdmin::SupplierAdmin (const SupplierAdmin& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyComm::NotifyPublish (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosEventChannelAdmin::SupplierAdmin (rhs)
{
}

POA_CosNotifyChannelAdmin::SupplierAdmin::~SupplierAdmin (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyID_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyID_SupplierAdmin (
      POA_CosNotifyChannelAdmin::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyID ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SupplierAdmin::_get_MyID_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::SupplierAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SupplierAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyID_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyChannel_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyChannel_SupplierAdmin (
      POA_CosNotifyChannelAdmin::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::EventChannel> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyChannel ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SupplierAdmin::_get_MyChannel_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::SupplierAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SupplierAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyChannel_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyOperator_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyOperator_SupplierAdmin (
      POA_CosNotifyChannelAdmin::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::InterFilterGroupOperator> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyOperator ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SupplierAdmin::_get_MyOperator_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::SupplierAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SupplierAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyOperator_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_pull_consumers_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_pull_consumers_SupplierAdmin (
      POA_CosNotifyChannelAdmin::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyIDSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->pull_consumers ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SupplierAdmin::_get_pull_consumers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::SupplierAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SupplierAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_pull_consumers_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_push_consumers_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline _get_push_consumers_SupplierAdmin (
      POA_CosNotifyChannelAdmin::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyIDSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->push_consumers ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SupplierAdmin::_get_push_consumers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyIDSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::SupplierAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SupplierAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_push_consumers_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_proxy_consumer_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline get_proxy_consumer_SupplierAdmin (
      POA_CosNotifyChannelAdmin::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyConsumer> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_proxy_consumer (
          arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SupplierAdmin::get_proxy_consumer_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_ProxyNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_proxy_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_proxy_id
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::SupplierAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SupplierAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_proxy_consumer_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class obtain_notification_pull_consumer_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_notification_pull_consumer_SupplierAdmin (
      POA_CosNotifyChannelAdmin::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyConsumer> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ClientType> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->obtain_notification_pull_consumer (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyChannelAdmin::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SupplierAdmin::obtain_notification_pull_consumer_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ctype,
      &_tao_proxy_id
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyChannelAdmin::SupplierAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SupplierAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  obtain_notification_pull_consumer_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class obtain_notification_push_consumer_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline obtain_notification_push_consumer_SupplierAdmin (
      POA_CosNotifyChannelAdmin::SupplierAdmin * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ProxyConsumer> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::ClientType> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->obtain_notification_push_consumer (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyChannelAdmin::SupplierAdmin * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SupplierAdmin::obtain_notification_push_consumer_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminLimitExceeded
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ProxyConsumer>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ClientType>::in_arg_val _tao_ctype;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_proxy_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ctype,
      &_tao_proxy_id
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyChannelAdmin::SupplierAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SupplierAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  obtain_notification_push_consumer_SupplierAdmin command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class destroy_SupplierAdmin
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_SupplierAdmin (
      POA_CosNotifyChannelAdmin::SupplierAdmin * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::SupplierAdmin * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::SupplierAdmin::destroy_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::SupplierAdmin * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::SupplierAdmin *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  destroy_SupplierAdmin command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::SupplierAdmin::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifyPublish:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::SupplierAdmin::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/SupplierAdmin:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::SupplierAdmin::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::SupplierAdmin *
POA_CosNotifyChannelAdmin::SupplierAdmin::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::SupplierAdmin STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_EventChannel_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_EventChannel_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_EventChannel_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
     48, 48, 48, 48, 48,  0, 48,  0, 48, 48,
     25,  5,  5, 15, 48, 48, 48, 48, 48, 48,
      0, 48, 48, 48, 48,  0,  0, 48,  0, 48,
     48, 15, 48, 48, 48, 48, 48, 48,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_EventChannel_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 23,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 27,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 47,
      HASH_VALUE_RANGE = 43,
      DUPLICATES = 6,
      WORDLIST_SIZE = 28
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"set_admin", &POA_CosNotification::AdminPropertiesAdmin::set_admin_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"new_for_consumers", &POA_CosNotifyChannelAdmin::EventChannel::new_for_consumers_skel, 0},
      {"new_for_suppliers", &POA_CosNotifyChannelAdmin::EventChannel::new_for_suppliers_skel, 0},
      {"for_consumers", &POA_CosEventChannelAdmin::EventChannel::for_consumers_skel, 0},
      {"for_suppliers", &POA_CosEventChannelAdmin::EventChannel::for_suppliers_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"get_admin", &POA_CosNotification::AdminPropertiesAdmin::get_admin_skel, 0},
      {"_get_default_consumer_admin", &POA_CosNotifyChannelAdmin::EventChannel::_get_default_consumer_admin_skel, 0},
      {"_get_default_supplier_admin", &POA_CosNotifyChannelAdmin::EventChannel::_get_default_supplier_admin_skel, 0},
      {"_get_MyFactory", &POA_CosNotifyChannelAdmin::EventChannel::_get_MyFactory_skel, 0},
      {"get_consumeradmin", &POA_CosNotifyChannelAdmin::EventChannel::get_consumeradmin_skel, 0},
      {"get_supplieradmin", &POA_CosNotifyChannelAdmin::EventChannel::get_supplieradmin_skel, 0},
      {"get_all_consumeradmins", &POA_CosNotifyChannelAdmin::EventChannel::get_all_consumeradmins_skel, 0},
      {"get_all_supplieradmins", &POA_CosNotifyChannelAdmin::EventChannel::get_all_supplieradmins_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_get_default_filter_factory", &POA_CosNotifyChannelAdmin::EventChannel::_get_default_filter_factory_skel, 0},
      {"destroy", &POA_CosEventChannelAdmin::EventChannel::destroy_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1, -12,  -2, -14,  -2,   5,  -1,   6,  -1,   7,   8,  -1,   9,  10, 
       -1,  11,  -1, -63, -62,  -1,  -1,  -1,  16,  -1,  17, -18,  -2, -49, 
       -1,  20, -21,  -2, -49,  -1,  -1, -23,  -2, -49,  -1,  25,  -1,  -1, 
       26,  -1,  -1,  -1,  -1,  27, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_EventChannel_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_EventChannel_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::EventChannel::EventChannel (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_EventChannel_optable;
}

POA_CosNotifyChannelAdmin::EventChannel::EventChannel (const EventChannel& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotification::AdminPropertiesAdmin (rhs),
    POA_CosEventChannelAdmin::EventChannel (rhs)
{
}

POA_CosNotifyChannelAdmin::EventChannel::~EventChannel (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_MyFactory_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline _get_MyFactory_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannelFactory>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::EventChannelFactory> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->MyFactory ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::_get_MyFactory_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannelFactory>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_MyFactory_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_default_consumer_admin_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline _get_default_consumer_admin_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ConsumerAdmin> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->default_consumer_admin ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::_get_default_consumer_admin_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_default_consumer_admin_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_default_supplier_admin_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline _get_default_supplier_admin_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::SupplierAdmin> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->default_supplier_admin ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::_get_default_supplier_admin_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_default_supplier_admin_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class _get_default_filter_factory_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline _get_default_filter_factory_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyFilter::FilterFactory>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyFilter::FilterFactory> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->default_filter_factory ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::_get_default_filter_factory_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyFilter::FilterFactory>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  _get_default_filter_factory_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class new_for_consumers_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline new_for_consumers_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ConsumerAdmin> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::InterFilterGroupOperator> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->new_for_consumers (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::new_for_consumers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_val _tao_op;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_op,
      &_tao_id
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  new_for_consumers_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class new_for_suppliers_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline new_for_suppliers_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::SupplierAdmin> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotifyChannelAdmin::InterFilterGroupOperator> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->new_for_suppliers (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::new_for_suppliers_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val retval;
  TAO::SArg_Traits< ::CosNotifyChannelAdmin::InterFilterGroupOperator>::in_arg_val _tao_op;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_op,
      &_tao_id
    };
  
  static size_t const nargs = 3;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  new_for_suppliers_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_consumeradmin_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline get_consumeradmin_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ConsumerAdmin> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_consumeradmin (
          arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::get_consumeradmin_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ConsumerAdmin>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_consumeradmin_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_supplieradmin_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline get_supplieradmin_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::SupplierAdmin> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_supplieradmin (
          arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::get_supplieradmin_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_AdminNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::SupplierAdmin>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_supplieradmin_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_all_consumeradmins_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline get_all_consumeradmins_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::AdminIDSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::AdminIDSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_all_consumeradmins ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::get_all_consumeradmins_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::AdminIDSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_all_consumeradmins_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_all_supplieradmins_EventChannel
    : public TAO::Upcall_Command
  {
  public:
    inline get_all_supplieradmins_EventChannel (
      POA_CosNotifyChannelAdmin::EventChannel * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::AdminIDSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::AdminIDSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_all_supplieradmins ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannel * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannel::get_all_supplieradmins_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::AdminIDSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::EventChannel * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannel *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_all_supplieradmins_EventChannel command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::EventChannel::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/AdminPropertiesAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::EventChannel::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/EventChannel:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::EventChannel::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::EventChannel *
POA_CosNotifyChannelAdmin::EventChannel::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::EventChannel STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_CosNotifyChannelAdmin_EventChannelFactory_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_CosNotifyChannelAdmin_EventChannelFactory_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_CosNotifyChannelAdmin_EventChannelFactory_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20,  0, 20,  0, 20,  5,
      0,  5, 20,  0, 20, 20, 20, 20,  0, 20,
     20, 20, 20, 20, 20,  0,  0, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_CosNotifyChannelAdmin_EventChannelFactory_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 17,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 19,
      HASH_VALUE_RANGE = 15,
      DUPLICATES = 0,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"get_all_channels", &POA_CosNotifyChannelAdmin::EventChannelFactory::get_all_channels_skel, 0},
      {"get_event_channel", &POA_CosNotifyChannelAdmin::EventChannelFactory::get_event_channel_skel, 0},
      {"",0,0},
      {"create_channel", &POA_CosNotifyChannelAdmin::EventChannelFactory::create_channel_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_CosNotifyChannelAdmin_EventChannelFactory_Perfect_Hash_OpTable tao_CosNotifyChannelAdmin_EventChannelFactory_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_CosNotifyChannelAdmin::EventChannelFactory::EventChannelFactory (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNotifyChannelAdmin_EventChannelFactory_optable;
}

POA_CosNotifyChannelAdmin::EventChannelFactory::EventChannelFactory (const EventChannelFactory& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosNotifyChannelAdmin::EventChannelFactory::~EventChannelFactory (void)
{
}

namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class create_channel_EventChannelFactory
    : public TAO::Upcall_Command
  {
  public:
    inline create_channel_EventChannelFactory (
      POA_CosNotifyChannelAdmin::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::EventChannel> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::QoSProperties> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNotification::AdminProperties>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::AdminProperties> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->create_channel (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannelFactory::create_channel_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotification::_tc_UnsupportedQoS,
      CosNotification::_tc_UnsupportedAdmin
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::QoSProperties>::in_arg_val _tao_initial_qos;
  TAO::SArg_Traits< ::CosNotification::AdminProperties>::in_arg_val _tao_initial_admin;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_initial_qos,
      &_tao_initial_admin,
      &_tao_id
    };
  
  static size_t const nargs = 4;

  POA_CosNotifyChannelAdmin::EventChannelFactory * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannelFactory *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_channel_EventChannelFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_all_channels_EventChannelFactory
    : public TAO::Upcall_Command
  {
  public:
    inline get_all_channels_EventChannelFactory (
      POA_CosNotifyChannelAdmin::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::ChannelIDSeq>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::ChannelIDSeq> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_all_channels ();
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannelFactory::get_all_channels_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::ChannelIDSeq>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_CosNotifyChannelAdmin::EventChannelFactory * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannelFactory *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_all_channels_EventChannelFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_CosNotifyChannelAdmin
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_event_channel_EventChannelFactory
    : public TAO::Upcall_Command
  {
  public:
    inline get_event_channel_EventChannelFactory (
      POA_CosNotifyChannelAdmin::EventChannelFactory * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNotifyChannelAdmin::EventChannel> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_event_channel (
          arg_1);
    }
  
  private:
    POA_CosNotifyChannelAdmin::EventChannelFactory * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_CosNotifyChannelAdmin::EventChannelFactory::get_event_channel_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNotifyChannelAdmin::_tc_ChannelNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CosNotifyChannelAdmin::EventChannel>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id
    };
  
  static size_t const nargs = 2;

  POA_CosNotifyChannelAdmin::EventChannelFactory * const impl =
    dynamic_cast<POA_CosNotifyChannelAdmin::EventChannelFactory *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_event_channel_EventChannelFactory command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_CosNotifyChannelAdmin::EventChannelFactory::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNotifyChannelAdmin::EventChannelFactory::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNotifyChannelAdmin/EventChannelFactory:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_CosNotifyChannelAdmin::EventChannelFactory::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

CosNotifyChannelAdmin::EventChannelFactory *
POA_CosNotifyChannelAdmin::EventChannelFactory::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::CosNotifyChannelAdmin::EventChannelFactory STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

