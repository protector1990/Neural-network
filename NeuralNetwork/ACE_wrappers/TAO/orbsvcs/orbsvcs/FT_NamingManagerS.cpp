// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:635

#ifndef _TAO_IDL_FT_NAMINGMANAGERS_0GSJJF_CPP_
#define _TAO_IDL_FT_NAMINGMANAGERS_0GSJJF_CPP_


#include "FT_NamingManagerS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/Exception_Data.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_FT_Naming_NamingManager_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_FT_Naming_NamingManager_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_FT_Naming_NamingManager_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
     59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
     59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
     59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
     59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
     59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
     59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
     59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
     59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
     59, 59, 59, 59, 59,  0, 59,  0, 59, 23,
     20, 15, 20, 10, 59, 59, 59, 59,  0, 59,
      0, 59,  0, 59,  5,  0,  0, 59, 59, 59,
     59, 10, 59, 59, 59, 59, 59, 59,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_FT_Naming_NamingManager_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 27,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 30,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 58,
      HASH_VALUE_RANGE = 54,
      DUPLICATES = 0,
      WORDLIST_SIZE = 32
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"",0,0},
      {"add_member", &POA_PortableGroup::ObjectGroupManager::add_member_skel, 0},
      {"groups", &POA_FT_Naming::NamingManager::groups_skel, 0},
      {"",0,0},{"",0,0},
      {"set_type_properties", &POA_PortableGroup::PropertyManager::set_type_properties_skel, 0},
      {"locations_of_members", &POA_PortableGroup::ObjectGroupManager::locations_of_members_skel, 0},
      {"",0,0},
      {"set_default_properties", &POA_PortableGroup::PropertyManager::set_default_properties_skel, 0},
      {"remove_member", &POA_PortableGroup::ObjectGroupManager::remove_member_skel, 0},
      {"get_properties", &POA_PortableGroup::PropertyManager::get_properties_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"",0,0},
      {"remove_type_properties", &POA_PortableGroup::PropertyManager::remove_type_properties_skel, 0},
      {"groups_at_location", &POA_PortableGroup::ObjectGroupManager::groups_at_location_skel, 0},
      {"get_type_properties", &POA_PortableGroup::PropertyManager::get_type_properties_skel, 0},
      {"remove_default_properties", &POA_PortableGroup::PropertyManager::remove_default_properties_skel, 0},
      {"",0,0},
      {"get_default_properties", &POA_PortableGroup::PropertyManager::get_default_properties_skel, 0},
      {"",0,0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"",0,0},
      {"set_properties_dynamically", &POA_PortableGroup::PropertyManager::set_properties_dynamically_skel, 0},
      {"set_load_balancing_strategy", &POA_FT_Naming::NamingManager::set_load_balancing_strategy_skel, 0},
      {"",0,0},
      {"delete_object_group", &POA_FT_Naming::NamingManager::delete_object_group_skel, 0},
      {"",0,0},
      {"create_member", &POA_PortableGroup::ObjectGroupManager::create_member_skel, 0},
      {"create_object_group", &POA_FT_Naming::NamingManager::create_object_group_skel, 0},
      {"",0,0},
      {"get_member_ref", &POA_PortableGroup::ObjectGroupManager::get_member_ref_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"get_object_group_id", &POA_PortableGroup::ObjectGroupManager::get_object_group_id_skel, 0},
      {"get_object_group_ref", &POA_PortableGroup::ObjectGroupManager::get_object_group_ref_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"get_object_group_ref_from_name", &POA_FT_Naming::NamingManager::get_object_group_ref_from_name_skel, 0},
      {"",0,0},{"",0,0},
      {"get_object_group_ref_from_id", &POA_PortableGroup::ObjectGroupManager::get_object_group_ref_from_id_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_FT_Naming_NamingManager_Perfect_Hash_OpTable tao_FT_Naming_NamingManager_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_FT_Naming::NamingManager::NamingManager (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_FT_Naming_NamingManager_optable;
}

POA_FT_Naming::NamingManager::NamingManager (const NamingManager& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_PortableGroup::PropertyManager (rhs),
    POA_PortableGroup::ObjectGroupManager (rhs)
{
}

POA_FT_Naming::NamingManager::~NamingManager (void)
{
}

namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class create_object_group_NamingManager
    : public TAO::Upcall_Command
  {
  public:
    inline create_object_group_NamingManager (
      POA_FT_Naming::NamingManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::PortableGroup::Criteria>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::PortableGroup::Criteria> (
          this->operation_details_,
          this->args_,
          3);
        
      retval =
        this->servant_->create_object_group (
          arg_1
          , arg_2
          , arg_3);
    }
  
  private:
    POA_FT_Naming::NamingManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::NamingManager::create_object_group_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectNotCreated,
      PortableGroup::_tc_InvalidCriteria,
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_CannotMeetCriteria
    };
  static ::CORBA::ULong const nexceptions = 4;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_group_name;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_lb_strategy;
  TAO::SArg_Traits< ::PortableGroup::Criteria>::in_arg_val _tao_the_criteria;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_group_name,
      &_tao_lb_strategy,
      &_tao_the_criteria
    };
  
  static size_t const nargs = 4;

  POA_FT_Naming::NamingManager * const impl =
    dynamic_cast<POA_FT_Naming::NamingManager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_object_group_NamingManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class delete_object_group_NamingManager
    : public TAO::Upcall_Command
  {
  public:
    inline delete_object_group_NamingManager (
      POA_FT_Naming::NamingManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->delete_object_group (
        arg_1);
    }
  
  private:
    POA_FT_Naming::NamingManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::NamingManager::delete_object_group_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_group_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_group_name
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::NamingManager * const impl =
    dynamic_cast<POA_FT_Naming::NamingManager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  delete_object_group_NamingManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_object_group_ref_from_name_NamingManager
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_ref_from_name_NamingManager (
      POA_FT_Naming::NamingManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->get_object_group_ref_from_name (
          arg_1);
    }
  
  private:
    POA_FT_Naming::NamingManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::NamingManager::get_object_group_ref_from_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_group_name;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_group_name
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::NamingManager * const impl =
    dynamic_cast<POA_FT_Naming::NamingManager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_object_group_ref_from_name_NamingManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class set_load_balancing_strategy_NamingManager
    : public TAO::Upcall_Command
  {
  public:
    inline set_load_balancing_strategy_NamingManager (
      POA_FT_Naming::NamingManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->set_load_balancing_strategy (
        arg_1
        , arg_2);
    }
  
  private:
    POA_FT_Naming::NamingManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::NamingManager::set_load_balancing_strategy_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_group_name;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_lb_strategy;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_group_name,
      &_tao_lb_strategy
    };
  
  static size_t const nargs = 3;

  POA_FT_Naming::NamingManager * const impl =
    dynamic_cast<POA_FT_Naming::NamingManager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_load_balancing_strategy_NamingManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class groups_NamingManager
    : public TAO::Upcall_Command
  {
  public:
    inline groups_NamingManager (
      POA_FT_Naming::NamingManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::FT_Naming::GroupNames>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::FT_Naming::GroupNames> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->groups (
          arg_1);
    }
  
  private:
    POA_FT_Naming::NamingManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::NamingManager::groups_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::FT_Naming::GroupNames>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_target_stategy;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_target_stategy
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::NamingManager * const impl =
    dynamic_cast<POA_FT_Naming::NamingManager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  groups_NamingManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_FT_Naming::NamingManager::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/PropertyManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/ObjectGroupManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FT_Naming/NamingManager:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_FT_Naming::NamingManager::_interface_repository_id (void) const
{
  return "IDL:FT_Naming/NamingManager:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_FT_Naming::NamingManager::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

FT_Naming::NamingManager *
POA_FT_Naming::NamingManager::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::FT_Naming::NamingManager STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_FT_Naming_AMI_NamingManagerHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_FT_Naming_AMI_NamingManagerHandler_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_FT_Naming_AMI_NamingManagerHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
     106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
     106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
     106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
     106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
     106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
     106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
     106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
     106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
     106, 106, 106, 106, 106,   0, 106,   0, 106,   0,
      10,  10,  35,  50, 106, 106, 106, 106,  10, 106,
       0, 106,   0, 106,  35,  25,   0, 106, 106, 106,
     106,   0, 106, 106, 106, 106, 106, 106,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_FT_Naming_AMI_NamingManagerHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 49,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 36,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 105,
      HASH_VALUE_RANGE = 101,
      DUPLICATES = 4,
      WORDLIST_SIZE = 54
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"add_member_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::add_member_excep_skel, 0},
      {"create_member_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::create_member_excep_skel, 0},
      {"create_object_group", &POA_FT_Naming::AMI_NamingManagerHandler::create_object_group_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"create_object_group_excep", &POA_FT_Naming::AMI_NamingManagerHandler::create_object_group_excep_skel, 0},
      {"delete_object_group", &POA_FT_Naming::AMI_NamingManagerHandler::delete_object_group_skel, 0},
      {"delete_object_group_excep", &POA_FT_Naming::AMI_NamingManagerHandler::delete_object_group_excep_skel, 0},
      {"locations_of_members_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::locations_of_members_excep_skel, 0},
      {"add_member", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::add_member_skel, 0},
      {"create_member", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::create_member_skel, 0},
      {"set_type_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::set_type_properties_excep_skel, 0},
      {"set_properties_dynamically", &POA_PortableGroup::AMI_PropertyManagerHandler::set_properties_dynamically_skel, 0},
      {"set_load_balancing_strategy", &POA_FT_Naming::AMI_NamingManagerHandler::set_load_balancing_strategy_skel, 0},
      {"set_default_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::set_default_properties_excep_skel, 0},
      {"remove_member_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::remove_member_excep_skel, 0},
      {"locations_of_members", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::locations_of_members_skel, 0},
      {"set_properties_dynamically_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::set_properties_dynamically_excep_skel, 0},
      {"set_load_balancing_strategy_excep", &POA_FT_Naming::AMI_NamingManagerHandler::set_load_balancing_strategy_excep_skel, 0},
      {"groups_excep", &POA_FT_Naming::AMI_NamingManagerHandler::groups_excep_skel, 0},
      {"remove_type_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::remove_type_properties_excep_skel, 0},
      {"remove_default_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::remove_default_properties_excep_skel, 0},
      {"groups_at_location", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::groups_at_location_skel, 0},
      {"set_type_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::set_type_properties_skel, 0},
      {"get_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::get_properties_excep_skel, 0},
      {"get_member_ref_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_member_ref_excep_skel, 0},
      {"set_default_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::set_default_properties_skel, 0},
      {"groups_at_location_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::groups_at_location_excep_skel, 0},
      {"get_type_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::get_type_properties_excep_skel, 0},
      {"get_object_group_id_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_id_excep_skel, 0},
      {"get_object_group_ref_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_excep_skel, 0},
      {"get_default_properties_excep", &POA_PortableGroup::AMI_PropertyManagerHandler::get_default_properties_excep_skel, 0},
      {"get_object_group_id", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_id_skel, 0},
      {"groups", &POA_FT_Naming::AMI_NamingManagerHandler::groups_skel, 0},
      {"remove_type_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::remove_type_properties_skel, 0},
      {"remove_member", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::remove_member_skel, 0},
      {"get_object_group_ref_from_id_excep", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_from_id_excep_skel, 0},
      {"remove_default_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::remove_default_properties_skel, 0},
      {"get_object_group_ref_from_name_excep", &POA_FT_Naming::AMI_NamingManagerHandler::get_object_group_ref_from_name_excep_skel, 0},
      {"get_object_group_ref_from_id", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_from_id_skel, 0},
      {"get_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::get_properties_skel, 0},
      {"get_object_group_ref_from_name", &POA_FT_Naming::AMI_NamingManagerHandler::get_object_group_ref_from_name_skel, 0},
      {"get_type_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::get_type_properties_skel, 0},
      {"get_default_properties", &POA_PortableGroup::AMI_PropertyManagerHandler::get_default_properties_skel, 0},
      {"get_member_ref", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_member_ref_skel, 0},
      {"get_object_group_ref", &POA_PortableGroup::AMI_ObjectGroupManagerHandler::get_object_group_ref_skel, 0},
    };

  static const signed char lookup[] =
    {
        -1,   -1,   -1,   -1,   -1,    5,   -1,   -1,   -1,   -1,    6,   -1,   -1,    7, 
        -1,   -1,    8,   -9,   -2, -107,   11,   -1,   -1,   -1,   12,   13,   -1,   -1, 
        -1,   14,   -1,   -1,   -1,   -1,   -1,   15,   16,   -1,   -1,   -1,   -1,   -1, 
        -1,   -1,   -1,   17,   -1,   -1,   18,   -1,   19,   20,   21,   22,   23,   24, 
        -1,   25,   26,   -1,  -32,   -2,   27,   28,  -36,   -2,   29,   -1,   30,   31, 
      -115,   -1,   34,   -1,   35, -116,   38,   -1,   39,   40,   -1,   41,   42,   43, 
        44,   45,   46,   -1,   47,   48,   49,   -1,   -1,   -1,   50,   -1,   -1,   51, 
        -1,   52,   -1,   -1,   -1,   -1,   -1,   53, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_FT_Naming_AMI_NamingManagerHandler_Perfect_Hash_OpTable tao_FT_Naming_AMI_NamingManagerHandler_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_FT_Naming::AMI_NamingManagerHandler::AMI_NamingManagerHandler (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_FT_Naming_AMI_NamingManagerHandler_optable;
}

POA_FT_Naming::AMI_NamingManagerHandler::AMI_NamingManagerHandler (const AMI_NamingManagerHandler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs),
    POA_PortableGroup::AMI_PropertyManagerHandler (rhs),
    POA_PortableGroup::AMI_ObjectGroupManagerHandler (rhs)
{
}

POA_FT_Naming::AMI_NamingManagerHandler::~AMI_NamingManagerHandler (void)
{
}

namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class create_object_group_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline create_object_group_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->create_object_group (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::create_object_group_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectNotCreated,
      PortableGroup::_tc_InvalidCriteria,
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_CannotMeetCriteria
    };
  static ::CORBA::ULong const nexceptions = 4;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_object_group_AMI_NamingManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class create_object_group_excep_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline create_object_group_excep_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_FT_Naming_AMI_NamingManagerHandler_create_object_group_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectNotCreated:1.0",
            PortableGroup::ObjectNotCreated::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectNotCreated
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/InvalidCriteria:1.0",
            PortableGroup::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
            PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
          },

          {
            "IDL:omg.org/PortableGroup/CannotMeetCriteria:1.0",
            PortableGroup::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_FT_Naming_AMI_NamingManagerHandler_create_object_group_excep_exceptiondata, 4);
        }
      
      this->servant_->create_object_group_excep (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::create_object_group_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectNotCreated,
      PortableGroup::_tc_InvalidCriteria,
      PortableGroup::_tc_InvalidProperty,
      PortableGroup::_tc_CannotMeetCriteria
    };
  static ::CORBA::ULong const nexceptions = 4;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  create_object_group_excep_AMI_NamingManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class delete_object_group_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline delete_object_group_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->delete_object_group ();
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::delete_object_group_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  delete_object_group_AMI_NamingManagerHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class delete_object_group_excep_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline delete_object_group_excep_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_FT_Naming_AMI_NamingManagerHandler_delete_object_group_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_FT_Naming_AMI_NamingManagerHandler_delete_object_group_excep_exceptiondata, 1);
        }
      
      this->servant_->delete_object_group_excep (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::delete_object_group_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  delete_object_group_excep_AMI_NamingManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_object_group_ref_from_name_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_ref_from_name_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_object_group_ref_from_name (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::get_object_group_ref_from_name_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_object_group_ref_from_name_AMI_NamingManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class get_object_group_ref_from_name_excep_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline get_object_group_ref_from_name_excep_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_FT_Naming_AMI_NamingManagerHandler_get_object_group_ref_from_name_excep_exceptiondata [] = 
        {
          {
            "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
            PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_FT_Naming_AMI_NamingManagerHandler_get_object_group_ref_from_name_excep_exceptiondata, 1);
        }
      
      this->servant_->get_object_group_ref_from_name_excep (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::get_object_group_ref_from_name_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      PortableGroup::_tc_ObjectGroupNotFound
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_object_group_ref_from_name_excep_AMI_NamingManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class set_load_balancing_strategy_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_load_balancing_strategy_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->set_load_balancing_strategy ();
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::set_load_balancing_strategy_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_load_balancing_strategy_AMI_NamingManagerHandler command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class set_load_balancing_strategy_excep_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline set_load_balancing_strategy_excep_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->set_load_balancing_strategy_excep (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::set_load_balancing_strategy_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_load_balancing_strategy_excep_AMI_NamingManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class groups_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline groups_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::FT_Naming::GroupNames>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::FT_Naming::GroupNames> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->groups (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::groups_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::FT_Naming::GroupNames>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  groups_AMI_NamingManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class groups_excep_AMI_NamingManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline groups_excep_AMI_NamingManagerHandler (
      POA_FT_Naming::AMI_NamingManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->groups_excep (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_NamingManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_NamingManagerHandler::groups_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_NamingManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_NamingManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  groups_excep_AMI_NamingManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_FT_Naming::AMI_NamingManagerHandler::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/AMI_PropertyManagerHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/AMI_ObjectGroupManagerHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FT_Naming/AMI_NamingManagerHandler:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_FT_Naming::AMI_NamingManagerHandler::_interface_repository_id (void) const
{
  return "IDL:FT_Naming/AMI_NamingManagerHandler:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_FT_Naming::AMI_NamingManagerHandler::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

FT_Naming::AMI_NamingManagerHandler *
POA_FT_Naming::AMI_NamingManagerHandler::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::FT_Naming::AMI_NamingManagerHandler STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

