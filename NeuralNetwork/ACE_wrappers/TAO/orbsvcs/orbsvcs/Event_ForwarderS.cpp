// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:635

#ifndef _TAO_IDL_EVENT_FORWARDERS_FXUEOQ_CPP_
#define _TAO_IDL_EVENT_FORWARDERS_FXUEOQ_CPP_


#include "Event_ForwarderS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_Event_Forwarder_StructuredProxyPushSupplier_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Event_Forwarder_StructuredProxyPushSupplier_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Event_Forwarder_StructuredProxyPushSupplier_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
     56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
     56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
     56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
     56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
     56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
     56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
     56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
     56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
     56, 56, 56, 56, 56,  0, 56, 18, 56,  5,
     20,  0,  0, 15, 56, 56, 56, 56, 56, 56,
     15, 25, 56, 56,  0,  0, 30, 56, 30, 56,
     56,  5, 56, 56, 56, 56, 56, 56,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Event_Forwarder_StructuredProxyPushSupplier_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 30,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 35,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 55,
      HASH_VALUE_RANGE = 49,
      DUPLICATES = 4,
      WORDLIST_SIZE = 37
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyType_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"forward_any", &POA_Event_Forwarder::StructuredProxyPushSupplier::forward_any_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"subscription_change", &POA_CosNotifyComm::NotifySubscribe::subscription_change_skel, 0},
      {"_get_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_priority_filter_skel, 0},
      {"_set_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_lifetime_filter_skel, 0},
      {"_get_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_lifetime_filter_skel, 0},
      {"_set_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_priority_filter_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyAdmin_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"resume_connection", &POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::resume_connection_skel, 0},
      {"suspend_connection", &POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::suspend_connection_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"connect_structured_push_consumer", &POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier::connect_structured_push_consumer_skel, 0},
      {"forward_structured", &POA_Event_Forwarder::StructuredProxyPushSupplier::forward_structured_skel, 0},
      {"forward_any_no_filtering", &POA_Event_Forwarder::StructuredProxyPushSupplier::forward_any_no_filtering_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"obtain_offered_types", &POA_CosNotifyChannelAdmin::ProxySupplier::obtain_offered_types_skel, 0},
      {"forward_structured_no_filtering", &POA_Event_Forwarder::StructuredProxyPushSupplier::forward_structured_no_filtering_skel, 0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxySupplier::validate_event_qos_skel, 0},
      {"disconnect_structured_push_supplier", &POA_CosNotifyComm::StructuredPushSupplier::disconnect_structured_push_supplier_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   8,   9,  -1,  10, 
      -14,  -4,  11,  -1,  12,  13, -61,  -1,  18,  19,  -1,  20,  -1,  21, 
       22,  -1,  23,  -1,  24,  25,  26,  -1,  -1,  27,  28,  29,  30,  -1, 
       31,  32,  -1,  33,  34,  -1,  35,  -1,  -1,  -1,  -1,  -1,  -1,  36, 
      
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Event_Forwarder_StructuredProxyPushSupplier_Perfect_Hash_OpTable tao_Event_Forwarder_StructuredProxyPushSupplier_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_Event_Forwarder::StructuredProxyPushSupplier::StructuredProxyPushSupplier (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Event_Forwarder_StructuredProxyPushSupplier_optable;
}

POA_Event_Forwarder::StructuredProxyPushSupplier::StructuredProxyPushSupplier (const StructuredProxyPushSupplier& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosNotifyChannelAdmin::ProxySupplier (rhs),
    POA_CosNotifyComm::NotifySubscribe (rhs),
    POA_CosNotifyComm::StructuredPushSupplier (rhs),
    POA_CosNotifyChannelAdmin::StructuredProxyPushSupplier (rhs)
{
}

POA_Event_Forwarder::StructuredProxyPushSupplier::~StructuredProxyPushSupplier (void)
{
}

namespace POA_Event_Forwarder
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class forward_structured_StructuredProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline forward_structured_StructuredProxyPushSupplier (
      POA_Event_Forwarder::StructuredProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::StructuredEvent> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->forward_structured (
        arg_1);
    }
  
  private:
    POA_Event_Forwarder::StructuredProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_Event_Forwarder::StructuredProxyPushSupplier::forward_structured_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_val _tao_event;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_event
    };
  
  static size_t const nargs = 2;

  POA_Event_Forwarder::StructuredProxyPushSupplier * const impl =
    dynamic_cast<POA_Event_Forwarder::StructuredProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  forward_structured_StructuredProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Event_Forwarder
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class forward_structured_no_filtering_StructuredProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline forward_structured_no_filtering_StructuredProxyPushSupplier (
      POA_Event_Forwarder::StructuredProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::StructuredEvent> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->forward_structured_no_filtering (
        arg_1);
    }
  
  private:
    POA_Event_Forwarder::StructuredProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_Event_Forwarder::StructuredProxyPushSupplier::forward_structured_no_filtering_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_val _tao_event;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_event
    };
  
  static size_t const nargs = 2;

  POA_Event_Forwarder::StructuredProxyPushSupplier * const impl =
    dynamic_cast<POA_Event_Forwarder::StructuredProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  forward_structured_no_filtering_StructuredProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Event_Forwarder
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class forward_any_StructuredProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline forward_any_StructuredProxyPushSupplier (
      POA_Event_Forwarder::StructuredProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->forward_any (
        arg_1);
    }
  
  private:
    POA_Event_Forwarder::StructuredProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_Event_Forwarder::StructuredProxyPushSupplier::forward_any_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_event;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_event
    };
  
  static size_t const nargs = 2;

  POA_Event_Forwarder::StructuredProxyPushSupplier * const impl =
    dynamic_cast<POA_Event_Forwarder::StructuredProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  forward_any_StructuredProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Event_Forwarder
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class forward_any_no_filtering_StructuredProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline forward_any_no_filtering_StructuredProxyPushSupplier (
      POA_Event_Forwarder::StructuredProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->forward_any_no_filtering (
        arg_1);
    }
  
  private:
    POA_Event_Forwarder::StructuredProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_Event_Forwarder::StructuredProxyPushSupplier::forward_any_no_filtering_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_event;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_event
    };
  
  static size_t const nargs = 2;

  POA_Event_Forwarder::StructuredProxyPushSupplier * const impl =
    dynamic_cast<POA_Event_Forwarder::StructuredProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  forward_any_no_filtering_StructuredProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_Event_Forwarder::StructuredProxyPushSupplier::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/StructuredPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/StructuredProxyPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Event_Forwarder/StructuredProxyPushSupplier:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Event_Forwarder::StructuredProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:Event_Forwarder/StructuredProxyPushSupplier:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_Event_Forwarder::StructuredProxyPushSupplier::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

Event_Forwarder::StructuredProxyPushSupplier *
POA_Event_Forwarder::StructuredProxyPushSupplier::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Event_Forwarder::StructuredProxyPushSupplier STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_Event_Forwarder_ProxyPushSupplier_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_Event_Forwarder_ProxyPushSupplier_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_Event_Forwarder_ProxyPushSupplier_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
     51, 51, 51, 51, 51,  0, 51, 30, 51, 20,
     10,  0,  0, 15, 51, 51, 51, 51, 51, 51,
     15, 30, 51, 51,  0,  0, 13, 51, 25, 51,
     51,  5, 51, 51, 51, 51, 51, 51,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_Event_Forwarder_ProxyPushSupplier_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 30,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 31,
      MIN_HASH_VALUE = 7,
      MAX_HASH_VALUE = 50,
      HASH_VALUE_RANGE = 44,
      DUPLICATES = 4,
      WORDLIST_SIZE = 37
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"set_qos", &POA_CosNotification::QoSAdmin::set_qos_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"_get_MyType", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyType_skel, 0},
      {"remove_filter", &POA_CosNotifyFilter::FilterAdmin::remove_filter_skel, 0},
      {"forward_any", &POA_Event_Forwarder::ProxyPushSupplier::forward_any_skel, 0},
      {"remove_all_filters", &POA_CosNotifyFilter::FilterAdmin::remove_all_filters_skel, 0},
      {"subscription_change", &POA_CosNotifyComm::NotifySubscribe::subscription_change_skel, 0},
      {"_get_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_priority_filter_skel, 0},
      {"_set_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_lifetime_filter_skel, 0},
      {"_get_lifetime_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_lifetime_filter_skel, 0},
      {"_set_priority_filter", &POA_CosNotifyChannelAdmin::ProxySupplier::_set_priority_filter_skel, 0},
      {"get_qos", &POA_CosNotification::QoSAdmin::get_qos_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"get_filter", &POA_CosNotifyFilter::FilterAdmin::get_filter_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_get_MyAdmin", &POA_CosNotifyChannelAdmin::ProxySupplier::_get_MyAdmin_skel, 0},
      {"forward_structured", &POA_Event_Forwarder::ProxyPushSupplier::forward_structured_skel, 0},
      {"get_all_filters", &POA_CosNotifyFilter::FilterAdmin::get_all_filters_skel, 0},
      {"resume_connection", &POA_CosNotifyChannelAdmin::ProxyPushSupplier::resume_connection_skel, 0},
      {"suspend_connection", &POA_CosNotifyChannelAdmin::ProxyPushSupplier::suspend_connection_skel, 0},
      {"disconnect_push_supplier", &POA_CosEventComm::PushSupplier::disconnect_push_supplier_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"validate_qos", &POA_CosNotification::QoSAdmin::validate_qos_skel, 0},
      {"forward_any_no_filtering", &POA_Event_Forwarder::ProxyPushSupplier::forward_any_no_filtering_skel, 0},
      {"add_filter", &POA_CosNotifyFilter::FilterAdmin::add_filter_skel, 0},
      {"validate_event_qos", &POA_CosNotifyChannelAdmin::ProxySupplier::validate_event_qos_skel, 0},
      {"connect_any_push_consumer", &POA_CosNotifyChannelAdmin::ProxyPushSupplier::connect_any_push_consumer_skel, 0},
      {"forward_structured_no_filtering", &POA_Event_Forwarder::ProxyPushSupplier::forward_structured_no_filtering_skel, 0},
      {"obtain_offered_types", &POA_CosNotifyChannelAdmin::ProxySupplier::obtain_offered_types_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -1,  -1,  -1,  -1,   7,  -1,  -1,   8,   9,  -1,  10, 
      -14,  -4,  11,  -1,  12,  13, -56,  -1,  18,  19,  20,  21,  22,  23, 
       24,  -1,  25,  -1,  26,  27,  28,  29,  -1,  30,  -1,  31,  32,  -1, 
       -1,  33,  -1,  34,  35,  -1,  -1,  -1,  36, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_Event_Forwarder_ProxyPushSupplier_Perfect_Hash_OpTable tao_Event_Forwarder_ProxyPushSupplier_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_Event_Forwarder::ProxyPushSupplier::ProxyPushSupplier (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_Event_Forwarder_ProxyPushSupplier_optable;
}

POA_Event_Forwarder::ProxyPushSupplier::ProxyPushSupplier (const ProxyPushSupplier& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNotification::QoSAdmin (rhs),
    POA_CosNotifyFilter::FilterAdmin (rhs),
    POA_CosNotifyChannelAdmin::ProxySupplier (rhs),
    POA_CosNotifyComm::NotifySubscribe (rhs),
    POA_CosEventComm::PushSupplier (rhs),
    POA_CosNotifyComm::PushSupplier (rhs),
    POA_CosNotifyChannelAdmin::ProxyPushSupplier (rhs)
{
}

POA_Event_Forwarder::ProxyPushSupplier::~ProxyPushSupplier (void)
{
}

namespace POA_Event_Forwarder
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class forward_structured_ProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline forward_structured_ProxyPushSupplier (
      POA_Event_Forwarder::ProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::StructuredEvent> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->forward_structured (
        arg_1);
    }
  
  private:
    POA_Event_Forwarder::ProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_Event_Forwarder::ProxyPushSupplier::forward_structured_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_val _tao_event;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_event
    };
  
  static size_t const nargs = 2;

  POA_Event_Forwarder::ProxyPushSupplier * const impl =
    dynamic_cast<POA_Event_Forwarder::ProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  forward_structured_ProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Event_Forwarder
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class forward_structured_no_filtering_ProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline forward_structured_no_filtering_ProxyPushSupplier (
      POA_Event_Forwarder::ProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNotification::StructuredEvent> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->forward_structured_no_filtering (
        arg_1);
    }
  
  private:
    POA_Event_Forwarder::ProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_Event_Forwarder::ProxyPushSupplier::forward_structured_no_filtering_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNotification::StructuredEvent>::in_arg_val _tao_event;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_event
    };
  
  static size_t const nargs = 2;

  POA_Event_Forwarder::ProxyPushSupplier * const impl =
    dynamic_cast<POA_Event_Forwarder::ProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  forward_structured_no_filtering_ProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Event_Forwarder
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class forward_any_ProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline forward_any_ProxyPushSupplier (
      POA_Event_Forwarder::ProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->forward_any (
        arg_1);
    }
  
  private:
    POA_Event_Forwarder::ProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_Event_Forwarder::ProxyPushSupplier::forward_any_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_event;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_event
    };
  
  static size_t const nargs = 2;

  POA_Event_Forwarder::ProxyPushSupplier * const impl =
    dynamic_cast<POA_Event_Forwarder::ProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  forward_any_ProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_Event_Forwarder
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class forward_any_no_filtering_ProxyPushSupplier
    : public TAO::Upcall_Command
  {
  public:
    inline forward_any_no_filtering_ProxyPushSupplier (
      POA_Event_Forwarder::ProxyPushSupplier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Any>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Any> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->forward_any_no_filtering (
        arg_1);
    }
  
  private:
    POA_Event_Forwarder::ProxyPushSupplier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_Event_Forwarder::ProxyPushSupplier::forward_any_no_filtering_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Any>::in_arg_val _tao_event;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_event
    };
  
  static size_t const nargs = 2;

  POA_Event_Forwarder::ProxyPushSupplier * const impl =
    dynamic_cast<POA_Event_Forwarder::ProxyPushSupplier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  forward_any_no_filtering_ProxyPushSupplier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_Event_Forwarder::ProxyPushSupplier::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotification/QoSAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyFilter/FilterAdmin:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxySupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/NotifySubscribe:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosEventComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyComm/PushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNotifyChannelAdmin/ProxyPushSupplier:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:Event_Forwarder/ProxyPushSupplier:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_Event_Forwarder::ProxyPushSupplier::_interface_repository_id (void) const
{
  return "IDL:Event_Forwarder/ProxyPushSupplier:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_Event_Forwarder::ProxyPushSupplier::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

Event_Forwarder::ProxyPushSupplier *
POA_Event_Forwarder::ProxyPushSupplier::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::Event_Forwarder::ProxyPushSupplier STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* ifndef */

