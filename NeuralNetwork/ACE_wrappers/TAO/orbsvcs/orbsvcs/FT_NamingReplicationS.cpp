// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:635

#ifndef _TAO_IDL_FT_NAMINGREPLICATIONS_KVMPYD_CPP_
#define _TAO_IDL_FT_NAMINGREPLICATIONS_KVMPYD_CPP_


#include "FT_NamingReplicationS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/Exception_Data.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_FT_Naming_UpdatePushNotifier_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_FT_Naming_UpdatePushNotifier_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_FT_Naming_UpdatePushNotifier_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24,  0, 24,  0, 24, 24,
      0,  5, 24, 24, 24, 24, 24, 24, 24, 24,
      0, 24, 24, 24,  5, 24,  0, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_FT_Naming_UpdatePushNotifier_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 23,
      HASH_VALUE_RANGE = 19,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"notify_update", &POA_FT_Naming::UpdatePushNotifier::notify_update_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"register_peer", &POA_FT_Naming::UpdatePushNotifier::register_peer_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_FT_Naming_UpdatePushNotifier_Perfect_Hash_OpTable tao_FT_Naming_UpdatePushNotifier_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_FT_Naming::UpdatePushNotifier::UpdatePushNotifier (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_FT_Naming_UpdatePushNotifier_optable;
}

POA_FT_Naming::UpdatePushNotifier::UpdatePushNotifier (const UpdatePushNotifier& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_FT_Naming::UpdatePushNotifier::~UpdatePushNotifier (void)
{
}

namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class register_peer_UpdatePushNotifier
    : public TAO::Upcall_Command
  {
  public:
    inline register_peer_UpdatePushNotifier (
      POA_FT_Naming::UpdatePushNotifier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::FT_Naming::UpdatePushNotifier>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::FT_Naming::UpdatePushNotifier> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::FT_Naming::ReplicaInfo>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::FT_Naming::ReplicaInfo> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->register_peer (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_FT_Naming::UpdatePushNotifier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::UpdatePushNotifier::register_peer_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::FT_Naming::UpdatePushNotifier>::in_arg_val _tao_peer;
  TAO::SArg_Traits< ::FT_Naming::ReplicaInfo>::in_arg_val _tao_info;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_initial_seq_num;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_peer,
      &_tao_info,
      &_tao_initial_seq_num
    };
  
  static size_t const nargs = 4;

  POA_FT_Naming::UpdatePushNotifier * const impl =
    dynamic_cast<POA_FT_Naming::UpdatePushNotifier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  register_peer_UpdatePushNotifier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class notify_update_UpdatePushNotifier
    : public TAO::Upcall_Command
  {
  public:
    inline notify_update_UpdatePushNotifier (
      POA_FT_Naming::UpdatePushNotifier * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULongLong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::FT_Naming::UpdateInfoSeq>::inout_arg_type arg_2 =
        TAO::Portable_Server::get_inout_arg< ::FT_Naming::UpdateInfoSeq> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->notify_update (
        arg_1
        , arg_2);
    }
  
  private:
    POA_FT_Naming::UpdatePushNotifier * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::UpdatePushNotifier::notify_update_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_seq_num;
  TAO::SArg_Traits< ::FT_Naming::UpdateInfoSeq>::inout_arg_val _tao_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_seq_num,
      &_tao_info
    };
  
  static size_t const nargs = 3;

  POA_FT_Naming::UpdatePushNotifier * const impl =
    dynamic_cast<POA_FT_Naming::UpdatePushNotifier *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  notify_update_UpdatePushNotifier command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_FT_Naming::UpdatePushNotifier::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:FT_Naming/UpdatePushNotifier:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_FT_Naming::UpdatePushNotifier::_interface_repository_id (void) const
{
  return "IDL:FT_Naming/UpdatePushNotifier:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_FT_Naming::UpdatePushNotifier::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

FT_Naming::UpdatePushNotifier *
POA_FT_Naming::UpdatePushNotifier::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::FT_Naming::UpdatePushNotifier STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_FT_Naming_AMI_UpdatePushNotifierHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_FT_Naming_AMI_UpdatePushNotifierHandler_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_FT_Naming_AMI_UpdatePushNotifierHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20,  0, 20,  0, 20, 20,
      0,  5, 20, 20, 20, 20, 20, 20, 20, 20,
      0, 20,  0, 20, 20, 20,  0, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_FT_Naming_AMI_UpdatePushNotifierHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 19,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 19,
      HASH_VALUE_RANGE = 15,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"",0,0},{"",0,0},
      {"notify_update", &POA_FT_Naming::AMI_UpdatePushNotifierHandler::notify_update_skel, 0},
      {"notify_update_excep", &POA_FT_Naming::AMI_UpdatePushNotifierHandler::notify_update_excep_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_FT_Naming_AMI_UpdatePushNotifierHandler_Perfect_Hash_OpTable tao_FT_Naming_AMI_UpdatePushNotifierHandler_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_FT_Naming::AMI_UpdatePushNotifierHandler::AMI_UpdatePushNotifierHandler (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_FT_Naming_AMI_UpdatePushNotifierHandler_optable;
}

POA_FT_Naming::AMI_UpdatePushNotifierHandler::AMI_UpdatePushNotifierHandler (const AMI_UpdatePushNotifierHandler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs)
{
}

POA_FT_Naming::AMI_UpdatePushNotifierHandler::~AMI_UpdatePushNotifierHandler (void)
{
}

namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class notify_update_AMI_UpdatePushNotifierHandler
    : public TAO::Upcall_Command
  {
  public:
    inline notify_update_AMI_UpdatePushNotifierHandler (
      POA_FT_Naming::AMI_UpdatePushNotifierHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::FT_Naming::UpdateInfoSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::FT_Naming::UpdateInfoSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->notify_update (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_UpdatePushNotifierHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_UpdatePushNotifierHandler::notify_update_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::FT_Naming::UpdateInfoSeq>::in_arg_val _tao_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_info
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_UpdatePushNotifierHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_UpdatePushNotifierHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  notify_update_AMI_UpdatePushNotifierHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class notify_update_excep_AMI_UpdatePushNotifierHandler
    : public TAO::Upcall_Command
  {
  public:
    inline notify_update_excep_AMI_UpdatePushNotifierHandler (
      POA_FT_Naming::AMI_UpdatePushNotifierHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->notify_update_excep (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_UpdatePushNotifierHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_UpdatePushNotifierHandler::notify_update_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_UpdatePushNotifierHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_UpdatePushNotifierHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  notify_update_excep_AMI_UpdatePushNotifierHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_FT_Naming::AMI_UpdatePushNotifierHandler::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FT_Naming/AMI_UpdatePushNotifierHandler:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_FT_Naming::AMI_UpdatePushNotifierHandler::_interface_repository_id (void) const
{
  return "IDL:FT_Naming/AMI_UpdatePushNotifierHandler:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_FT_Naming::AMI_UpdatePushNotifierHandler::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

FT_Naming::AMI_UpdatePushNotifierHandler *
POA_FT_Naming::AMI_UpdatePushNotifierHandler::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::FT_Naming::AMI_UpdatePushNotifierHandler STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_FT_Naming_ReplicationManager_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_FT_Naming_ReplicationManager_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_FT_Naming_ReplicationManager_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
     28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
     28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
     28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
     28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
     28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
     28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
     28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
     28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
     28, 28, 28, 28, 28,  0, 28,  0, 28, 28,
      0,  5, 28, 28, 28, 28, 28, 28, 28, 28,
      0, 28,  0, 28,  0, 28,  0, 28, 28, 28,
     28, 28, 28, 28, 28, 28, 28, 28,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_FT_Naming_ReplicationManager_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 27,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 27,
      HASH_VALUE_RANGE = 23,
      DUPLICATES = 0,
      WORDLIST_SIZE = 13
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"register_replica", &POA_FT_Naming::ReplicationManager::register_replica_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"notify_updated_context", &POA_FT_Naming::ReplicationManager::notify_updated_context_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"notify_updated_object_group", &POA_FT_Naming::ReplicationManager::notify_updated_object_group_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_FT_Naming_ReplicationManager_Perfect_Hash_OpTable tao_FT_Naming_ReplicationManager_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_FT_Naming::ReplicationManager::ReplicationManager (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_FT_Naming_ReplicationManager_optable;
}

POA_FT_Naming::ReplicationManager::ReplicationManager (const ReplicationManager& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_FT_Naming::ReplicationManager::~ReplicationManager (void)
{
}

namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class register_replica_ReplicationManager
    : public TAO::Upcall_Command
  {
  public:
    inline register_replica_ReplicationManager (
      POA_FT_Naming::ReplicationManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::FT_Naming::ReplicaInfo>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::FT_Naming::ReplicaInfo> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::FT_Naming::ReplicationManager>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::FT_Naming::ReplicationManager> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::FT_Naming::ReplicaInfo>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::FT_Naming::ReplicaInfo> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->register_replica (
          arg_1
          , arg_2);
    }
  
  private:
    POA_FT_Naming::ReplicationManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::ReplicationManager::register_replica_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      FT_Naming::_tc_NotAvailable
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::FT_Naming::ReplicaInfo>::ret_val retval;
  TAO::SArg_Traits< ::FT_Naming::ReplicationManager>::in_arg_val _tao_replica;
  TAO::SArg_Traits< ::FT_Naming::ReplicaInfo>::in_arg_val _tao_replica_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_replica,
      &_tao_replica_info
    };
  
  static size_t const nargs = 3;

  POA_FT_Naming::ReplicationManager * const impl =
    dynamic_cast<POA_FT_Naming::ReplicationManager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  register_replica_ReplicationManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class notify_updated_object_group_ReplicationManager
    : public TAO::Upcall_Command
  {
  public:
    inline notify_updated_object_group_ReplicationManager (
      POA_FT_Naming::ReplicationManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::FT_Naming::ObjectGroupUpdate>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::FT_Naming::ObjectGroupUpdate> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->notify_updated_object_group (
        arg_1);
    }
  
  private:
    POA_FT_Naming::ReplicationManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::ReplicationManager::notify_updated_object_group_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::FT_Naming::ObjectGroupUpdate>::in_arg_val _tao_group_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_group_info
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::ReplicationManager * const impl =
    dynamic_cast<POA_FT_Naming::ReplicationManager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  notify_updated_object_group_ReplicationManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class notify_updated_context_ReplicationManager
    : public TAO::Upcall_Command
  {
  public:
    inline notify_updated_context_ReplicationManager (
      POA_FT_Naming::ReplicationManager * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::FT_Naming::NamingContextUpdate>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::FT_Naming::NamingContextUpdate> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->notify_updated_context (
        arg_1);
    }
  
  private:
    POA_FT_Naming::ReplicationManager * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::ReplicationManager::notify_updated_context_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::FT_Naming::NamingContextUpdate>::in_arg_val _tao_context_info;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_context_info
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::ReplicationManager * const impl =
    dynamic_cast<POA_FT_Naming::ReplicationManager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  notify_updated_context_ReplicationManager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_FT_Naming::ReplicationManager::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:FT_Naming/ReplicationManager:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_FT_Naming::ReplicationManager::_interface_repository_id (void) const
{
  return "IDL:FT_Naming/ReplicationManager:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_FT_Naming::ReplicationManager::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

FT_Naming::ReplicationManager *
POA_FT_Naming::ReplicationManager::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::FT_Naming::ReplicationManager STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1863

class TAO_FT_Naming_AMI_ReplicationManagerHandler_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_FT_Naming_AMI_ReplicationManagerHandler_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_FT_Naming_AMI_ReplicationManagerHandler_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23,  0, 23,  0, 23, 23,
      0,  5, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23,  0, 23,  0, 23,  0, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_FT_Naming_AMI_ReplicationManagerHandler_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 22,
      HASH_VALUE_RANGE = 18,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"register_replica", &POA_FT_Naming::AMI_ReplicationManagerHandler::register_replica_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"register_replica_excep", &POA_FT_Naming::AMI_ReplicationManagerHandler::register_replica_excep_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_FT_Naming_AMI_ReplicationManagerHandler_Perfect_Hash_OpTable tao_FT_Naming_AMI_ReplicationManagerHandler_optable;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:90

POA_FT_Naming::AMI_ReplicationManagerHandler::AMI_ReplicationManagerHandler (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_FT_Naming_AMI_ReplicationManagerHandler_optable;
}

POA_FT_Naming::AMI_ReplicationManagerHandler::AMI_ReplicationManagerHandler (const AMI_ReplicationManagerHandler& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    ::POA_Messaging::ReplyHandler (rhs)
{
}

POA_FT_Naming::AMI_ReplicationManagerHandler::~AMI_ReplicationManagerHandler (void)
{
}

namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class register_replica_AMI_ReplicationManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline register_replica_AMI_ReplicationManagerHandler (
      POA_FT_Naming::AMI_ReplicationManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::FT_Naming::ReplicaInfo>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::FT_Naming::ReplicaInfo> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->register_replica (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_ReplicationManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_ReplicationManagerHandler::register_replica_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      FT_Naming::_tc_NotAvailable
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::FT_Naming::ReplicaInfo>::in_arg_val _tao_ami_return_val;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ami_return_val
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_ReplicationManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_ReplicationManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  register_replica_AMI_ReplicationManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_FT_Naming
{
  

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:80

  class register_replica_excep_AMI_ReplicationManagerHandler
    : public TAO::Upcall_Command
  {
  public:
    inline register_replica_excep_AMI_ReplicationManagerHandler (
      POA_FT_Naming::AMI_ReplicationManagerHandler * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::Messaging::ExceptionHolder> (
          this->operation_details_,
          this->args_,
          1);
        
      

      static TAO::Exception_Data
      _tao_FT_Naming_AMI_ReplicationManagerHandler_register_replica_excep_exceptiondata [] = 
        {
          {
            "IDL:FT_Naming/NotAvailable:1.0",
            FT_Naming::NotAvailable::_alloc
#if TAO_HAS_INTERCEPTORS == 1
            , FT_Naming::_tc_NotAvailable
#endif /* TAO_HAS_INTERCEPTORS */
          }
        };
      TAO::ExceptionHolder *tao_excepholder = 
        dynamic_cast<TAO::ExceptionHolder *> (arg_1);
      if (tao_excepholder != 0)
        {
          tao_excepholder->set_exception_data (_tao_FT_Naming_AMI_ReplicationManagerHandler_register_replica_excep_exceptiondata, 1);
        }
      
      this->servant_->register_replica_excep (
        arg_1);
    }
  
  private:
    POA_FT_Naming::AMI_ReplicationManagerHandler * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:168

void POA_FT_Naming::AMI_ReplicationManagerHandler::register_replica_excep_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      FT_Naming::_tc_NotAvailable
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_excep_holder
    };
  
  static size_t const nargs = 2;

  POA_FT_Naming::AMI_ReplicationManagerHandler * const impl =
    dynamic_cast<POA_FT_Naming::AMI_ReplicationManagerHandler *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  register_replica_excep_AMI_ReplicationManagerHandler command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:163



::CORBA::Boolean POA_FT_Naming::AMI_ReplicationManagerHandler::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FT_Naming/AMI_ReplicationManagerHandler:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_FT_Naming::AMI_ReplicationManagerHandler::_interface_repository_id (void) const
{
  return "IDL:FT_Naming/AMI_ReplicationManagerHandler:1.0";
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:423

void POA_FT_Naming::AMI_ReplicationManagerHandler::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:370

FT_Naming::AMI_ReplicationManagerHandler *
POA_FT_Naming::AMI_ReplicationManagerHandler::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::FT_Naming::AMI_ReplicationManagerHandler STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

