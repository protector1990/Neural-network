// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:149

#ifndef _TAO_IDL_FT_REPLICATIONMANAGERC_D0FWSU_H_
#define _TAO_IDL_FT_REPLICATIONMANAGERC_D0FWSU_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/FaultTolerance/fault_tol_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/String_Manager_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "orbsvcs/PortableGroupC.h"
#include "orbsvcs/FT_CORBAC.h"
#include "orbsvcs/FT_ReplicaC.h"
#include "orbsvcs/FT_NotifierC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 5 || TAO_MICRO_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_root\root_ch.cpp:157

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

namespace FT
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_ch.cpp:41

  class TAO_FT_Export InterfaceNotFound : public ::CORBA::UserException
  {
  public:

    InterfaceNotFound (void);
    InterfaceNotFound (const InterfaceNotFound &);
    ~InterfaceNotFound (void);

    InterfaceNotFound &operator= (const InterfaceNotFound &);

    static void _tao_any_destructor (void *);

    static InterfaceNotFound *_downcast ( ::CORBA::Exception *);
    static const InterfaceNotFound *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_InterfaceNotFound;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_FT_REPLICATIONMANAGER__VAR_OUT_CH_)
#define _FT_REPLICATIONMANAGER__VAR_OUT_CH_

  class ReplicationManager;
  typedef ReplicationManager *ReplicationManager_ptr;
  typedef TAO_Objref_Var_T<ReplicationManager> ReplicationManager_var;
  typedef TAO_Objref_Out_T<ReplicationManager> ReplicationManager_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_FT_Export ReplicationManager
    : public virtual ::PortableGroup::PropertyManager,
      public virtual ::FT::FTObjectGroupManager,
      public virtual ::PortableGroup::GenericFactory
  
  {
  public:
    friend class TAO::Narrow_Utils<ReplicationManager>;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef ReplicationManager_ptr _ptr_type;
    typedef ReplicationManager_var _var_type;
    typedef ReplicationManager_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ReplicationManager_ptr _duplicate (ReplicationManager_ptr obj);

    static void _tao_release (ReplicationManager_ptr obj);

    static ReplicationManager_ptr _narrow (::CORBA::Object_ptr obj);
    static ReplicationManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ReplicationManager_ptr _nil (void);

    virtual void register_fault_notifier (
      ::FT::FaultNotifier_ptr fault_notifier);

    virtual ::FT::FaultNotifier_ptr get_fault_notifier (
      void);

    virtual ::PortableGroup::FactoryRegistry_ptr get_factory_registry (
      const ::PortableGroup::Criteria & selection_criteria);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    ReplicationManager (void);

    // Concrete non-local interface only.
    ReplicationManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ReplicationManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~ReplicationManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ReplicationManager (const ReplicationManager &);

    void operator= (const ReplicationManager &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FT_Export ::CORBA::TypeCode_ptr const _tc_ReplicationManager;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64

} // module FT

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:66


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_FT_REPLICATIONMANAGER__ARG_TRAITS_)
#define _FT_REPLICATIONMANAGER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT::ReplicationManager>
    : public
        Object_Arg_Traits_T<
            ::FT::ReplicationManager_ptr,
            ::FT::ReplicationManager_var,
            ::FT::ReplicationManager_out,
            TAO::Objref_Traits<FT::ReplicationManager>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:60


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FT_REPLICATIONMANAGER__TRAITS_)
#define _FT_REPLICATIONMANAGER__TRAITS_

  template<>
  struct TAO_FT_Export Objref_Traits< ::FT::ReplicationManager>
  {
    static ::FT::ReplicationManager_ptr duplicate (
        ::FT::ReplicationManager_ptr p);
    static void release (
        ::FT::ReplicationManager_ptr p);
    static ::FT::ReplicationManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT::ReplicationManager_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  

  TAO_FT_Export void operator<<= (::CORBA::Any &, const ::FT::InterfaceNotFound &); // copying version
  TAO_FT_Export void operator<<= (::CORBA::Any &, ::FT::InterfaceNotFound*); // noncopying version
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT::InterfaceNotFound *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export void operator<<= (::CORBA::Any &, const FT::InterfaceNotFound &); // copying version
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::InterfaceNotFound*); // noncopying version
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT::InterfaceNotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT
{
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, ReplicationManager_ptr); // copying
  TAO_FT_Export void operator<<= ( ::CORBA::Any &, ReplicationManager_ptr *); // non-copying
  TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ReplicationManager_ptr &);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export void operator<<= (::CORBA::Any &, FT::ReplicationManager_ptr); // copying
TAO_FT_Export void operator<<= (::CORBA::Any &, FT::ReplicationManager_ptr *); // non-copying
TAO_FT_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT::ReplicationManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\cdr_op_ch.cpp:37

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::InterfaceNotFound &);
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::InterfaceNotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FT_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT::ReplicationManager_ptr );
TAO_FT_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT::ReplicationManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1686


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "FT_ReplicationManagerC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

