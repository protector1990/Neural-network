// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:149

#ifndef _TAO_IDL_FT_NAMINGREPLICATIONC_HFYFJC_H_
#define _TAO_IDL_FT_NAMINGREPLICATIONC_HFYFJC_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/Naming/FaultTolerant/ftnaming_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Basic_Argument_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/AnyTypeCode/Any_Arg_Traits.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "orbsvcs/CosNamingC.h"
#include "orbsvcs/FT_NamingManagerC.h"
#include "orbsvcs/FT_CORBA_ORBC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 5 || TAO_MICRO_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_root\root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

namespace FT_Naming
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\enum_ch.cpp:44

  enum ChangeType
  {
    NEW,
    UPDATED,
    DELETED
  };

  typedef ChangeType &ChangeType_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_ChangeType;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_ch.cpp:41

  class TAO_FtNaming_Export NotAvailable : public ::CORBA::UserException
  {
  public:

    NotAvailable (void);
    NotAvailable (const NotAvailable &);
    ~NotAvailable (void);

    NotAvailable &operator= (const NotAvailable &);

    static void _tao_any_destructor (void *);

    static NotAvailable *_downcast ( ::CORBA::Exception *);
    static const NotAvailable *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_NotAvailable;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_ch.cpp:41

  class TAO_FtNaming_Export InvalidPeer : public ::CORBA::UserException
  {
  public:
    ::TAO::String_Manager reason;

    InvalidPeer (void);
    InvalidPeer (const InvalidPeer &);
    ~InvalidPeer (void);

    InvalidPeer &operator= (const InvalidPeer &);

    static void _tao_any_destructor (void *);

    static InvalidPeer *_downcast ( ::CORBA::Exception *);
    static const InvalidPeer *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\exception_ctor.cpp:51

    InvalidPeer (
        const char * _tao_reason);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_InvalidPeer;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:258

  struct NamingContextUpdate;

  typedef
    ::TAO_Var_Var_T<
        NamingContextUpdate
      >
    NamingContextUpdate_var;

  typedef
    ::TAO_Out_T<
        NamingContextUpdate
      >
    NamingContextUpdate_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_ch.cpp:48

  struct TAO_FtNaming_Export NamingContextUpdate
  {

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef NamingContextUpdate_var _var_type;
    typedef NamingContextUpdate_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager context_name;
    FT_Naming::ChangeType change_type;
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_NamingContextUpdate;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:258

  struct ReplicaInfo;

  typedef
    ::TAO_Var_Var_T<
        ReplicaInfo
      >
    ReplicaInfo_var;

  typedef
    ::TAO_Out_T<
        ReplicaInfo
      >
    ReplicaInfo_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_ch.cpp:48

  struct TAO_FtNaming_Export ReplicaInfo
  {

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef ReplicaInfo_var _var_type;
    typedef ReplicaInfo_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::CORBA::Boolean combined;
    CosNaming::NamingContext_var root_context;
    FT_Naming::NamingManager_var naming_manager;
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_ReplicaInfo;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:258

  struct ObjectGroupUpdate;

  typedef
    ::TAO_Fixed_Var_T<
        ObjectGroupUpdate
      >
    ObjectGroupUpdate_var;

  typedef
    ObjectGroupUpdate &
    ObjectGroupUpdate_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_ch.cpp:48

  struct TAO_FtNaming_Export ObjectGroupUpdate
  {

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef ObjectGroupUpdate_var _var_type;
    typedef ObjectGroupUpdate_out _out_type;

    static void _tao_any_destructor (void *);
    
    PortableGroup::ObjectGroupId id;
    FT_Naming::ChangeType change_type;
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_ObjectGroupUpdate;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\enum_ch.cpp:44

  enum EntityKind
  {
    ctx_name,
    obj_grp
  };

  typedef EntityKind &EntityKind_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_EntityKind;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:258

  class UpdateInfo;

  typedef
    ::TAO_Var_Var_T<
        UpdateInfo
      >
    UpdateInfo_var;

  typedef
    ::TAO_Out_T<
        UpdateInfo
      >
    UpdateInfo_out;

  class TAO_FtNaming_Export UpdateInfo
  {
  public:
    UpdateInfo (void);
    UpdateInfo (const UpdateInfo &);
    ~UpdateInfo (void);

    UpdateInfo &operator= (const UpdateInfo &);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union\discriminant_ch.cpp:67

    void _d (FT_Naming::EntityKind);
    FT_Naming::EntityKind _d (void) const;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef UpdateInfo_var _var_type;
    typedef UpdateInfo_out _out_type;

    static void _tao_any_destructor (void *);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch\public_ch.cpp:656

    void ctx (const FT_Naming::NamingContextUpdate &);
    const FT_Naming::NamingContextUpdate &ctx (void) const;
    FT_Naming::NamingContextUpdate &ctx (void);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch\public_ch.cpp:656

    void grp (const FT_Naming::ObjectGroupUpdate &);
    const FT_Naming::ObjectGroupUpdate &grp (void) const;
    FT_Naming::ObjectGroupUpdate &grp (void);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union\union_ch.cpp:121

    void _default (void);
  private:
    FT_Naming::EntityKind disc_;

    union
    {
      // TAO_IDL - Generated from
      // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch\private_ch.cpp:519
      FT_Naming::NamingContextUpdate *ctx_;
      // TAO_IDL - Generated from
      // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union_branch\private_ch.cpp:519
      FT_Naming::ObjectGroupUpdate grp_;
    } u_;

    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_UpdateInfo;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:99

#if !defined (_FT_NAMING_UPDATEINFOSEQ_CH_)
#define _FT_NAMING_UPDATEINFOSEQ_CH_

  class UpdateInfoSeq;
  typedef ::TAO_VarSeq_Var_T<UpdateInfoSeq> UpdateInfoSeq_var;
  typedef ::TAO_Seq_Out_T<UpdateInfoSeq> UpdateInfoSeq_out;
  

  class TAO_FtNaming_Export UpdateInfoSeq
    : public
        ::TAO::unbounded_value_sequence< UpdateInfo>
  {
  public:
    UpdateInfoSeq (void);
    UpdateInfoSeq ( ::CORBA::ULong max);
    UpdateInfoSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      UpdateInfo* buffer,
      ::CORBA::Boolean release = false);
    UpdateInfoSeq (const UpdateInfoSeq &);
    virtual ~UpdateInfoSeq (void);
    

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef UpdateInfoSeq_var _var_type;
    typedef UpdateInfoSeq_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_UpdateInfoSeq;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_FT_NAMING_UPDATEPUSHNOTIFIER__VAR_OUT_CH_)
#define _FT_NAMING_UPDATEPUSHNOTIFIER__VAR_OUT_CH_

  class AMI_UpdatePushNotifierHandler;
  typedef AMI_UpdatePushNotifierHandler *AMI_UpdatePushNotifierHandler_ptr;

  class UpdatePushNotifier;
  typedef UpdatePushNotifier *UpdatePushNotifier_ptr;
  typedef TAO_Objref_Var_T<UpdatePushNotifier> UpdatePushNotifier_var;
  typedef TAO_Objref_Out_T<UpdatePushNotifier> UpdatePushNotifier_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_FtNaming_Export UpdatePushNotifier
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<UpdatePushNotifier>;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef UpdatePushNotifier_ptr _ptr_type;
    typedef UpdatePushNotifier_var _var_type;
    typedef UpdatePushNotifier_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static UpdatePushNotifier_ptr _duplicate (UpdatePushNotifier_ptr obj);

    static void _tao_release (UpdatePushNotifier_ptr obj);

    static UpdatePushNotifier_ptr _narrow (::CORBA::Object_ptr obj);
    static UpdatePushNotifier_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static UpdatePushNotifier_ptr _nil (void);

    virtual void register_peer (
      ::FT_Naming::UpdatePushNotifier_ptr peer,
      const ::FT_Naming::ReplicaInfo & info,
      ::CORBA::ULongLong initial_seq_num);

    virtual void notify_update (
      ::CORBA::ULongLong seq_num,
      ::FT_Naming::UpdateInfoSeq & info);

    virtual void sendc_notify_update (
      ::FT_Naming::AMI_UpdatePushNotifierHandler_ptr ami_handler,
      ::CORBA::ULongLong seq_num,
      const ::FT_Naming::UpdateInfoSeq & info);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    UpdatePushNotifier (void);

    // Concrete non-local interface only.
    UpdatePushNotifier (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    UpdatePushNotifier (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~UpdatePushNotifier (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    UpdatePushNotifier (const UpdatePushNotifier &);

    void operator= (const UpdatePushNotifier &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_UpdatePushNotifier;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_FT_NAMING_AMI_UPDATEPUSHNOTIFIERHANDLER__VAR_OUT_CH_)
#define _FT_NAMING_AMI_UPDATEPUSHNOTIFIERHANDLER__VAR_OUT_CH_

  class AMI_UpdatePushNotifierHandler;
  typedef AMI_UpdatePushNotifierHandler *AMI_UpdatePushNotifierHandler_ptr;
  typedef TAO_Objref_Var_T<AMI_UpdatePushNotifierHandler> AMI_UpdatePushNotifierHandler_var;
  typedef TAO_Objref_Out_T<AMI_UpdatePushNotifierHandler> AMI_UpdatePushNotifierHandler_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_FtNaming_Export AMI_UpdatePushNotifierHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_UpdatePushNotifierHandler>;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef AMI_UpdatePushNotifierHandler_ptr _ptr_type;
    typedef AMI_UpdatePushNotifierHandler_var _var_type;
    typedef AMI_UpdatePushNotifierHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_UpdatePushNotifierHandler_ptr _duplicate (AMI_UpdatePushNotifierHandler_ptr obj);

    static void _tao_release (AMI_UpdatePushNotifierHandler_ptr obj);

    static AMI_UpdatePushNotifierHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_UpdatePushNotifierHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_UpdatePushNotifierHandler_ptr _nil (void);

    virtual void notify_update (
      const ::FT_Naming::UpdateInfoSeq & info);

    static void
    notify_update_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void notify_update_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_UpdatePushNotifierHandler (void);

    // Concrete non-local interface only.
    AMI_UpdatePushNotifierHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_UpdatePushNotifierHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_UpdatePushNotifierHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_UpdatePushNotifierHandler (const AMI_UpdatePushNotifierHandler &);

    void operator= (const AMI_UpdatePushNotifierHandler &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_AMI_UpdatePushNotifierHandler;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_FT_NAMING_REPLICATIONMANAGER__VAR_OUT_CH_)
#define _FT_NAMING_REPLICATIONMANAGER__VAR_OUT_CH_

  class AMI_ReplicationManagerHandler;
  typedef AMI_ReplicationManagerHandler *AMI_ReplicationManagerHandler_ptr;

  class ReplicationManager;
  typedef ReplicationManager *ReplicationManager_ptr;
  typedef TAO_Objref_Var_T<ReplicationManager> ReplicationManager_var;
  typedef TAO_Objref_Out_T<ReplicationManager> ReplicationManager_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_FtNaming_Export ReplicationManager
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<ReplicationManager>;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef ReplicationManager_ptr _ptr_type;
    typedef ReplicationManager_var _var_type;
    typedef ReplicationManager_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static ReplicationManager_ptr _duplicate (ReplicationManager_ptr obj);

    static void _tao_release (ReplicationManager_ptr obj);

    static ReplicationManager_ptr _narrow (::CORBA::Object_ptr obj);
    static ReplicationManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ReplicationManager_ptr _nil (void);

    virtual ::FT_Naming::ReplicaInfo * register_replica (
      ::FT_Naming::ReplicationManager_ptr replica,
      const ::FT_Naming::ReplicaInfo & replica_info);

    virtual void notify_updated_object_group (
      const ::FT_Naming::ObjectGroupUpdate & group_info);

    virtual void notify_updated_context (
      const ::FT_Naming::NamingContextUpdate & context_info);

    virtual void sendc_register_replica (
      ::FT_Naming::AMI_ReplicationManagerHandler_ptr ami_handler,
      ::FT_Naming::ReplicationManager_ptr replica,
      const ::FT_Naming::ReplicaInfo & replica_info);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    ReplicationManager (void);

    // Concrete non-local interface only.
    ReplicationManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    ReplicationManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~ReplicationManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ReplicationManager (const ReplicationManager &);

    void operator= (const ReplicationManager &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_ReplicationManager;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_FT_NAMING_AMI_REPLICATIONMANAGERHANDLER__VAR_OUT_CH_)
#define _FT_NAMING_AMI_REPLICATIONMANAGERHANDLER__VAR_OUT_CH_

  class AMI_ReplicationManagerHandler;
  typedef AMI_ReplicationManagerHandler *AMI_ReplicationManagerHandler_ptr;
  typedef TAO_Objref_Var_T<AMI_ReplicationManagerHandler> AMI_ReplicationManagerHandler_var;
  typedef TAO_Objref_Out_T<AMI_ReplicationManagerHandler> AMI_ReplicationManagerHandler_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_FtNaming_Export AMI_ReplicationManagerHandler
    : public virtual ::Messaging::ReplyHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_ReplicationManagerHandler>;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef AMI_ReplicationManagerHandler_ptr _ptr_type;
    typedef AMI_ReplicationManagerHandler_var _var_type;
    typedef AMI_ReplicationManagerHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_ReplicationManagerHandler_ptr _duplicate (AMI_ReplicationManagerHandler_ptr obj);

    static void _tao_release (AMI_ReplicationManagerHandler_ptr obj);

    static AMI_ReplicationManagerHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_ReplicationManagerHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_ReplicationManagerHandler_ptr _nil (void);

    virtual void register_replica (
      const ::FT_Naming::ReplicaInfo & ami_return_val);

    static void
    register_replica_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void register_replica_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_ReplicationManagerHandler (void);

    // Concrete non-local interface only.
    AMI_ReplicationManagerHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_ReplicationManagerHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_ReplicationManagerHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_ReplicationManagerHandler (const AMI_ReplicationManagerHandler &);

    void operator= (const AMI_ReplicationManagerHandler &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Export ::CORBA::TypeCode_ptr const _tc_AMI_ReplicationManagerHandler;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64

} // module FT_Naming

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::FT_Naming::ChangeType>
    : public
        Basic_Arg_Traits_T<
            ::FT_Naming::ChangeType,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::FT_Naming::NamingContextUpdate>
    : public
        Var_Size_Arg_Traits_T<
            ::FT_Naming::NamingContextUpdate,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::FT_Naming::ReplicaInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::FT_Naming::ReplicaInfo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::FT_Naming::ObjectGroupUpdate>
    : public
        Fixed_Size_Arg_Traits_T<
            ::FT_Naming::ObjectGroupUpdate,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:902

  template<>
  class Arg_Traits< ::FT_Naming::EntityKind>
    : public
        Basic_Arg_Traits_T<
            ::FT_Naming::EntityKind,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:1056

  template<>
  class Arg_Traits< ::FT_Naming::UpdateInfo>
    : public
        Var_Size_Arg_Traits_T<
            ::FT_Naming::UpdateInfo,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::FT_Naming::UpdateInfoSeq>
    : public
        Var_Size_Arg_Traits_T<
            ::FT_Naming::UpdateInfoSeq,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_FT_NAMING_UPDATEPUSHNOTIFIER__ARG_TRAITS_)
#define _FT_NAMING_UPDATEPUSHNOTIFIER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT_Naming::UpdatePushNotifier>
    : public
        Object_Arg_Traits_T<
            ::FT_Naming::UpdatePushNotifier_ptr,
            ::FT_Naming::UpdatePushNotifier_var,
            ::FT_Naming::UpdatePushNotifier_out,
            TAO::Objref_Traits<FT_Naming::UpdatePushNotifier>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_FT_NAMING_AMI_UPDATEPUSHNOTIFIERHANDLER__ARG_TRAITS_)
#define _FT_NAMING_AMI_UPDATEPUSHNOTIFIERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT_Naming::AMI_UpdatePushNotifierHandler>
    : public
        Object_Arg_Traits_T<
            ::FT_Naming::AMI_UpdatePushNotifierHandler_ptr,
            ::FT_Naming::AMI_UpdatePushNotifierHandler_var,
            ::FT_Naming::AMI_UpdatePushNotifierHandler_out,
            TAO::Objref_Traits<FT_Naming::AMI_UpdatePushNotifierHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_FT_NAMING_REPLICATIONMANAGER__ARG_TRAITS_)
#define _FT_NAMING_REPLICATIONMANAGER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT_Naming::ReplicationManager>
    : public
        Object_Arg_Traits_T<
            ::FT_Naming::ReplicationManager_ptr,
            ::FT_Naming::ReplicationManager_var,
            ::FT_Naming::ReplicationManager_out,
            TAO::Objref_Traits<FT_Naming::ReplicationManager>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_FT_NAMING_AMI_REPLICATIONMANAGERHANDLER__ARG_TRAITS_)
#define _FT_NAMING_AMI_REPLICATIONMANAGERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT_Naming::AMI_ReplicationManagerHandler>
    : public
        Object_Arg_Traits_T<
            ::FT_Naming::AMI_ReplicationManagerHandler_ptr,
            ::FT_Naming::AMI_ReplicationManagerHandler_var,
            ::FT_Naming::AMI_ReplicationManagerHandler_out,
            TAO::Objref_Traits<FT_Naming::AMI_ReplicationManagerHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FT_NAMING_UPDATEPUSHNOTIFIER__TRAITS_)
#define _FT_NAMING_UPDATEPUSHNOTIFIER__TRAITS_

  template<>
  struct TAO_FtNaming_Export Objref_Traits< ::FT_Naming::UpdatePushNotifier>
  {
    static ::FT_Naming::UpdatePushNotifier_ptr duplicate (
        ::FT_Naming::UpdatePushNotifier_ptr p);
    static void release (
        ::FT_Naming::UpdatePushNotifier_ptr p);
    static ::FT_Naming::UpdatePushNotifier_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT_Naming::UpdatePushNotifier_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FT_NAMING_AMI_UPDATEPUSHNOTIFIERHANDLER__TRAITS_)
#define _FT_NAMING_AMI_UPDATEPUSHNOTIFIERHANDLER__TRAITS_

  template<>
  struct TAO_FtNaming_Export Objref_Traits< ::FT_Naming::AMI_UpdatePushNotifierHandler>
  {
    static ::FT_Naming::AMI_UpdatePushNotifierHandler_ptr duplicate (
        ::FT_Naming::AMI_UpdatePushNotifierHandler_ptr p);
    static void release (
        ::FT_Naming::AMI_UpdatePushNotifierHandler_ptr p);
    static ::FT_Naming::AMI_UpdatePushNotifierHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT_Naming::AMI_UpdatePushNotifierHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FT_NAMING_REPLICATIONMANAGER__TRAITS_)
#define _FT_NAMING_REPLICATIONMANAGER__TRAITS_

  template<>
  struct TAO_FtNaming_Export Objref_Traits< ::FT_Naming::ReplicationManager>
  {
    static ::FT_Naming::ReplicationManager_ptr duplicate (
        ::FT_Naming::ReplicationManager_ptr p);
    static void release (
        ::FT_Naming::ReplicationManager_ptr p);
    static ::FT_Naming::ReplicationManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT_Naming::ReplicationManager_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FT_NAMING_AMI_REPLICATIONMANAGERHANDLER__TRAITS_)
#define _FT_NAMING_AMI_REPLICATIONMANAGERHANDLER__TRAITS_

  template<>
  struct TAO_FtNaming_Export Objref_Traits< ::FT_Naming::AMI_ReplicationManagerHandler>
  {
    static ::FT_Naming::AMI_ReplicationManagerHandler_ptr duplicate (
        ::FT_Naming::AMI_ReplicationManagerHandler_ptr p);
    static void release (
        ::FT_Naming::AMI_ReplicationManagerHandler_ptr p);
    static ::FT_Naming::AMI_ReplicationManagerHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT_Naming::AMI_ReplicationManagerHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  

  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, ::FT_Naming::ChangeType);
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FT_Naming::ChangeType &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::ChangeType);
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT_Naming::ChangeType &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  

  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const ::FT_Naming::NotAvailable &); // copying version
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, ::FT_Naming::NotAvailable*); // noncopying version
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT_Naming::NotAvailable *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const FT_Naming::NotAvailable &); // copying version
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::NotAvailable*); // noncopying version
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT_Naming::NotAvailable *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\any_op_ch.cpp:38

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  

  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const ::FT_Naming::InvalidPeer &); // copying version
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, ::FT_Naming::InvalidPeer*); // noncopying version
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT_Naming::InvalidPeer *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const FT_Naming::InvalidPeer &); // copying version
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::InvalidPeer*); // noncopying version
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT_Naming::InvalidPeer *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const ::FT_Naming::NamingContextUpdate &); // copying version
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, ::FT_Naming::NamingContextUpdate*); // noncopying version
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT_Naming::NamingContextUpdate *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const FT_Naming::NamingContextUpdate &); // copying version
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::NamingContextUpdate*); // noncopying version
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT_Naming::NamingContextUpdate *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const ::FT_Naming::ReplicaInfo &); // copying version
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, ::FT_Naming::ReplicaInfo*); // noncopying version
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT_Naming::ReplicaInfo *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const FT_Naming::ReplicaInfo &); // copying version
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::ReplicaInfo*); // noncopying version
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT_Naming::ReplicaInfo *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const ::FT_Naming::ObjectGroupUpdate &); // copying version
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, ::FT_Naming::ObjectGroupUpdate*); // noncopying version
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT_Naming::ObjectGroupUpdate *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const FT_Naming::ObjectGroupUpdate &); // copying version
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::ObjectGroupUpdate*); // noncopying version
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT_Naming::ObjectGroupUpdate *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\any_op_ch.cpp:36

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  

  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, ::FT_Naming::EntityKind);
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::FT_Naming::EntityKind &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::EntityKind);
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT_Naming::EntityKind &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union\any_op_ch.cpp:37



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const ::FT_Naming::UpdateInfo &); // copying version
  TAO_FtNaming_Export void operator<<= (::CORBA::Any &, ::FT_Naming::UpdateInfo*); // noncopying version
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT_Naming::UpdateInfo *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export void operator<<= (::CORBA::Any &, const FT_Naming::UpdateInfo &); // copying version
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::UpdateInfo*); // noncopying version
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT_Naming::UpdateInfo *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, const ::FT_Naming::UpdateInfoSeq &); // copying version
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, ::FT_Naming::UpdateInfoSeq*); // noncopying version
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT_Naming::UpdateInfoSeq *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, const FT_Naming::UpdateInfoSeq &); // copying version
TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, FT_Naming::UpdateInfoSeq*); // noncopying version
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT_Naming::UpdateInfoSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, UpdatePushNotifier_ptr); // copying
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, UpdatePushNotifier_ptr *); // non-copying
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UpdatePushNotifier_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::UpdatePushNotifier_ptr); // copying
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::UpdatePushNotifier_ptr *); // non-copying
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT_Naming::UpdatePushNotifier_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, AMI_UpdatePushNotifierHandler_ptr); // copying
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, AMI_UpdatePushNotifierHandler_ptr *); // non-copying
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_UpdatePushNotifierHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::AMI_UpdatePushNotifierHandler_ptr); // copying
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::AMI_UpdatePushNotifierHandler_ptr *); // non-copying
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT_Naming::AMI_UpdatePushNotifierHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, ReplicationManager_ptr); // copying
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, ReplicationManager_ptr *); // non-copying
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ReplicationManager_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::ReplicationManager_ptr); // copying
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::ReplicationManager_ptr *); // non-copying
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT_Naming::ReplicationManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, AMI_ReplicationManagerHandler_ptr); // copying
  TAO_FtNaming_Export void operator<<= ( ::CORBA::Any &, AMI_ReplicationManagerHandler_ptr *); // non-copying
  TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_ReplicationManagerHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::AMI_ReplicationManagerHandler_ptr); // copying
TAO_FtNaming_Export void operator<<= (::CORBA::Any &, FT_Naming::AMI_ReplicationManagerHandler_ptr *); // non-copying
TAO_FtNaming_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT_Naming::AMI_ReplicationManagerHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, FT_Naming::ChangeType _tao_enumerator);
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, FT_Naming::ChangeType &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::NotAvailable &);
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::NotAvailable &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_exception\cdr_op_ch.cpp:37
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::InvalidPeer &);
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::InvalidPeer &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::NamingContextUpdate &);
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::NamingContextUpdate &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::ReplicaInfo &);
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::ReplicaInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:43


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::ObjectGroupUpdate &);
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::ObjectGroupUpdate &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_enum\cdr_op_ch.cpp:34


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, FT_Naming::EntityKind _tao_enumerator);
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &strm, FT_Naming::EntityKind &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_union\cdr_op_ch.cpp:38


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::UpdateInfo &);
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::UpdateInfo &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_FT_Naming_UpdateInfoSeq_H_
#define _TAO_CDR_OP_FT_Naming_UpdateInfoSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_FtNaming_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT_Naming::UpdateInfoSeq &_tao_sequence);
TAO_FtNaming_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT_Naming::UpdateInfoSeq &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_FT_Naming_UpdateInfoSeq_H_ */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::UpdatePushNotifier_ptr );
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::UpdatePushNotifier_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::AMI_UpdatePushNotifierHandler_ptr );
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::AMI_UpdatePushNotifierHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::ReplicationManager_ptr );
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::ReplicationManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::AMI_ReplicationManagerHandler_ptr );
TAO_FtNaming_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::AMI_ReplicationManagerHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1686
#if defined (__ACE_INLINE__)
#include "FT_NamingReplicationC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

