// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:366


#include "FT_NamingManagerC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Value_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Value_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Messaging/Asynch_Invocation_Adapter.h"
#include "tao/Messaging/ExceptionHolder_i.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "FT_NamingManagerC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Naming_ObjectGroup (
    ::CORBA::tk_alias,
    "IDL:FT_Naming/ObjectGroup:1.0",
    "ObjectGroup",
    &PortableGroup::_tc_ObjectGroup);
  

namespace FT_Naming
{
  ::CORBA::TypeCode_ptr const _tc_ObjectGroup =
    &_tao_tc_FT_Naming_ObjectGroup;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Naming_LoadBalancingStrategyValue (
    ::CORBA::tk_alias,
    "IDL:FT_Naming/LoadBalancingStrategyValue:1.0",
    "LoadBalancingStrategyValue",
    &CORBA::_tc_long);
  

namespace FT_Naming
{
  ::CORBA::TypeCode_ptr const _tc_LoadBalancingStrategyValue =
    &_tao_tc_FT_Naming_LoadBalancingStrategyValue;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Naming_GroupName (
    ::CORBA::tk_alias,
    "IDL:FT_Naming/GroupName:1.0",
    "GroupName",
    &CORBA::_tc_string);
  

namespace FT_Naming
{
  ::CORBA::TypeCode_ptr const _tc_GroupName =
    &_tao_tc_FT_Naming_GroupName;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:105

#if !defined (_FT_NAMING_GROUPNAMES_CS_)
#define _FT_NAMING_GROUPNAMES_CS_

FT_Naming::GroupNames::GroupNames (void)
{}

FT_Naming::GroupNames::GroupNames (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

FT_Naming::GroupNames::GroupNames (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release)
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

FT_Naming::GroupNames::GroupNames (
    const GroupNames &seq)
  : ::TAO::unbounded_basic_string_sequence<char> (seq)
{}

FT_Naming::GroupNames::~GroupNames (void)
{}

void FT_Naming::GroupNames::_tao_any_destructor (
    void * _tao_void_pointer)
{
  GroupNames * _tao_tmp_pointer =
    static_cast<GroupNames *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:49



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:461


#ifndef _TAO_TYPECODE_FT_Naming_GroupNames_GUARD
#define _TAO_TYPECODE_FT_Naming_GroupNames_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        FT_Naming_GroupNames_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_string,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_FT_Naming_GroupNames_0 =
        &FT_Naming_GroupNames_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_FT_Naming_GroupNames_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_FT_Naming_GroupNames (
    ::CORBA::tk_alias,
    "IDL:FT_Naming/GroupNames:1.0",
    "GroupNames",
    &TAO::TypeCode::tc_FT_Naming_GroupNames_0);
  

namespace FT_Naming
{
  ::CORBA::TypeCode_ptr const _tc_GroupNames =
    &_tao_tc_FT_Naming_GroupNames;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for FT_Naming::NamingManager.

FT_Naming::NamingManager_ptr
TAO::Objref_Traits<FT_Naming::NamingManager>::duplicate (
    FT_Naming::NamingManager_ptr p)
{
  return FT_Naming::NamingManager::_duplicate (p);
}

void
TAO::Objref_Traits<FT_Naming::NamingManager>::release (
    FT_Naming::NamingManager_ptr p)
{
  ::CORBA::release (p);
}

FT_Naming::NamingManager_ptr
TAO::Objref_Traits<FT_Naming::NamingManager>::nil (void)
{
  return FT_Naming::NamingManager::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT_Naming::NamingManager>::marshal (
    const FT_Naming::NamingManager_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

::FT_Naming::ObjectGroup_ptr
FT_Naming::NamingManager::create_object_group (
  const char * group_name,
  ::FT_Naming::LoadBalancingStrategyValue lb_strategy,
  const ::PortableGroup::Criteria & the_criteria)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_group_name (group_name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_lb_strategy (lb_strategy);
  TAO::Arg_Traits< ::PortableGroup::Criteria>::in_arg_val _tao_the_criteria (the_criteria);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_group_name,
      &_tao_lb_strategy,
      &_tao_the_criteria
    };

  static TAO::Exception_Data
  _tao_FT_Naming_NamingManager_create_object_group_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectNotCreated:1.0",
        PortableGroup::ObjectNotCreated::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectNotCreated
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/InvalidCriteria:1.0",
        PortableGroup::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
        PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/CannotMeetCriteria:1.0",
        PortableGroup::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "create_object_group",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_FT_Naming_NamingManager_create_object_group_exceptiondata,
      4
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::NamingManager::delete_object_group (
  const char * group_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_group_name (group_name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_group_name
    };

  static TAO::Exception_Data
  _tao_FT_Naming_NamingManager_delete_object_group_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
        PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "delete_object_group",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_FT_Naming_NamingManager_delete_object_group_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

::FT_Naming::ObjectGroup_ptr
FT_Naming::NamingManager::get_object_group_ref_from_name (
  const char * group_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::CORBA::Object>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_group_name (group_name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_group_name
    };

  static TAO::Exception_Data
  _tao_FT_Naming_NamingManager_get_object_group_ref_from_name_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
        PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_object_group_ref_from_name",
      30,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_FT_Naming_NamingManager_get_object_group_ref_from_name_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::NamingManager::set_load_balancing_strategy (
  const char * group_name,
  ::FT_Naming::LoadBalancingStrategyValue lb_strategy)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_group_name (group_name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_lb_strategy (lb_strategy);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_group_name,
      &_tao_lb_strategy
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "set_load_balancing_strategy",
      27,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

::FT_Naming::GroupNames *
FT_Naming::NamingManager::groups (
  ::FT_Naming::LoadBalancingStrategyValue target_stategy)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::FT_Naming::GroupNames>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_target_stategy (target_stategy);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_target_stategy
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "groups",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\ami_cs.cpp:55

void
FT_Naming::NamingManager::sendc_create_object_group (
  ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
  const char * group_name,
  ::FT_Naming::LoadBalancingStrategyValue lb_strategy,
  const ::PortableGroup::Criteria & the_criteria)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_group_name (group_name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_lb_strategy (lb_strategy);
  TAO::Arg_Traits< ::PortableGroup::Criteria>::in_arg_val _tao_the_criteria (the_criteria);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_group_name,
      &_tao_lb_strategy,
      &_tao_the_criteria
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "create_object_group",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &FT_Naming::AMI_NamingManagerHandler::create_object_group_reply_stub
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\ami_cs.cpp:55

void
FT_Naming::NamingManager::sendc_delete_object_group (
  ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
  const char * group_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_group_name (group_name);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_group_name
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "delete_object_group",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &FT_Naming::AMI_NamingManagerHandler::delete_object_group_reply_stub
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\ami_cs.cpp:55

void
FT_Naming::NamingManager::sendc_get_object_group_ref_from_name (
  ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
  const char * group_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_group_name (group_name);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_group_name
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_object_group_ref_from_name",
      30,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &FT_Naming::AMI_NamingManagerHandler::get_object_group_ref_from_name_reply_stub
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\ami_cs.cpp:55

void
FT_Naming::NamingManager::sendc_set_load_balancing_strategy (
  ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
  const char * group_name,
  ::FT_Naming::LoadBalancingStrategyValue lb_strategy)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_group_name (group_name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_lb_strategy (lb_strategy);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_group_name,
      &_tao_lb_strategy
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "set_load_balancing_strategy",
      27,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &FT_Naming::AMI_NamingManagerHandler::set_load_balancing_strategy_reply_stub
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\ami_cs.cpp:55

void
FT_Naming::NamingManager::sendc_groups (
  ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
  ::FT_Naming::LoadBalancingStrategyValue target_stategy)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  
  
  TAO::Arg_Traits<void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_target_stategy (target_stategy);

  TAO::Argument *_the_tao_operation_signature[] =
    {
      &_tao_retval,
      &_tao_target_stategy
    };

  TAO::Asynch_Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "groups",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (
      ami_handler,
      &FT_Naming::AMI_NamingManagerHandler::groups_reply_stub
    );
}

FT_Naming::NamingManager::NamingManager (void)
{
}

FT_Naming::NamingManager::~NamingManager (void)
{
}

void
FT_Naming::NamingManager::_tao_any_destructor (void *_tao_void_pointer)
{
  NamingManager *_tao_tmp_pointer =
    static_cast<NamingManager *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT_Naming::NamingManager_ptr
FT_Naming::NamingManager::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingManager>::narrow (
        _tao_objref,
        "IDL:FT_Naming/NamingManager:1.0");
}

FT_Naming::NamingManager_ptr
FT_Naming::NamingManager::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<NamingManager>::unchecked_narrow (
        _tao_objref);
}

FT_Naming::NamingManager_ptr
FT_Naming::NamingManager::_nil (void)
{
  return 0;
}

FT_Naming::NamingManager_ptr
FT_Naming::NamingManager::_duplicate (NamingManager_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
FT_Naming::NamingManager::_tao_release (NamingManager_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT_Naming::NamingManager::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/PropertyManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/ObjectGroupManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FT_Naming/NamingManager:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FT_Naming::NamingManager::_interface_repository_id (void) const
{
  return "IDL:FT_Naming/NamingManager:1.0";
}

::CORBA::Boolean
FT_Naming::NamingManager::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_Naming_NamingManager (
    ::CORBA::tk_objref,
    "IDL:FT_Naming/NamingManager:1.0",
    "NamingManager");
  

namespace FT_Naming
{
  ::CORBA::TypeCode_ptr const _tc_NamingManager =
    &_tao_tc_FT_Naming_NamingManager;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for FT_Naming::AMI_NamingManagerHandler.

FT_Naming::AMI_NamingManagerHandler_ptr
TAO::Objref_Traits<FT_Naming::AMI_NamingManagerHandler>::duplicate (
    FT_Naming::AMI_NamingManagerHandler_ptr p)
{
  return FT_Naming::AMI_NamingManagerHandler::_duplicate (p);
}

void
TAO::Objref_Traits<FT_Naming::AMI_NamingManagerHandler>::release (
    FT_Naming::AMI_NamingManagerHandler_ptr p)
{
  ::CORBA::release (p);
}

FT_Naming::AMI_NamingManagerHandler_ptr
TAO::Objref_Traits<FT_Naming::AMI_NamingManagerHandler>::nil (void)
{
  return FT_Naming::AMI_NamingManagerHandler::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<FT_Naming::AMI_NamingManagerHandler>::marshal (
    const FT_Naming::AMI_NamingManagerHandler_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::create_object_group (
  ::FT_Naming::ObjectGroup_ptr ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ami_return_val
    };

  static TAO::Exception_Data
  _tao_FT_Naming_AMI_NamingManagerHandler_create_object_group_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectNotCreated:1.0",
        PortableGroup::ObjectNotCreated::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectNotCreated
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/InvalidCriteria:1.0",
        PortableGroup::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
        PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/CannotMeetCriteria:1.0",
        PortableGroup::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "create_object_group",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_FT_Naming_AMI_NamingManagerHandler_create_object_group_exceptiondata,
      4
    );
}

void
FT_Naming::AMI_NamingManagerHandler::create_object_group_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  FT_Naming::AMI_NamingManagerHandler_var _tao_reply_handler_object =
    FT_Naming::AMI_NamingManagerHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::FT_Naming::ObjectGroup_var ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val.out ())
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->create_object_group (
          
          ami_return_val.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:omg.org/PortableGroup/ObjectNotCreated:1.0",
          PortableGroup::ObjectNotCreated::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , PortableGroup::_tc_ObjectNotCreated
#endif /* TAO_HAS_INTERCEPTORS */
        },
        {
          "IDL:omg.org/PortableGroup/InvalidCriteria:1.0",
          PortableGroup::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , PortableGroup::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
        },
        {
          "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
          PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
        },
        {
          "IDL:omg.org/PortableGroup/CannotMeetCriteria:1.0",
          PortableGroup::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , PortableGroup::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::ULong const exceptions_count = 4;
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            exceptions_count,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->create_object_group_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::create_object_group_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  static TAO::Exception_Data
  _tao_FT_Naming_AMI_NamingManagerHandler_create_object_group_excep_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectNotCreated:1.0",
        PortableGroup::ObjectNotCreated::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectNotCreated
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/InvalidCriteria:1.0",
        PortableGroup::InvalidCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_InvalidCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/InvalidProperty:1.0",
        PortableGroup::InvalidProperty::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_InvalidProperty
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:omg.org/PortableGroup/CannotMeetCriteria:1.0",
        PortableGroup::CannotMeetCriteria::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_CannotMeetCriteria
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "create_object_group_excep",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_FT_Naming_AMI_NamingManagerHandler_create_object_group_excep_exceptiondata,
      4
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::delete_object_group (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  static TAO::Exception_Data
  _tao_FT_Naming_AMI_NamingManagerHandler_delete_object_group_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
        PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "delete_object_group",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (
      _tao_FT_Naming_AMI_NamingManagerHandler_delete_object_group_exceptiondata,
      1
    );
}

void
FT_Naming::AMI_NamingManagerHandler::delete_object_group_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  FT_Naming::AMI_NamingManagerHandler_var _tao_reply_handler_object =
    FT_Naming::AMI_NamingManagerHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->delete_object_group (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
          PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::ULong const exceptions_count = 1;
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            exceptions_count,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->delete_object_group_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::delete_object_group_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  static TAO::Exception_Data
  _tao_FT_Naming_AMI_NamingManagerHandler_delete_object_group_excep_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
        PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "delete_object_group_excep",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_FT_Naming_AMI_NamingManagerHandler_delete_object_group_excep_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::get_object_group_ref_from_name (
  ::FT_Naming::ObjectGroup_ptr ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Object>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ami_return_val
    };

  static TAO::Exception_Data
  _tao_FT_Naming_AMI_NamingManagerHandler_get_object_group_ref_from_name_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
        PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_object_group_ref_from_name",
      30,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_FT_Naming_AMI_NamingManagerHandler_get_object_group_ref_from_name_exceptiondata,
      1
    );
}

void
FT_Naming::AMI_NamingManagerHandler::get_object_group_ref_from_name_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  FT_Naming::AMI_NamingManagerHandler_var _tao_reply_handler_object =
    FT_Naming::AMI_NamingManagerHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::FT_Naming::ObjectGroup_var ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val.out ())
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->get_object_group_ref_from_name (
          
          ami_return_val.in ()
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      
      static TAO::Exception_Data exceptions_data [] =
      {
        {
          "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
          PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
          , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
        }
      };

      ::CORBA::ULong const exceptions_count = 1;
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            exceptions_data,
            exceptions_count,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->get_object_group_ref_from_name_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::get_object_group_ref_from_name_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  static TAO::Exception_Data
  _tao_FT_Naming_AMI_NamingManagerHandler_get_object_group_ref_from_name_excep_exceptiondata [] = 
    {
      {
        "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0",
        PortableGroup::ObjectGroupNotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , PortableGroup::_tc_ObjectGroupNotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "get_object_group_ref_from_name_excep",
      36,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_FT_Naming_AMI_NamingManagerHandler_get_object_group_ref_from_name_excep_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::set_load_balancing_strategy (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "set_load_balancing_strategy",
      27,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

void
FT_Naming::AMI_NamingManagerHandler::set_load_balancing_strategy_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  FT_Naming::AMI_NamingManagerHandler_var _tao_reply_handler_object =
    FT_Naming::AMI_NamingManagerHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {
      // Demarshall all the arguments.
      // Invoke the call back method.
      _tao_reply_handler_object->set_load_balancing_strategy (
          
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->set_load_balancing_strategy_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::set_load_balancing_strategy_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_load_balancing_strategy_excep",
      33,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::groups (
  const ::FT_Naming::GroupNames & ami_return_val)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::FT_Naming::GroupNames>::in_arg_val _tao_ami_return_val (ami_return_val);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ami_return_val
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "groups",
      6,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

void
FT_Naming::AMI_NamingManagerHandler::groups_reply_stub (
  TAO_InputCDR &_tao_in,
  ::Messaging::ReplyHandler_ptr _tao_reply_handler,
  ::CORBA::ULong reply_status)
{
  // Retrieve Reply Handler object.
  FT_Naming::AMI_NamingManagerHandler_var _tao_reply_handler_object =
    FT_Naming::AMI_NamingManagerHandler::_narrow (_tao_reply_handler);

  // Exception handling
  switch (reply_status)
  {
    case TAO_AMI_REPLY_OK:
    {

      ::FT_Naming::GroupNames ami_return_val;      // Demarshall all the arguments.
      if (!(

            (_tao_in >> ami_return_val)
         ))
        throw ::CORBA::MARSHAL ();
      
      // Invoke the call back method.
      _tao_reply_handler_object->groups (
          
          ami_return_val
        );
      break;
    }
    case TAO_AMI_REPLY_USER_EXCEPTION:
    case TAO_AMI_REPLY_SYSTEM_EXCEPTION:
    {
      const ACE_Message_Block* cdr = _tao_in.start ();
      ::CORBA::OctetSeq _tao_marshaled_exception (
          static_cast <CORBA::ULong> (cdr->length ()),
          static_cast <CORBA::ULong> (cdr->length ()),
          reinterpret_cast <unsigned char*> (cdr->rd_ptr ()),
          0);
      ::Messaging::ExceptionHolder* exception_holder_ptr = 0;
      ACE_NEW (
          exception_holder_ptr,
          ::TAO::ExceptionHolder (
            (reply_status == TAO_AMI_REPLY_SYSTEM_EXCEPTION),
            _tao_in.byte_order (),
            _tao_marshaled_exception,
            0,
            0,
            _tao_in.char_translator (),
            _tao_in.wchar_translator ()));
        
      ::Messaging::ExceptionHolder_var exception_holder_var = exception_holder_ptr;
      _tao_reply_handler_object->groups_excep (
          exception_holder_var);
      break;
    }
    case TAO_AMI_REPLY_NOT_OK:
      // @@ Michael: Not even the spec mentions this case.
      //             We have to think about this case.
      break;
  }
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:88

void
FT_Naming::AMI_NamingManagerHandler::groups_excep (
  ::Messaging::ExceptionHolder * excep_holder)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Messaging::ExceptionHolder>::in_arg_val _tao_excep_holder (excep_holder);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_excep_holder
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "groups_excep",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

FT_Naming::AMI_NamingManagerHandler::AMI_NamingManagerHandler (void)
{
}

FT_Naming::AMI_NamingManagerHandler::~AMI_NamingManagerHandler (void)
{
}

void
FT_Naming::AMI_NamingManagerHandler::_tao_any_destructor (void *_tao_void_pointer)
{
  AMI_NamingManagerHandler *_tao_tmp_pointer =
    static_cast<AMI_NamingManagerHandler *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

FT_Naming::AMI_NamingManagerHandler_ptr
FT_Naming::AMI_NamingManagerHandler::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_NamingManagerHandler>::narrow (
        _tao_objref,
        "IDL:FT_Naming/AMI_NamingManagerHandler:1.0");
}

FT_Naming::AMI_NamingManagerHandler_ptr
FT_Naming::AMI_NamingManagerHandler::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<AMI_NamingManagerHandler>::unchecked_narrow (
        _tao_objref);
}

FT_Naming::AMI_NamingManagerHandler_ptr
FT_Naming::AMI_NamingManagerHandler::_nil (void)
{
  return 0;
}

FT_Naming::AMI_NamingManagerHandler_ptr
FT_Naming::AMI_NamingManagerHandler::_duplicate (AMI_NamingManagerHandler_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
FT_Naming::AMI_NamingManagerHandler::_tao_release (AMI_NamingManagerHandler_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
FT_Naming::AMI_NamingManagerHandler::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/Messaging/ReplyHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/AMI_PropertyManagerHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/PortableGroup/AMI_ObjectGroupManagerHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:FT_Naming/AMI_NamingManagerHandler:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* FT_Naming::AMI_NamingManagerHandler::_interface_repository_id (void) const
{
  return "IDL:FT_Naming/AMI_NamingManagerHandler:1.0";
}

::CORBA::Boolean
FT_Naming::AMI_NamingManagerHandler::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:70

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_FT_Naming_AMI_NamingManagerHandler (
    ::CORBA::tk_objref,
    "IDL:FT_Naming/AMI_NamingManagerHandler:1.0",
    "AMI_NamingManagerHandler");
  

namespace FT_Naming
{
  ::CORBA::TypeCode_ptr const _tc_AMI_NamingManagerHandler =
    &_tao_tc_FT_Naming_AMI_NamingManagerHandler;
}

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::FT_Naming::GroupNames &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::FT_Naming::GroupNames>::insert_copy (
        _tao_any,
        ::FT_Naming::GroupNames::_tao_any_destructor,
        ::FT_Naming::_tc_GroupNames,
        _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::FT_Naming::GroupNames *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::FT_Naming::GroupNames>::insert (
        _tao_any,
        ::FT_Naming::GroupNames::_tao_any_destructor,
        ::FT_Naming::_tc_GroupNames,
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::FT_Naming::GroupNames *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::FT_Naming::GroupNames>::extract (
          _tao_any,
          ::FT_Naming::GroupNames::_tao_any_destructor,
          ::FT_Naming::_tc_GroupNames,
          _tao_elem);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


/// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const FT_Naming::GroupNames &_tao_elem)
{
  TAO::Any_Dual_Impl_T<FT_Naming::GroupNames>::insert_copy (
      _tao_any,
      FT_Naming::GroupNames::_tao_any_destructor,
      FT_Naming::_tc_GroupNames,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    FT_Naming::GroupNames *_tao_elem)
{
  TAO::Any_Dual_Impl_T<FT_Naming::GroupNames>::insert (
      _tao_any,
      FT_Naming::GroupNames::_tao_any_destructor,
      FT_Naming::_tc_GroupNames,
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const FT_Naming::GroupNames *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<FT_Naming::GroupNames>::extract (
        _tao_any,
        FT_Naming::GroupNames::_tao_any_destructor,
        FT_Naming::_tc_GroupNames,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT_Naming::NamingManager>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NamingManager_ptr _tao_elem)
  {
    NamingManager_ptr _tao_objptr =
      NamingManager::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      NamingManager_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<NamingManager>::insert (
        _tao_any,
        NamingManager::_tao_any_destructor,
        _tc_NamingManager,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      NamingManager_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<NamingManager>::extract (
          _tao_any,
          NamingManager::_tao_any_destructor,
          _tc_NamingManager,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT_Naming::NamingManager_ptr _tao_elem)
{
  FT_Naming::NamingManager_ptr _tao_objptr =
    FT_Naming::NamingManager::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT_Naming::NamingManager_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT_Naming::NamingManager>::insert (
      _tao_any,
      FT_Naming::NamingManager::_tao_any_destructor,
      FT_Naming::_tc_NamingManager,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT_Naming::NamingManager_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT_Naming::NamingManager>::extract (
        _tao_any,
        FT_Naming::NamingManager::_tao_any_destructor,
        FT_Naming::_tc_NamingManager,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:38
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<FT_Naming::AMI_NamingManagerHandler>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_NamingManagerHandler_ptr _tao_elem)
  {
    AMI_NamingManagerHandler_ptr _tao_objptr =
      AMI_NamingManagerHandler::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      AMI_NamingManagerHandler_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<AMI_NamingManagerHandler>::insert (
        _tao_any,
        AMI_NamingManagerHandler::_tao_any_destructor,
        _tc_AMI_NamingManagerHandler,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      AMI_NamingManagerHandler_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<AMI_NamingManagerHandler>::extract (
          _tao_any,
          AMI_NamingManagerHandler::_tao_any_destructor,
          _tc_AMI_NamingManagerHandler,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT_Naming::AMI_NamingManagerHandler_ptr _tao_elem)
{
  FT_Naming::AMI_NamingManagerHandler_ptr _tao_objptr =
    FT_Naming::AMI_NamingManagerHandler::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    FT_Naming::AMI_NamingManagerHandler_ptr *_tao_elem)
{
  TAO::Any_Impl_T<FT_Naming::AMI_NamingManagerHandler>::insert (
      _tao_any,
      FT_Naming::AMI_NamingManagerHandler::_tao_any_destructor,
      FT_Naming::_tc_AMI_NamingManagerHandler,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    FT_Naming::AMI_NamingManagerHandler_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<FT_Naming::AMI_NamingManagerHandler>::extract (
        _tao_any,
        FT_Naming::AMI_NamingManagerHandler::_tao_any_destructor,
        FT_Naming::_tc_AMI_NamingManagerHandler,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:93
#if !defined _TAO_CDR_OP_FT_Naming_GroupNames_CPP_
#define _TAO_CDR_OP_FT_Naming_GroupNames_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT_Naming::GroupNames &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT_Naming::GroupNames &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_FT_Naming_GroupNames_CPP_ */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT_Naming::NamingManager_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT_Naming::NamingManager_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FT_Naming::NamingManager RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:51

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT_Naming::AMI_NamingManagerHandler_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT_Naming::AMI_NamingManagerHandler_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::FT_Naming::AMI_NamingManagerHandler RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



