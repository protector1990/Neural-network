// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:149

#ifndef _TAO_IDL_HTIOPC_HUWXJZ_H_
#define _TAO_IDL_HTIOPC_HUWXJZ_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/HTIOP/HTIOP_Export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 5 || TAO_MICRO_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

namespace HTIOP
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:258

  struct ListenPoint;

  typedef
    ::TAO_Var_Var_T<
        ListenPoint
      >
    ListenPoint_var;

  typedef
    ::TAO_Out_T<
        ListenPoint
      >
    ListenPoint_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_ch.cpp:48

  struct HTIOP_Export ListenPoint
  {

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef ListenPoint_var _var_type;
    typedef ListenPoint_out _out_type;

    static void _tao_any_destructor (void *);
    
    ::TAO::String_Manager host;
    ::CORBA::UShort port;
    ::TAO::String_Manager htid;
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern HTIOP_Export ::CORBA::TypeCode_ptr const _tc_ListenPoint;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:99

#if !defined (_HTIOP_LISTENPOINTLIST_CH_)
#define _HTIOP_LISTENPOINTLIST_CH_

  class ListenPointList;
  typedef ::TAO_VarSeq_Var_T<ListenPointList> ListenPointList_var;
  typedef ::TAO_Seq_Out_T<ListenPointList> ListenPointList_out;
  

  class HTIOP_Export ListenPointList
    : public
        ::TAO::unbounded_value_sequence< ListenPoint>
  {
  public:
    ListenPointList (void);
    ListenPointList ( ::CORBA::ULong max);
    ListenPointList (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ListenPoint* buffer,
      ::CORBA::Boolean release = false);
    ListenPointList (const ListenPointList &);
    virtual ~ListenPointList (void);
    

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef ListenPointList_var _var_type;
    typedef ListenPointList_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern HTIOP_Export ::CORBA::TypeCode_ptr const _tc_ListenPointList;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:258

  struct BiDirHTIOPServiceContext;

  typedef
    ::TAO_Var_Var_T<
        BiDirHTIOPServiceContext
      >
    BiDirHTIOPServiceContext_var;

  typedef
    ::TAO_Out_T<
        BiDirHTIOPServiceContext
      >
    BiDirHTIOPServiceContext_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_ch.cpp:48

  struct HTIOP_Export BiDirHTIOPServiceContext
  {

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef BiDirHTIOPServiceContext_var _var_type;
    typedef BiDirHTIOPServiceContext_out _out_type;

    static void _tao_any_destructor (void *);
    
    HTIOP::ListenPointList listen_points;
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern HTIOP_Export ::CORBA::TypeCode_ptr const _tc_BiDirHTIOPServiceContext;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64

} // module HTIOP

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:66


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::HTIOP::ListenPoint>
    : public
        Var_Size_Arg_Traits_T<
            ::HTIOP::ListenPoint,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::HTIOP::ListenPointList>
    : public
        Var_Size_Arg_Traits_T<
            ::HTIOP::ListenPointList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:945

  template<>
  class Arg_Traits< ::HTIOP::BiDirHTIOPServiceContext>
    : public
        Var_Size_Arg_Traits_T<
            ::HTIOP::BiDirHTIOPServiceContext,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:60


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace HTIOP
{
  HTIOP_Export void operator<<= (::CORBA::Any &, const ::HTIOP::ListenPoint &); // copying version
  HTIOP_Export void operator<<= (::CORBA::Any &, ::HTIOP::ListenPoint*); // noncopying version
  HTIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::HTIOP::ListenPoint *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

HTIOP_Export void operator<<= (::CORBA::Any &, const HTIOP::ListenPoint &); // copying version
HTIOP_Export void operator<<= (::CORBA::Any &, HTIOP::ListenPoint*); // noncopying version
HTIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const HTIOP::ListenPoint *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace HTIOP
{
  HTIOP_Export void operator<<= ( ::CORBA::Any &, const ::HTIOP::ListenPointList &); // copying version
  HTIOP_Export void operator<<= ( ::CORBA::Any &, ::HTIOP::ListenPointList*); // noncopying version
  HTIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::HTIOP::ListenPointList *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

HTIOP_Export void operator<<= ( ::CORBA::Any &, const HTIOP::ListenPointList &); // copying version
HTIOP_Export void operator<<= ( ::CORBA::Any &, HTIOP::ListenPointList*); // noncopying version
HTIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const HTIOP::ListenPointList *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_ch.cpp:42



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace HTIOP
{
  HTIOP_Export void operator<<= (::CORBA::Any &, const ::HTIOP::BiDirHTIOPServiceContext &); // copying version
  HTIOP_Export void operator<<= (::CORBA::Any &, ::HTIOP::BiDirHTIOPServiceContext*); // noncopying version
  HTIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::HTIOP::BiDirHTIOPServiceContext *&);
}

#else



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

HTIOP_Export void operator<<= (::CORBA::Any &, const HTIOP::BiDirHTIOPServiceContext &); // copying version
HTIOP_Export void operator<<= (::CORBA::Any &, HTIOP::BiDirHTIOPServiceContext*); // noncopying version
HTIOP_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const HTIOP::BiDirHTIOPServiceContext *&);
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:43



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

HTIOP_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const HTIOP::ListenPoint &);
HTIOP_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, HTIOP::ListenPoint &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_HTIOP_ListenPointList_H_
#define _TAO_CDR_OP_HTIOP_ListenPointList_H_

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


HTIOP_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const HTIOP::ListenPointList &_tao_sequence);
HTIOP_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    HTIOP::ListenPointList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




#endif /* _TAO_CDR_OP_HTIOP_ListenPointList_H_ */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_ch.cpp:43



TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

HTIOP_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const HTIOP::BiDirHTIOPServiceContext &);
HTIOP_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, HTIOP::BiDirHTIOPServiceContext &);

TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL




// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1686


TAO_END_VERSIONED_NAMESPACE_DECL

#if defined (__ACE_INLINE__)
#include "HTIOPC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

