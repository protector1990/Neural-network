// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.0
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:149

#ifndef _TAO_IDL_FT_NAMINGMANAGERC_ASIIC9_H_
#define _TAO_IDL_FT_NAMINGMANAGERC_ASIIC9_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "orbsvcs/Naming/FaultTolerant/ftnaming_intf_export.h"
#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/Valuetype/ValueBase.h"
#include "tao/Valuetype/Valuetype_Adapter_Factory_Impl.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Messaging/Messaging.h"
#include "tao/Sequence_T.h"
#include "tao/Valuetype/Value_VarOut_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/AnyTypeCode/Any_Arg_Traits.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "orbsvcs/PortableGroupC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 5 || TAO_MICRO_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_root\root_ch.cpp:157
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:35

namespace FT_Naming
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typedef\typedef_ch.cpp:370

  typedef PortableGroup::ObjectGroup ObjectGroup;
  typedef PortableGroup::ObjectGroup_ptr ObjectGroup_ptr;
  typedef PortableGroup::ObjectGroup_var ObjectGroup_var;
  typedef PortableGroup::ObjectGroup_out ObjectGroup_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Intf_Export ::CORBA::TypeCode_ptr const _tc_ObjectGroup;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_constant\constant_ch.cpp:35

  const char *const TAO_FT_OBJECT_GROUP_NAME = "TAO_FT_GroupName";

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_constant\constant_ch.cpp:35

  const char *const TAO_FT_LOAD_BALANCING_STRATEGY = "TAO_FT_LB_Strategy";

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typedef\typedef_ch.cpp:370

  typedef ::CORBA::Long LoadBalancingStrategyValue;
  typedef ::CORBA::Long_out LoadBalancingStrategyValue_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Intf_Export ::CORBA::TypeCode_ptr const _tc_LoadBalancingStrategyValue;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_constant\constant_ch.cpp:35

  const CORBA::Long ROUND_ROBIN = 0;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_constant\constant_ch.cpp:35

  const CORBA::Long RANDOM = 1;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_constant\constant_ch.cpp:35

  const CORBA::Long LEAST = 2;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typedef\typedef_ch.cpp:404

  typedef char * GroupName;
  typedef ::CORBA::String_var GroupName_var;
  typedef ::CORBA::String_out GroupName_out;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Intf_Export ::CORBA::TypeCode_ptr const _tc_GroupName;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_ch.cpp:99

#if !defined (_FT_NAMING_GROUPNAMES_CH_)
#define _FT_NAMING_GROUPNAMES_CH_

  class GroupNames;
  typedef ::TAO_VarSeq_Var_T<GroupNames> GroupNames_var;
  typedef ::TAO_Seq_Out_T<GroupNames> GroupNames_out;
  

  class TAO_FtNaming_Intf_Export GroupNames
    : public
        ::TAO::unbounded_basic_string_sequence<char>
  {
  public:
    GroupNames (void);
    GroupNames ( ::CORBA::ULong max);
    GroupNames (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Char ** buffer,
      ::CORBA::Boolean release = false);
    GroupNames (const GroupNames &);
    virtual ~GroupNames (void);
    

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    
    typedef GroupNames_var _var_type;
    typedef GroupNames_out _out_type;

    static void _tao_any_destructor (void *);
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Intf_Export ::CORBA::TypeCode_ptr const _tc_GroupNames;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_FT_NAMING_NAMINGMANAGER__VAR_OUT_CH_)
#define _FT_NAMING_NAMINGMANAGER__VAR_OUT_CH_

  class AMI_NamingManagerHandler;
  typedef AMI_NamingManagerHandler *AMI_NamingManagerHandler_ptr;

  class NamingManager;
  typedef NamingManager *NamingManager_ptr;
  typedef TAO_Objref_Var_T<NamingManager> NamingManager_var;
  typedef TAO_Objref_Out_T<NamingManager> NamingManager_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_FtNaming_Intf_Export NamingManager
    : public virtual ::PortableGroup::PropertyManager,
      public virtual ::PortableGroup::ObjectGroupManager
  
  {
  public:
    friend class TAO::Narrow_Utils<NamingManager>;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef NamingManager_ptr _ptr_type;
    typedef NamingManager_var _var_type;
    typedef NamingManager_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static NamingManager_ptr _duplicate (NamingManager_ptr obj);

    static void _tao_release (NamingManager_ptr obj);

    static NamingManager_ptr _narrow (::CORBA::Object_ptr obj);
    static NamingManager_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static NamingManager_ptr _nil (void);

    virtual ::FT_Naming::ObjectGroup_ptr create_object_group (
      const char * group_name,
      ::FT_Naming::LoadBalancingStrategyValue lb_strategy,
      const ::PortableGroup::Criteria & the_criteria);

    virtual void delete_object_group (
      const char * group_name);

    virtual ::FT_Naming::ObjectGroup_ptr get_object_group_ref_from_name (
      const char * group_name);

    virtual void set_load_balancing_strategy (
      const char * group_name,
      ::FT_Naming::LoadBalancingStrategyValue lb_strategy);

    virtual ::FT_Naming::GroupNames * groups (
      ::FT_Naming::LoadBalancingStrategyValue target_stategy);

    virtual void sendc_create_object_group (
      ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
      const char * group_name,
      ::FT_Naming::LoadBalancingStrategyValue lb_strategy,
      const ::PortableGroup::Criteria & the_criteria);

    virtual void sendc_delete_object_group (
      ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
      const char * group_name);

    virtual void sendc_get_object_group_ref_from_name (
      ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
      const char * group_name);

    virtual void sendc_set_load_balancing_strategy (
      ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
      const char * group_name,
      ::FT_Naming::LoadBalancingStrategyValue lb_strategy);

    virtual void sendc_groups (
      ::FT_Naming::AMI_NamingManagerHandler_ptr ami_handler,
      ::FT_Naming::LoadBalancingStrategyValue target_stategy);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    NamingManager (void);

    // Concrete non-local interface only.
    NamingManager (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    NamingManager (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~NamingManager (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    NamingManager (const NamingManager &);

    void operator= (const NamingManager &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Intf_Export ::CORBA::TypeCode_ptr const _tc_NamingManager;

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_interface.cpp:748

#if !defined (_FT_NAMING_AMI_NAMINGMANAGERHANDLER__VAR_OUT_CH_)
#define _FT_NAMING_AMI_NAMINGMANAGERHANDLER__VAR_OUT_CH_

  class AMI_NamingManagerHandler;
  typedef AMI_NamingManagerHandler *AMI_NamingManagerHandler_ptr;
  typedef TAO_Objref_Var_T<AMI_NamingManagerHandler> AMI_NamingManagerHandler_var;
  typedef TAO_Objref_Out_T<AMI_NamingManagerHandler> AMI_NamingManagerHandler_out;
  

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:40

  class TAO_FtNaming_Intf_Export AMI_NamingManagerHandler
    : public virtual ::PortableGroup::AMI_PropertyManagerHandler,
      public virtual ::PortableGroup::AMI_ObjectGroupManagerHandler
  
  {
  public:
    friend class TAO::Narrow_Utils<AMI_NamingManagerHandler>;

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_type.cpp:304

    typedef AMI_NamingManagerHandler_ptr _ptr_type;
    typedef AMI_NamingManagerHandler_var _var_type;
    typedef AMI_NamingManagerHandler_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static AMI_NamingManagerHandler_ptr _duplicate (AMI_NamingManagerHandler_ptr obj);

    static void _tao_release (AMI_NamingManagerHandler_ptr obj);

    static AMI_NamingManagerHandler_ptr _narrow (::CORBA::Object_ptr obj);
    static AMI_NamingManagerHandler_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static AMI_NamingManagerHandler_ptr _nil (void);

    virtual void create_object_group (
      ::FT_Naming::ObjectGroup_ptr ami_return_val);

    static void
    create_object_group_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void create_object_group_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void delete_object_group (
      void);

    static void
    delete_object_group_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void delete_object_group_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void get_object_group_ref_from_name (
      ::FT_Naming::ObjectGroup_ptr ami_return_val);

    static void
    get_object_group_ref_from_name_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void get_object_group_ref_from_name_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void set_load_balancing_strategy (
      void);

    static void
    set_load_balancing_strategy_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void set_load_balancing_strategy_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    virtual void groups (
      const ::FT_Naming::GroupNames & ami_return_val);

    static void
    groups_reply_stub (
      TAO_InputCDR &_tao_reply_cdr,
      ::Messaging::ReplyHandler_ptr _tao_reply_handler,
      ::CORBA::ULong reply_status);

    virtual void groups_excep (
      ::Messaging::ExceptionHolder * excep_holder);

    // TAO_IDL - Generated from
    // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:137

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    AMI_NamingManagerHandler (void);

    // Concrete non-local interface only.
    AMI_NamingManagerHandler (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    AMI_NamingManagerHandler (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~AMI_NamingManagerHandler (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    AMI_NamingManagerHandler (const AMI_NamingManagerHandler &);

    void operator= (const AMI_NamingManagerHandler &);
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:34

  extern TAO_FtNaming_Intf_Export ::CORBA::TypeCode_ptr const _tc_AMI_NamingManagerHandler;

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:64

} // module FT_Naming

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:66

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:306

#if !defined (_MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_)
#define _MESSAGING_EXCEPTIONHOLDER__ARG_TRAITS_

  template<>
  class Arg_Traits< ::Messaging::ExceptionHolder>
    : public
        Object_Arg_Traits_T<
            ::Messaging::ExceptionHolder *,
            ::Messaging::ExceptionHolder_var,
            ::Messaging::ExceptionHolder_out,
            TAO::Value_Traits<Messaging::ExceptionHolder>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:683

  template<>
  class Arg_Traits< ::FT_Naming::GroupNames>
    : public
        Var_Size_Arg_Traits_T<
            ::FT_Naming::GroupNames,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_FT_NAMING_NAMINGMANAGER__ARG_TRAITS_)
#define _FT_NAMING_NAMINGMANAGER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT_Naming::NamingManager>
    : public
        Object_Arg_Traits_T<
            ::FT_Naming::NamingManager_ptr,
            ::FT_Naming::NamingManager_var,
            ::FT_Naming::NamingManager_out,
            TAO::Objref_Traits<FT_Naming::NamingManager>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:145

#if !defined (_FT_NAMING_AMI_NAMINGMANAGERHANDLER__ARG_TRAITS_)
#define _FT_NAMING_AMI_NAMINGMANAGERHANDLER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::FT_Naming::AMI_NamingManagerHandler>
    : public
        Object_Arg_Traits_T<
            ::FT_Naming::AMI_NamingManagerHandler_ptr,
            ::FT_Naming::AMI_NamingManagerHandler_var,
            ::FT_Naming::AMI_NamingManagerHandler_out,
            TAO::Objref_Traits<FT_Naming::AMI_NamingManagerHandler>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:60

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_FT_NAMING_NAMINGMANAGER__TRAITS_)
#define _FT_NAMING_NAMINGMANAGER__TRAITS_

  template<>
  struct TAO_FtNaming_Intf_Export Objref_Traits< ::FT_Naming::NamingManager>
  {
    static ::FT_Naming::NamingManager_ptr duplicate (
        ::FT_Naming::NamingManager_ptr p);
    static void release (
        ::FT_Naming::NamingManager_ptr p);
    static ::FT_Naming::NamingManager_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT_Naming::NamingManager_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_FT_NAMING_AMI_NAMINGMANAGERHANDLER__TRAITS_)
#define _FT_NAMING_AMI_NAMINGMANAGERHANDLER__TRAITS_

  template<>
  struct TAO_FtNaming_Intf_Export Objref_Traits< ::FT_Naming::AMI_NamingManagerHandler>
  {
    static ::FT_Naming::AMI_NamingManagerHandler_ptr duplicate (
        ::FT_Naming::AMI_NamingManagerHandler_ptr p);
    static void release (
        ::FT_Naming::AMI_NamingManagerHandler_ptr p);
    static ::FT_Naming::AMI_NamingManagerHandler_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::FT_Naming::AMI_NamingManagerHandler_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_ch.cpp:47



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Intf_Export void operator<<= ( ::CORBA::Any &, const ::FT_Naming::GroupNames &); // copying version
  TAO_FtNaming_Intf_Export void operator<<= ( ::CORBA::Any &, ::FT_Naming::GroupNames*); // noncopying version
  TAO_FtNaming_Intf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::FT_Naming::GroupNames *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Intf_Export void operator<<= ( ::CORBA::Any &, const FT_Naming::GroupNames &); // copying version
TAO_FtNaming_Intf_Export void operator<<= ( ::CORBA::Any &, FT_Naming::GroupNames*); // noncopying version
TAO_FtNaming_Intf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const FT_Naming::GroupNames *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Intf_Export void operator<<= ( ::CORBA::Any &, NamingManager_ptr); // copying
  TAO_FtNaming_Intf_Export void operator<<= ( ::CORBA::Any &, NamingManager_ptr *); // non-copying
  TAO_FtNaming_Intf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, NamingManager_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Intf_Export void operator<<= (::CORBA::Any &, FT_Naming::NamingManager_ptr); // copying
TAO_FtNaming_Intf_Export void operator<<= (::CORBA::Any &, FT_Naming::NamingManager_ptr *); // non-copying
TAO_FtNaming_Intf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT_Naming::NamingManager_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:41



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace FT_Naming
{
  TAO_FtNaming_Intf_Export void operator<<= ( ::CORBA::Any &, AMI_NamingManagerHandler_ptr); // copying
  TAO_FtNaming_Intf_Export void operator<<= ( ::CORBA::Any &, AMI_NamingManagerHandler_ptr *); // non-copying
  TAO_FtNaming_Intf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, AMI_NamingManagerHandler_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Intf_Export void operator<<= (::CORBA::Any &, FT_Naming::AMI_NamingManagerHandler_ptr); // copying
TAO_FtNaming_Intf_Export void operator<<= (::CORBA::Any &, FT_Naming::AMI_NamingManagerHandler_ptr *); // non-copying
TAO_FtNaming_Intf_Export ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FT_Naming::AMI_NamingManagerHandler_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_ch.cpp:65

#if !defined _TAO_CDR_OP_FT_Naming_GroupNames_H_
#define _TAO_CDR_OP_FT_Naming_GroupNames_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_FtNaming_Intf_Export ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FT_Naming::GroupNames &_tao_sequence);
TAO_FtNaming_Intf_Export ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FT_Naming::GroupNames &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_FT_Naming_GroupNames_H_ */

// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Intf_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::NamingManager_ptr );
TAO_FtNaming_Intf_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::NamingManager_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:41

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

TAO_FtNaming_Intf_Export ::CORBA::Boolean operator<< (TAO_OutputCDR &, const FT_Naming::AMI_NamingManagerHandler_ptr );
TAO_FtNaming_Intf_Export ::CORBA::Boolean operator>> (TAO_InputCDR &, FT_Naming::AMI_NamingManagerHandler_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\private\datascience\neuralna_mreza\neuralnetwork\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1686
#if defined (__ACE_INLINE__)
#include "FT_NamingManagerC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

